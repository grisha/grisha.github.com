---
layout: post
title: "Reading Bitcoin blocks"
date: 2017-09-08 16:41
comments: true
published: false
categories:
---

If by now you're not curious about Bitcoin, then, well, let's just say
you're a little behind the times. Bitcoin is not a fad, and if you
think it has no intrinsic value, you just do not understand how it
works.

Bitcoin, or, more generally, the notion that something that holds all
the properties of a currency can be generated by using large amounts
of electricity and traded using cryptography is a reality, and one
that will transform the world in ways that we cannot quite imagine. If
you think the Internet was disruptive, you haven't seen anything yet.

The first thing that everyone needs to know about Bitcoin (I'm
sticking with "Bitcoin" here, even if all this applies to
"crypto-currencies" in general.) is that it is not as simple as one
might think. This isn't any different from how most people in general
do not understand accounting, or law, or medicine, and need to refer
to a specialist. What's different is that a CPA doesn't know
everything that applies to Bitcoin, nor does a computer scientist or a
cryptographer or an economist or a quant. Each knows a substantial
piece of the puzzle, but Bitcoin is at an intersection of many
disciplines and the world need new kinds of specialists.

There are things that are very complex but "just work" that few people
need to know, e.g. wireless data transmission. We can use our cell
phones without knowing the physics of what makes it work. But this
does not apply to Bitcoin. Anyone who claims to know how it works I
believe needs to understand all aspects of it, including elliptic
curve cryptography and secure hashing algorithms, etc.

### How to Learn Bitcoin ###

The best way to learn how Bitcoin works (as a software developer, that
is) is to write some code to read the blockchain. You can see my
attempt at it [here](https://github.com/blkchain/blkchain), and I will
write about it in more detail separately.

### Some (literally) million dollar questions. ###

Some aspects of what crypto-currencies are are still not very well
understood. Here is a list of thins that I would like answered
definitively, but I am not exactly sure how. In no particular order.


### DAG-based blockchains ###

There are a few coins out there that claim that a DAG is a better
structure than a blockchain. At least one even makes a claim that
Proof of Work is not necessary. I am at this point leaning towards the
opinion that they are sadly mistaken. The Bitcoin blockchain is
actually a DAG, and blocks are an optimization because without blocks
we'd need an insane number of SHA hashes computed every time a
transaction is verified. Proof of work is absolutely essential, it is
what makes it truly scarce, because thus far we have not figured out a
way to produce unlimited computational capability and quite likely
never will.

### Proof-of-Work vs Proof-of-Stake ###

I already touched on this above. I think the idea that a currency can
be backed by its own value is flawed. I might be wrong, but that's my
most current opinion.

### Is Bitcoin a Store of Value or an exchange medium? ###

In other words, will crypto currencies revolutionize the world of
commerce by eliminating the need for credit cards and fiat currencies
we all know and love? I don't think so. I think that if there is a
niche that Bitcoin fills at this point, it is the store of value and
the ability to turn that value into a fiat currency more efficiently
that just about anything else, without the need to for intermediaries,
or at least not as many as with stocks, gold or bonds.

### Altcoins ###

If anyone can create a coin similar to Bitcoin, doesn't that mean that
Bitcoin can be infinitely diluted by other competing
crypto-currencies? No. And the reasoning goes back to
Proof-Of-Work. Generating coing and verifying transaction requires
lots of energy, which is best spent towards the most established and
popular currency, not an alternative. This is another argument for why
PoW is absolutely necessary.

### Eventual price of BTC ###

Are we going to see million dollar bitcoins? I think it's entirely
plausible. If you suspect it's "too good to be true", consider that a
lot of why this might actually happen is not so much the value of
Bitcoin (it's not going to get any more valueable with time in real
terms), but rather because of accelerating inflation of fiat. But I
can't say I understand this aspect of it very well, and I don't think
anyone does at this point. We can also see Bitcoin tumble, please be
careful.

### Regulation of Bitcoin and others ###

It's a matter of time. Much of it is already regulated under the rules
governing securities and exchange, commerce and taxes, and many laws
will be adjusted to be more suitable to Bitcoin and other crypto
currencies. If you think that crypto currencies are an anarchist's
dream come true, you are mistaken. Yet some aspects cannot be
controlled by definition, e.g. no government can ever control the
supply of it, which is what makes it very disruptive.

### Initial Coin Offerings (ICO) ###

Unlike Bitcoin, ICO's are a fad and most of them are illegal
scams. Even when they are not scams, they are most likely violating
securities regulation already in place, and it's just a matter of time
before they become effectively illegal.

### Taxes ###

Tax laws will need some adjustments since there is no way to tell from
looking at the blockchain when a Bitcoin was acquired or sold, because
transfering a Bitcoin from one wallet to another owned by the same
person is not a taxable event.



What beter way is there to learn all about it then to try to write
some Go code to shove the entire blockchain into Postgres?

This may be a totally futile endeavor, but that only makes it more
fun.

To witness the great american eclipse, ee spent a week on the beaches
of South Carolina, and while there I started tinkering on a possibly
totally useless exercise of shoving the entire blockchain into Postgres.

I can't really say whether indeed it was useless until I finish it,
and it turned out to be considerably more involved than I realized
initially.

My plan is approximately like this:

* Figure out how to read the blockchain from disk (the Bitcoin core format).
* Import it into Postgres.
* See how much of it can be validated in Postgres itself.
* See if we can fill-in the missing functionality to make Postgres fully
  capable of verifying a transaction? Unless I come up with something more
  interesting to do.
* ???
* Profit!

Oh, and of course we're doing all this in Go. (What else?)

#### Has anyone done this? ####

* [Abe](https://github.com/bitcoin-abe/bitcoin-abe) - while I suspect
  most people use it with MySQL, it does have fully functional
  Postgres support. It's written in Python, and the blockchain import
  is likely to take a week or more these days.

* btcd and gocoin are Golang examples

  Btcd is a pretty widely used Go implementation of a node. It uses a
  different on-disk format.

  Gocoin is another Go implementation. It's an unusual project in that
  the author does not accept pull requests.

* the MS SQL-SERVER thing

  https://github.com/ladimolnar/BitcoinDatabaseGenerator

#### Main Components ####

* Blocks
* Transactions
* Inputs
* Outputs

#### Data Types ####

* bytea
* bigint (because unsigned)

#### Other ####

* Where are the hashes?
