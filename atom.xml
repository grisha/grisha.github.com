<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gregory Trubetskoy]]></title>
  <link href="http://grisha.org/atom.xml" rel="self"/>
  <link href="http://grisha.org/"/>
  <updated>2018-02-12T14:53:12-05:00</updated>
  <id>http://grisha.org/</id>
  <author>
    <name><![CDATA[Gregory Trubetskoy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Proof-Of-Work in the Blockchain is a Decentralized Clock]]></title>
    <link href="http://grisha.org/blog/2018/01/23/explaining-proof-of-work/"/>
    <updated>2018-01-23T11:41:00-05:00</updated>
    <id>http://grisha.org/blog/2018/01/23/explaining-proof-of-work</id>
    <content type="html"><![CDATA[<p>If you are confused about what role Proof-Of-Work plays in the Bitcoin
blockchain, you’ve come to the right place. This is an explanation
that I wish was more commonly known. Before you get stuck on trying
to understand the <a href="http://satoshi.nakamotoinstitute.org/emails/cryptography/11/">byzantine generals problem</a>,
try this simple reasoning first.</p>

<p>This write up isn’t about Proof-Of-Work per se, it explains why the
blockchain needs it. If you do not know anything about Proof-Of-Work,
then <a href="https://en.bitcoin.it/wiki/Proof_of_work">this</a> link might be a
good start.</p>

<p>This explanation of how the Proof-Of-Work is essential for the
blockchain rests on illustrating a few properties of Proof-Of-Work and
the blockchain that are not immediately obvious and sometimes
counter-intuitive. They are listed below in no specific order. Having
understood each, one should arrive at the conclusion that it is a
mechanism by which a distributed and decentralized system of timing,
i.e. a clock is accomplished.</p>

<h2 id="proof-of-work-recap">Proof-Of-Work Recap</h2>

<p>Very briefly, the Bitcoin Proof-Of-Work is a value whose
<a href="https://en.wikipedia.org/wiki/SHA-2">SHA-2</a> hash
conforms to a certain requirement which makes such a value difficult
to find. The difficulty is established by requiring that the hash is
less than a specific number, the smaller the number, the more rare the
input value and the higher the difficulty of finding it.</p>

<p>It is called “Proof Of Work”, because it is known that a value with
such a hash is extremely rare, and that to find this value requires a
lot of trial and error, i.e. “work”. Work in turn implies <em>time</em>.</p>

<p>By varying the requirement we can vary the difficulty and thus the
probability of such a hash being found. The Bitcoin difficulty adjusts
dynamically so that a conforming hash is found on average once every
ten minutes.</p>

<h2 id="the-decentralized-ledger-time-ordering-problem">The Decentralized Ledger Time Ordering Problem</h2>

<p>Any ledger absolutely needs order. One cannot spend money before
receiving it, nor can one spend money that is already
spent. Blockchain transactions must be ordered in time, unambiguously,
and without any trusted parties.</p>

<p>But if transactions are generated by anonymous participants all over
the world, and no central party is responsible for organizing the
list, how can it be done? For example transactions could include
timestamps, but how could those be trusted?</p>

<p>Time is but a human concept, and any source of it, such as an atomic
clock, is a “trusted third party” (which on top of everything is
slightly wrong most of time). Paradoxically, relying on a timestamp to
determine event order is not possible in a decentralized system.</p>

<h2 id="timing-is-the-root-problem">Timing is the Root Problem</h2>

<p>It must be stressed that the <em>impossibility of ordering by time</em> was “the problem” that
precluded a decentralized ledger from ever being possible until
Satoshi Nakamoto invented a <a href="https://bitcoin.org/bitcoin.pdf">solution</a>. There are many other technical solutions that
play into the blockchain, but timing is fundamental and paramount,
without it there is no blockchain.</p>

<h2 id="nothing-happens-between-blocks">Nothing Happens Between Blocks</h2>

<p>The state of the chain is reflected by its blocks, and each new block
produces a new state. The blockchain state moves forward one block at
a time, and the average 10 minutes of a block is the smallest measure
of blockchain time.</p>

<h2 id="sha-is-memoryless-and-progress-free">SHA is Memoryless and Progress-Free</h2>

<p>The Secure Hash Algorithm is what is known in statistics and
probability as <a href="https://en.wikipedia.org/wiki/Memorylessness"><em>memoryless</em></a>.
This is a property that is particularly counter-intuitive for us humans.</p>

<p>The best example of memoryless-ness is a coin toss. If a coin comes up
heads 10 times in a row, does it mean that the next toss is more
likely to be tails? Our intuition says yes, but in reality each toss
has a 50/50 chance regardless of what happened.</p>

<p>Memorylessness is required for the problem to be <em>progress-free</em>,
which is another related statistical term. Progress-free means that as
miners try to solve blocks iterating over nonces, each attempt is a
stand-alone event and the probability of finding a solution is
constant at each attempt, regardless of how much work has been done in
the past. In other words at each attempt the participant is not
getting any “closer” to a solution i.e. making no progress.</p>

<p>The probability of finding the solution given a specific difficulty in
a given period of time is therefore determined solely by the speed at
which all participants can crunch through the hashes. Not the prior
history, not the data, just the hashrate.</p>

<p>The hashrate in turn is a function of the number of participants and
the speed of the equipment used to calculate the hash.</p>

<h2 id="the-sha-input-is-irrelevant">The SHA Input Is Irrelevant</h2>

<p>This too goes against our intuition: It doesn’t matter what you feed
the SHA function. Without getting into the weeds, the SHA-256 function
accepts a 32-bit value (repeatedly if necessary for larger inputs) and
returns 32 bytes of output. In the Bitcoin blockchain the input is a
block header.</p>

<p>But if we just fed it random values, the probability of finding a
conforming hash would <em>still be the same</em>. Regardless of whether the
input is a valid block header or bytes from /dev/random, it is going
to take 10 minutes on average to find a solution.</p>

<p>Of course if you find a conforming hash but your input wasn’t a valid
block, such a solution cannot be added to the blockchain, but it is
still Proof-Of-Work (albeit useless for the blockchain).</p>

<h2 id="the-difficulty-is-intergalactic">The Difficulty is Intergalactic</h2>

<p>This is where things get particularly difficult to grasp: The
difficulty is <em>universal</em>, meaning it spans the entire universe. We
could have miners on Mars helping out, they do not need know or
communicate with the Earth miners, the problem would still be solved
every 10 minutes. (Ok, they’ll need to somehow tell the Earth people
that they solved it if they do, or else we’ll never know about it.)</p>

<p>In a paradoxical way, the distant participants are “communicating”
without actually communicating, because they are collectively solving
the same statistical problem.</p>

<p>The universal property while at first seemingly extraordinary is
actually easy to explain. I used the term “universal” because it
describes it well in one word, but really it means “known by every
participant”.</p>

<p>The input to SHA-256 is an integer between 0 and all possible
integers, it is a set of numbers that is known by every participant
even if it is potentially infinitely large. The participants can only
pick from this set.</p>

<p>Since the input set is universally known, the function (SHA-256) is
universally known, and the difficulty requirement is universally known,
then the probability of finding a solution is also indeed universal.</p>

<h2 id="trying-a-sha-makes-you-a-participant">Trying a SHA Makes You a Participant</h2>

<p>Again, mind-boggling. If the stated problem is to find a conforming
hash, all you have to do is to try it once, and bingo, you’ve affected
the global hash rate, and for that one attempt you were a participant
helping others solve the problem. You did not need to tell others that
you did it, they didn’t need to know about it, but your attempt <em>did</em>
affect the outcome. For the whole universe, no less.</p>

<p>It is noteworthy that since SHA is memoryless, each attempt could be
thought of as a participant joining the effort and immediately
leaving. Thus miners join and leave, trillions of times per second.</p>

<h2 id="work-is-a-clock">Work is a Clock</h2>

<p>And there is the crux of it: The difficulty in finding a conforming
hash acts as <em>a clock</em>. It doesn’t matter that this clock is
imprecise. What matters is that the state of the chain can be tied
unambiguously to the ticks of such a clock.</p>

<p>This clock is operated by the multi-terahash rate of an unknown
number of collective participants spread across the planet,
independent of one another.</p>

<h2 id="last-piece-of-the-puzzle">Last Piece of the Puzzle</h2>

<p>It must be the hash of a block (the block header, to be precise). As
we mentioned, the input doesn’t matter, but if it is an actual block,
then whenever a solution is found, it happened at the tick of our
Proof-Of-Work clock. Not before, not after, but exactly at. We know
this unambiguosly because the block was part of that mechanism.</p>

<p>To put it another way, if blocks weren’t the input to the SHA256
function, we’d still have a distributed clock, but we couldn’t tie blocks to
the ticks of this clock. Using the blocks addresses this issue.</p>

<h2 id="and-that-is-it">And that is it</h2>

<p>This is what Proof-Of-Work does for the blockchain. It is not a
“lottery” where miners win the right to solve a block, nor is it some
peculiar conversion of real energy into a valuable concept, those
things are secondary.</p>

<p>For example the lottery and the miner’s reward aspect is what
encourages miners to participate, but it isn’t what makes the
blockchain possible. Blocks are a Merkle tree, but again, that has
nothing to do with Proof-Of-Work, it cryptographically reinforces
recording of the block ordering. Proof-Of-Work is also the mechanism
by which blocks become effectively immutable, and that’s a nice
side-effect which makes Segregated Witness possible, but it could just
as well be done by preserving the signatures (witness), so this too is
secondary.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Proof-Of-Work is simply a distributed, decentralized clock.</p>

<p>If you understand this explanation, then you should have a much better
grasp of how Proof-Of-Work compares to <a href="https://en.wikipedia.org/wiki/Proof-of-stake">Proof-Of-Stake</a>,
and it should
be apparent that the two are not comparable: Proof-Of-Stake is about
(randomly distributed) authority, while Proof-Of-Work is a clock.</p>

<p>Proof-Of-Work is probably a misnomer. It is not about proving work, it
is about verifiably taking time. When I see a hash that satisfies the
difficulty, I know it must have taken time. The method by which the
delay is accomplished is “work”, but the hash is a proof of <em>time</em>,
not work.</p>

<p>Figuring out a way to pace ticks without work is a trillion dollar
problem, if you find one, please do let me know!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Bitcoin Blockchain PostgresSQL Schema]]></title>
    <link href="http://grisha.org/blog/2017/12/15/blockchain-and-postgres/"/>
    <updated>2017-12-15T08:28:00-05:00</updated>
    <id>http://grisha.org/blog/2017/12/15/blockchain-and-postgres</id>
    <content type="html"><![CDATA[<p>In a <a href="http://grisha.org/blog/2017/10/10/postgre-as-a-full-node/">previous post</a> I wrote
some initial thoughts on storing the blockchain in Postgres. It’s been
a couple of months and I’ve made some progress on the
<a href="https://github.com/blkchain/blkchain">import project</a>. This post documents
the latest incarnation of the SQL schema used to store the
blockchain as well as thoughts on why it was decided to be this way.</p>

<h2 id="blockchain-data-structure-overview">Blockchain Data Structure Overview</h2>

<p>The <a href="https://bitcoin.org/en/developer-reference#block-chain">Bitcoin blockchain</a>
consists of <em><a href="https://bitcoin.org/en/developer-reference#serialized-blocks">blocks</a></em>.
A block is a set of <em><a href="https://bitcoin.org/en/developer-reference#raw-transaction-format">transactions</a></em>.
A block also contains some <a href="https://bitcoin.org/en/developer-reference#block-headers">block-specific information</a>,
such as the nonce for the <a href="https://en.bitcoin.it/wiki/Proof_of_work">Proof-Of-Work</a> validating the block.</p>

<p>A transaction consist of <em>inputs</em> and <em>outputs</em>. The inputs reference
outputs from prior transactions, which may include transactions in the
same block. When an output is referenced by an input, the output is
considered spent in its entirety, i.e. there is no way to spend a part
of an output.</p>

<p>When two <em>different</em> transactions’ inputs reference the same output, it is
considered a <em><a href="https://en.wikipedia.org/wiki/Double-spending">double spend</a></em>,
and only one of the spending transactions is valid (the details
of how validity is determined are outside the scope of this write up).
While double-spends do imply that one of the transactions is invalid,
it is not uncommon for double-spends to exist at least for a period of time,
thus the database schema needs to allow them.</p>

<p>A transaction’s input value is the sum of its inputs and the output
value is the sum of its outputs. Naturally, the output value cannot
exceed the input value, but it is normal for the output value to be
<em>less</em> than the input value. The discrepancy between the input and the
output is the transaction <em><a href="https://en.bitcoin.it/wiki/Transaction_fees">fee</a></em>
and is taken by the miner solving the block in which the transaction is included.</p>

<p>The first transaction in a block is referred to as the
<em>coinbase</em>. Coinbase is a special transaction where the inputs refer
to a (non-existent) transaction hash of all zeros. Coinbase outputs
are the sum of all the fees and the <em><a href="https://en.bitcoin.it/wiki/Mining#Reward">miner reward</a></em>.</p>

<p>Curiously it is possible for the same coinbase transaction to be
included in more than one block, and there is at least
<a href="https://blockchain.info/tx/e3bf3d07d4b0375638d5f1db5255fe07ba2c4cb067cd81b84ee974b6585fb468">one case</a>
of this in the blockchain. The implication of this is that the second
instance of such a transaction is unspendable. This oddity was
addressed by a change in the consensus which requires the block
<em>height</em> to be referenced in the coinbase and is since then no longer
possible (see <a href="https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki">BIP30</a>).</p>

<p>The same transaction can be included in more than one block. This is
common during chain splits, i.e. when more than one miner solves a
block. Eventually one of such blocks will become <em>orphaned</em>, but there
is a period of time during which it is not known which chain is
considered “best”, and the database structure needs to accommodate
this. Chain splits also cause multiple blocks to have the same height
which implies that height alone cannot identify a particular block or
that it is unique.</p>

<p>With introduction of <em>SegWit</em> transactions also include <em>witness</em>
data. Witness is stored at the end of a transaction as a list where
each entry corresponds to an input. A witness entry is in turn a list,
because an input can have multiple signatures (aka witness). Presently
per-input witness list is stored in the input record as a BYTEA.</p>

<h2 id="row-ids-and-hashes">Row Ids and Hashes</h2>

<p>In the blockchain blocks and transactions are always referred to
through their <em>hash</em>. A hash is an array of 32 bytes. While in theory
we could build a schema which relies on the hash as the record
identifier, in practice it is cumbersome compared to the traditional
integer ids. Firstly, 32 bytes is four times larger than a BIGINT and
eight times larger than an INT, which impacts greatly the amount of
space required to store inputs and outputs as well as degrades index
performance. For this reason we use INT for block ids and BIGINT for
transaction ids (INT is not big enough and would overflow in a few
years).</p>

<p>There is also an ambiguity in how the hash is printed versus how it is
stored. While the SHA standard does not specify the endian-ness of the
hash and refers to it as an array of bytes, Satoshi Nakomoto decided
to treat hashes as little-endian 256-bit integers. The implication
being that when the hash is printed (e.g. as a transaction id) the order of
bytes is the reverse of how it is stored in the blockchain.</p>

<p>Using integer ids creates a complication in how inputs reference
outputs. Whereas in the blockchain it is done entirely via a
transaction hash, here we need to also store the integer id of the
referenced transaction (<code>prevout_tx_id</code>). This is an easily
justifiable optimization, without it to lookup the input transaction
would require first finding the transaction integer id. The downside
is that during the initial import maintaining the hash to integer id
correspondence in an efficient manner is bit of a challenge.</p>

<h2 id="integers">Integers</h2>

<p>Most integers in Core are defined as <code>uint32_t</code>, which is an unsigned
4-byte integer. Postgres 4-byte <code>INT</code> is signed, which presents us
with two options: (1) use <code>BIGINT</code> instead, or (2) use <code>INT</code> with the
understanding that larger values may appear as negative. We are opting
for the latter as preserving space is more important and for as long as
all the bits are correct, whether the integer is interpreted as signed
or unsigned is of no consequence.</p>

<h2 id="blocks">Blocks</h2>

<p>Blocks are collections of transactions. It is a many-to-many
relationship as multiple blocks can include to the same transaction. The
<a href="https://github.com/bitcoin/bitcoin/blob/0.15/src/primitives/block.h#L20">CBlockHeader</a>
is defined in Core as follows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="k">class</span> <span class="nc">CBlockHeader</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">    <span class="c1">// header</span>
</span><span class="line">    <span class="n">int32_t</span> <span class="n">nVersion</span><span class="p">;</span>
</span><span class="line">    <span class="n">uint256</span> <span class="n">hashPrevBlock</span><span class="p">;</span>
</span><span class="line">    <span class="n">uint256</span> <span class="n">hashMerkleRoot</span><span class="p">;</span>
</span><span class="line">    <span class="n">uint32_t</span> <span class="n">nTime</span><span class="p">;</span>
</span><span class="line">    <span class="n">uint32_t</span> <span class="n">nBits</span><span class="p">;</span>
</span><span class="line">    <span class="n">uint32_t</span> <span class="n">nNonce</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Our <code>blocks</code> table is defined as follows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line">  <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">blocks</span> <span class="p">(</span>
</span><span class="line">   <span class="n">id</span>           <span class="nb">SERIAL</span>
</span><span class="line">  <span class="p">,</span><span class="n">height</span>       <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">hash</span>         <span class="n">BYTEA</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="k">version</span>      <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">prevhash</span>     <span class="n">BYTEA</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">merkleroot</span>   <span class="n">BYTEA</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">time</span>         <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">bits</span>         <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">nonce</span>        <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">orphan</span>       <span class="nb">BOOLEAN</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">DEFAULT</span> <span class="k">false</span>
</span><span class="line">  <span class="p">,</span><span class="n">status</span>       <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">filen</span>        <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">filepos</span>      <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Columns <code>orphan</code>, <code>status</code>, <code>filen</code> and <code>filepos</code> are from the
<a href="https://github.com/bitcoin/bitcoin/blob/0.15/src/chain.h#L170">CBlockIndex</a>
class which is serialized in LevelDb and not formally part of the blockchain.
It contains information about the file in which the block was stored
on-disk as far as Core is concerned. This information is only
necessary for debugging purposes, also note that it is unique to the
particular instance of the Core database, i.e. if you were to wipe it
and download the chain from scratch, location and even status of
blocks is likely to be different.</p>

<p>Note that the C++ <code>CBlockHeader</code> class does not actually include the
hash, it is computed on-the-fly as needed. Same is true with respect
to transaction id.</p>

<p>We also need a many-to-many link to transactions, which is the
<code>block_txs</code> table. Not only do we need to record that a transaction is
included in a block, but also its exact position relative to other
transactions, denoted by the <code>n</code> column:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line">  <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">block_txs</span> <span class="p">(</span>
</span><span class="line">   <span class="n">block_id</span>      <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">n</span>             <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">tx_id</span>         <span class="nb">BIGINT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="transactions">Transactions</h3>

<p>A transaction is a collection of inputs and outputs. The
<a href="https://github.com/bitcoin/bitcoin/blob/0.15/src/primitives/transaction.h#L264">CTransaction</a>
C++ class is defined as follows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="k">class</span> <span class="nc">CTransaction</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">    <span class="k">const</span> <span class="n">int32_t</span> <span class="n">nVersion</span><span class="p">;</span>
</span><span class="line">    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">CTxIn</span><span class="o">&gt;</span> <span class="n">vin</span><span class="p">;</span>
</span><span class="line">    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">CTxOut</span><span class="o">&gt;</span> <span class="n">vout</span><span class="p">;</span>
</span><span class="line">    <span class="k">const</span> <span class="n">uint32_t</span> <span class="n">nLockTime</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In Postgres transactions are in the <code>txs</code> table:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line">  <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">txs</span> <span class="p">(</span>
</span><span class="line">   <span class="n">id</span>            <span class="n">BIGSERIAL</span>
</span><span class="line">  <span class="p">,</span><span class="n">txid</span>          <span class="n">BYTEA</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="k">version</span>       <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">locktime</span>      <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>txid</code> column is the transaction hash and should not be confused
with <code>tx_id</code> in other tables referencing the transaction. (“txid” is
what the transaction hash is typically called in code and
documentation).</p>

<h2 id="outputs">Outputs</h2>

<p>In Core an output is represented by the
<a href="https://github.com/bitcoin/bitcoin/blob/0.15/src/primitives/transaction.h#L131">CTxOut</a>
class:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="k">class</span> <span class="nc">CTxOut</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">    <span class="n">CAmount</span> <span class="n">nValue</span><span class="p">;</span>
</span><span class="line">    <span class="n">CScript</span> <span class="n">scriptPubKey</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>CAmount</code> type above is a <code>typedef int64_t</code>, it is the value of
the output in <em>satoshis</em> which can be as high as <code>21M * 100M</code> (the
number of satoshis in a bitcoin).</p>

<p>In SQL, an output looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line">  <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">txouts</span> <span class="p">(</span>
</span><span class="line">   <span class="n">tx_id</span>        <span class="nb">BIGINT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">n</span>            <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">value</span>        <span class="nb">BIGINT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">scriptpubkey</span> <span class="n">BYTEA</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">spent</span>        <span class="n">BOOL</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>tx_id</code> column is the transaction to which this output belongs, <code>n</code>
is the position within the output list.</p>

<p>The <code>spent</code> column is an optimization, it is not part of the
blockchain. An output is spent if later in the blockchain there exists
an input referencing it. Core maintains a separate LevelDb dataset
called the <em>UTXO Set</em> (Unspent Transaction Output Set) which contains
all unspent outputs. The reason Core does it this way is because by
default it does not index transactions, i.e. Core actually does not
have a way of quickly retrieving a transaction from the store as there
generally is no need for such retrieval as part of a node operation,
while the UTXO Set is both sufficient and smaller than a full
transaction index. Since in Postgres we have no choice but to index
transactions, there is no benefit in having UTXOs as a separate table,
the <code>spent</code> flag serves this purpose instead.</p>

<p>The UTXO Set does not include any outputs with the value of 0, since
there is nothing to spend there even though no input refers to them
and they are not technically spent.</p>

<h2 id="inputs">Inputs</h2>

<p>An input in Core is represented by the
<a href="https://github.com/bitcoin/bitcoin/blob/0.15/src/primitives/transaction.h#L61">CTxIn</a>
class, which looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="k">class</span> <span class="nc">CTxIn</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">    <span class="n">COutPoint</span> <span class="n">prevout</span><span class="p">;</span>
</span><span class="line">    <span class="n">CScript</span> <span class="n">scriptSig</span><span class="p">;</span>
</span><span class="line">    <span class="n">uint32_t</span> <span class="n">nSequence</span><span class="p">;</span>
</span><span class="line">    <span class="n">CScriptWitness</span> <span class="n">scriptWitness</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>COutPoint</code> class is a combination of a hash and an integer
representing an output. <code>CScriptWitness</code> is an array of “witnesses” or
(roughly speaking) signatures, which are byte arrays, just like the
<code>scriptSig</code>.</p>

<p>In our schema, an input is defined as:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line">  <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">txins</span> <span class="p">(</span>
</span><span class="line">   <span class="n">tx_id</span>         <span class="nb">BIGINT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">n</span>             <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">prevout_hash</span>  <span class="n">BYTEA</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">prevout_n</span>     <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">scriptsig</span>     <span class="n">BYTEA</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">sequence</span>      <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line">  <span class="p">,</span><span class="n">witness</span>       <span class="n">BYTEA</span>
</span><span class="line">  <span class="p">,</span><span class="n">prevout_tx_id</span> <span class="nb">BIGINT</span>
</span><span class="line">  <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As we already mentioned above <code>witness</code> is stored as opaque bytes. The
<code>prevout_tx_id</code> is the database row id of the transaction this input
is spending.</p>

<h2 id="indexes-and-foreign-key-constraints">Indexes and Foreign Key Constraints</h2>

<p>Blocks and transactions are indexed by <code>id</code> as their primary index.
Blocks also need an index on <code>hash</code> (unique), as well as on <code>height</code>
and on <code>prevhash</code> (not unique).  Transactions need a unique index on
the <code>txid</code>.</p>

<p>Inputs and outputs need <code>(tx_id, n)</code> as primary indexes. Inputs are
also indexed on <code>(prevout_tx_id, prevout_n)</code> so that we can quickly
identify the spending input given an output.</p>

<p>Finally, we need a basic set of foreign key constraints that ensure
the integrity between all the related tables.</p>

<h2 id="triggers">Triggers</h2>

<p>The <code>spent</code> column in the output and the <code>prevout_tx_id</code> of an input
are maintained by a trigger on the <code>txins</code> table. Every time an input
is inserted, it locates the database id of the transaction it spends
as well as updates the <code>spent</code> flag of the corresponding output.</p>

<p>Technically it is done using two triggers for performance
reasons. This is because a trigger that modifies the row being
inserted must be a BEFORE trigger, but BEFORE triggers are not allowed
to be to be CONSTRAINT triggers. CONSTRAINT triggers have the
advantage of being <em>deferrable</em>, i.e. they can be postponed until
(database) transaction commit time. Deferring constraints can speed up
inserts considerably, for this reason the code that updates <code>spent</code> is
in a separate AFTER trigger.</p>

<p>The trigger code is still rough around the edges, but here it is for
posterity anyway:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">txins_before_trigger_func</span><span class="p">()</span> <span class="k">RETURNS</span> <span class="k">TRIGGER</span> <span class="k">AS</span> <span class="err">$$</span>
</span><span class="line">  <span class="k">BEGIN</span>
</span><span class="line">    <span class="n">IF</span> <span class="p">(</span><span class="n">TG_OP</span> <span class="o">=</span> <span class="s1">&#39;UPDATE&#39;</span> <span class="k">OR</span> <span class="n">TG_OP</span> <span class="o">=</span> <span class="s1">&#39;INSERT&#39;</span><span class="p">)</span> <span class="k">THEN</span>
</span><span class="line">      <span class="n">IF</span> <span class="k">NEW</span><span class="p">.</span><span class="n">prevout_n</span> <span class="o">&lt;&gt;</span> <span class="o">-</span><span class="mi">1</span> <span class="k">AND</span> <span class="k">NEW</span><span class="p">.</span><span class="n">prevout_tx_id</span> <span class="k">IS</span> <span class="k">NULL</span> <span class="k">THEN</span>
</span><span class="line">        <span class="k">SELECT</span> <span class="n">id</span> <span class="k">INTO</span> <span class="k">NEW</span><span class="p">.</span><span class="n">prevout_tx_id</span> <span class="k">FROM</span> <span class="n">txs</span> <span class="k">WHERE</span> <span class="n">txid</span> <span class="o">=</span> <span class="k">NEW</span><span class="p">.</span><span class="n">prevout_hash</span><span class="p">;</span>
</span><span class="line">        <span class="n">IF</span> <span class="k">NOT</span> <span class="k">FOUND</span> <span class="k">THEN</span>
</span><span class="line">          <span class="n">RAISE</span> <span class="n">EXCEPTION</span> <span class="s1">&#39;Unknown prevout_hash %&#39;</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="n">prevout_hash</span><span class="p">;</span>
</span><span class="line">        <span class="k">END</span> <span class="n">IF</span><span class="p">;</span>
</span><span class="line">      <span class="k">END</span> <span class="n">IF</span><span class="p">;</span>
</span><span class="line">      <span class="k">RETURN</span> <span class="k">NEW</span><span class="p">;</span>
</span><span class="line">    <span class="k">END</span> <span class="n">IF</span><span class="p">;</span>
</span><span class="line">    <span class="k">RETURN</span> <span class="k">NULL</span><span class="p">;</span>
</span><span class="line">  <span class="k">END</span><span class="p">;</span>
</span><span class="line"><span class="err">$$</span> <span class="k">LANGUAGE</span> <span class="n">plpgsql</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">CREATE</span> <span class="k">TRIGGER</span> <span class="n">txins_before_trigger</span>
</span><span class="line"><span class="k">BEFORE</span> <span class="k">INSERT</span> <span class="k">OR</span> <span class="k">UPDATE</span> <span class="k">OR</span> <span class="k">DELETE</span> <span class="k">ON</span> <span class="n">txins</span>
</span><span class="line">  <span class="k">FOR</span> <span class="k">EACH</span> <span class="k">ROW</span> <span class="k">EXECUTE</span> <span class="k">PROCEDURE</span> <span class="n">txins_before_trigger_func</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">txins_after_trigger_func</span><span class="p">()</span> <span class="k">RETURNS</span> <span class="k">TRIGGER</span> <span class="k">AS</span> <span class="err">$$</span>
</span><span class="line">  <span class="k">BEGIN</span>
</span><span class="line">    <span class="n">IF</span> <span class="p">(</span><span class="n">TG_OP</span> <span class="o">=</span> <span class="s1">&#39;DELETE&#39;</span><span class="p">)</span> <span class="k">THEN</span>
</span><span class="line">      <span class="n">IF</span> <span class="k">OLD</span><span class="p">.</span><span class="n">prevout_tx_id</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">THEN</span>
</span><span class="line">        <span class="k">UPDATE</span> <span class="n">txouts</span> <span class="k">SET</span> <span class="n">spent</span> <span class="o">=</span> <span class="k">FALSE</span>
</span><span class="line">         <span class="k">WHERE</span> <span class="n">tx_id</span> <span class="o">=</span> <span class="n">prevout_tx_id</span> <span class="k">AND</span> <span class="n">n</span> <span class="o">=</span> <span class="k">OLD</span><span class="p">.</span><span class="n">prevout_n</span><span class="p">;</span>
</span><span class="line">      <span class="k">END</span> <span class="n">IF</span><span class="p">;</span>
</span><span class="line">      <span class="k">RETURN</span> <span class="k">OLD</span><span class="p">;</span>
</span><span class="line">    <span class="n">ELSIF</span> <span class="p">(</span><span class="n">TG_OP</span> <span class="o">=</span> <span class="s1">&#39;UPDATE&#39;</span> <span class="k">OR</span> <span class="n">TG_OP</span> <span class="o">=</span> <span class="s1">&#39;INSERT&#39;</span><span class="p">)</span> <span class="k">THEN</span>
</span><span class="line">      <span class="n">IF</span> <span class="k">NEW</span><span class="p">.</span><span class="n">prevout_tx_id</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">THEN</span>
</span><span class="line">        <span class="k">UPDATE</span> <span class="n">txouts</span> <span class="k">SET</span> <span class="n">spent</span> <span class="o">=</span> <span class="k">TRUE</span>
</span><span class="line">         <span class="k">WHERE</span> <span class="n">tx_id</span> <span class="o">=</span> <span class="k">NEW</span><span class="p">.</span><span class="n">prevout_tx_id</span> <span class="k">AND</span> <span class="n">n</span> <span class="o">=</span> <span class="k">NEW</span><span class="p">.</span><span class="n">prevout_n</span><span class="p">;</span>
</span><span class="line">        <span class="n">IF</span> <span class="k">NOT</span> <span class="k">FOUND</span> <span class="k">THEN</span>
</span><span class="line">          <span class="n">RAISE</span> <span class="n">EXCEPTION</span> <span class="s1">&#39;Unknown prevout_n % in txid % (id %)&#39;</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="n">prevout_n</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="n">prevout_hash</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="n">prevout_tx_id</span><span class="p">;</span>
</span><span class="line">        <span class="k">END</span> <span class="n">IF</span><span class="p">;</span>
</span><span class="line">      <span class="k">END</span> <span class="n">IF</span><span class="p">;</span>
</span><span class="line">      <span class="k">RETURN</span> <span class="k">NEW</span><span class="p">;</span>
</span><span class="line">    <span class="k">END</span> <span class="n">IF</span><span class="p">;</span>
</span><span class="line">    <span class="k">RETURN</span> <span class="k">NULL</span><span class="p">;</span>
</span><span class="line">  <span class="k">END</span><span class="p">;</span>
</span><span class="line"><span class="err">$$</span> <span class="k">LANGUAGE</span> <span class="n">plpgsql</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">CREATE</span> <span class="k">CONSTRAINT</span> <span class="k">TRIGGER</span> <span class="n">txins_after_trigger</span>
</span><span class="line"><span class="k">AFTER</span> <span class="k">INSERT</span> <span class="k">OR</span> <span class="k">UPDATE</span> <span class="k">OR</span> <span class="k">DELETE</span> <span class="k">ON</span> <span class="n">txins</span> <span class="k">DEFERRABLE</span>
</span><span class="line">  <span class="k">FOR</span> <span class="k">EACH</span> <span class="k">ROW</span> <span class="k">EXECUTE</span> <span class="k">PROCEDURE</span> <span class="n">txins_after_trigger_func</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="identifying-orphaned-blocks">Identifying Orphaned Blocks</h2>

<p>While this is not part of the schema, I thought it would be
of interest to the readers. An orphaned block is a block to
which no other <code>prevhash</code> refers. At the time of a chain split we
start out with two blocks referring to the same block as previous, but
the next block to arrive will identify one of the two as its previous
thereby orphaning the other of the pair.</p>

<p>To identify orphans we need to walk the chain backwards starting from
the highest height. Any block that this walk does not visit is an
orphan.</p>

<p>In SQL this can be done using the <code>WITH RECURSIVE</code> query like so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">UPDATE</span> <span class="n">blocks</span>
</span><span class="line">   <span class="k">SET</span> <span class="n">orphan</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">orphan</span>
</span><span class="line">  <span class="k">FROM</span> <span class="p">(</span>
</span><span class="line">    <span class="k">SELECT</span> <span class="n">blocks</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">x</span><span class="p">.</span><span class="n">id</span> <span class="k">IS</span> <span class="k">NULL</span> <span class="k">AS</span> <span class="n">orphan</span>
</span><span class="line">      <span class="k">FROM</span> <span class="n">blocks</span>
</span><span class="line">      <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="p">(</span>
</span><span class="line">        <span class="k">WITH</span> <span class="k">RECURSIVE</span> <span class="n">recur</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">prevhash</span><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
</span><span class="line">          <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">prevhash</span><span class="p">,</span> <span class="mi">0</span> <span class="k">AS</span> <span class="n">n</span>
</span><span class="line">            <span class="k">FROM</span> <span class="n">blocks</span>
</span><span class="line">                            <span class="c1">-- this should be faster than MAX(height)</span>
</span><span class="line">           <span class="k">WHERE</span> <span class="n">height</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">height</span> <span class="k">FROM</span> <span class="n">blocks</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">height</span> <span class="k">DESC</span> <span class="k">LIMIT</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">          <span class="k">UNION</span> <span class="k">ALL</span>
</span><span class="line">            <span class="k">SELECT</span> <span class="n">blocks</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">blocks</span><span class="p">.</span><span class="n">prevhash</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span> <span class="k">AS</span> <span class="n">n</span>
</span><span class="line">              <span class="k">FROM</span> <span class="n">recur</span>
</span><span class="line">              <span class="k">JOIN</span> <span class="n">blocks</span> <span class="k">ON</span> <span class="n">blocks</span><span class="p">.</span><span class="n">hash</span> <span class="o">=</span> <span class="n">recur</span><span class="p">.</span><span class="n">prevhash</span>
</span><span class="line">            <span class="o">%</span><span class="n">s</span>
</span><span class="line">        <span class="p">)</span>
</span><span class="line">        <span class="k">SELECT</span> <span class="n">recur</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">recur</span><span class="p">.</span><span class="n">prevhash</span><span class="p">,</span> <span class="n">n</span>
</span><span class="line">          <span class="k">FROM</span> <span class="n">recur</span>
</span><span class="line">      <span class="p">)</span> <span class="n">x</span> <span class="k">ON</span> <span class="n">blocks</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">id</span>
</span><span class="line">   <span class="p">)</span> <span class="n">a</span>
</span><span class="line">  <span class="k">WHERE</span> <span class="n">blocks</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">id</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The WITH RECURSIVE part connects rows by joining prevhash to hash,
thereby building a list which starts at the highest hight and going
towards the beginning until no parent can be found.</p>

<p>Then we LEFT JOIN the above to the blocks table, and where there is
no match (x.id IS NULL) we mark it as orphan.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Devising this schema was surprisingly tedious and took many trial and
error attempts to reimport the entire blockchain which collectively
took weeks. Many different variations on how to optimize operations
were attempted, for example using an <em>expression index</em> to only index
a subset of a hash (first 10 bytes are still statistically unique),
etc.</p>

<p>I would love to hear comments from the database experts out there. I’m
not considering this version “final”, there is probably still room for
improvement and new issues might be discovered as I progress to
writing up how to insert new blocks and actually verify blocks and
transactions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blockchain in PostgreSQL Part 2]]></title>
    <link href="http://grisha.org/blog/2017/10/20/blockchain-in-postgresql-part-2/"/>
    <updated>2017-10-20T08:05:00-04:00</updated>
    <id>http://grisha.org/blog/2017/10/20/blockchain-in-postgresql-part-2</id>
    <content type="html"><![CDATA[<p>Update: there is now a <a href="http://grisha.org/blog/2017/12/15/blockchain-and-postgres/">better write up</a>
of the PostgreSQL schema. This post was rather half-baked as much was
still not understood when I wrote it.</p>

<p>In a <a href="http://grisha.org/blog/2017/10/10/postgre-as-a-full-node/">previous post</a> I
described a simplistic schema to store the Bitcoin blockchain in
PostgreSQL. In this post I’m investigating pushing the envelope
with a bit of C programming.</p>

<h3 id="the-missing-functionality">The Missing Functionality</h3>

<p>Postgres cannot do certain things required to fully handle
transactions. The missing functionality is (at least):</p>

<ol>
  <li>
    <p>Support for <a href="https://en.bitcoin.it/wiki/Protocol_documentation#Variable_length_integer">Variable Length Integer</a>
used in the blockchain and more generally the binary encoding of a transaction or its components.</p>
  </li>
  <li>
    <p><a href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm">Elliptic Curve Signature</a>. Even
though postgres integrates with OpenSSL, which has that functionality, there is no way to call
the EC functions.</p>
  </li>
  <li>
    <p>Ability to parse and evaluate Bitcoin <a href="https://en.bitcoin.it/wiki/Script">script</a>. This is a biggie,
as transaction verification requires it, and it is one of the more complex and bug-prone
aspects of Bitcoin.</p>
  </li>
</ol>

<p>It is also important that all of the above be performant. Even though
varints, script and even elliptic curve could be implemented in plain
<a href="https://www.postgresql.org/docs/current/static/plpgsql.html">PL/pgSQL</a>,
it probably wouldn’t be fast enough for practical use. Which leaves us with the only possible option:
a <a href="https://www.postgresql.org/docs/current/static/xfunc-c.html">C extension</a>.</p>

<h3 id="avoid-reinventing-the-wheel">Avoid Reinventing the Wheel</h3>

<p>Anything is possible in C, but can we avoid having to reimplement it
from scratch? Are there libraries that could be leveraged?</p>

<p>As it is now, the Bitcoin protocol is primarily specified by its
source code, and the source of all truth is the <a href="https://github.com/bitcoin/bitcoin">Bitcoin Core</a>.
It is <a href="https://www.postgresql.org/docs/current/static/xfunc-c.html#extend-cpp">possible</a> to use C++ in PG
extensions, which means at least in theory the Bitcoin Core code could be leveraged somehow.</p>

<p>My initial conclusion is that this would be a daunting task. Bitcoin
Core code requires at least C++11, as well as Boost. It also seems
that the core code assumes its own specific storage and caching mechanism and
isn’t easily abstracted away from it. Not to mention that using C++
libs from Postgres has complexities of its own.</p>

<p>I looked around for a plain C implementation of Bitcoin and found a few
rather incomplete ones. The most functional one seems to be Jeff Garzik’s
<a href="https://github.com/jgarzik/picocoin">picocoin</a>. With the looming
<a href="https://bitcointechtalk.com/how-segwit2x-replay-protection-works-1a5e41767103">Segwit2x fork</a>
and all the controversy surrounding it this may seem like an odd
choice of a library, but for the purpose of what we are doing, I think
it’s fine. It also seems like Picocoin isn’t actively developed,
which is not great. I would very much appreciate opinions/advice on this, if
you know of a better C lib, do leave a comment.</p>

<h3 id="the-c-extension">The C extension</h3>

<p>Thanks to this excellent <a href="http://big-elephants.com/2015-10/writing-postgres-extensions-part-i/">series of posts</a>
and Postgres’ superb documentation, I was able to put together a proof-of-concept extension,
available at <a href="https://github.com/blkchain/pg_blkchain">https://github.com/blkchain/pg_blkchain</a>.
While the C internals of it would be subject for a whole separate post (or
few), suffice it to say that it is fairly rudimentary and all the
heavy lifting is delegated to the picocoin lib.</p>

<p>As of now, the extension provides a handful of functions:</p>

<ul>
  <li>
    <p><code>get_vin(tx bytea)</code> This is a <a href="https://www.postgresql.org/docs/current/static/functions-srf.html">Set Returning Function</a> (SRF),
which returns the transaction inputs as rows.</p>
  </li>
  <li>
    <p><code>get_vout(tx bytea)</code> Similarly to get_vin(), an SRF that returns outputs.</p>
  </li>
  <li>
    <p><code>parse_script(script bytea)</code> An SRF which parses a Bitcoin script and returns (more or less) human-readable rows.</p>
  </li>
  <li>
    <p><code>verify_sig(tx bytea, previous_tx bytea, n int)</code> Verifies a specific input of a transaction (denoted by <code>n</code>),
given a the previous transaction to which the input refers. Returns a boolean.</p>
  </li>
</ul>

<p>This is hardly enough to support all of what would be required by a
full node, but this is sufficient to do some interesting stuff.</p>

<p>Note that the function names and signatures are not final, this is a
work in progress and I expect this all to evolve and change. For
example, initially I implemented get_vout() which returned an array,
but in the end an SRF seemed like a more flexible approach.</p>

<h3 id="the-schema">The Schema</h3>

<p>In the last post I used separate tables for the transaction, inputs
and outputs. With the ability to serialize/deserialize transactions at
our disposal, there are more interesting options.</p>

<p>The most compact way to store transactions is to just use the
serialized binary form in a binary (bytea) column. We can get at any
particulars of it by using our functions.</p>

<p>The examples below are based on a single table created as</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">rtxs</span> <span class="p">(</span>
</span><span class="line">   <span class="n">id</span>            <span class="nb">BIGINT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class="line">   <span class="n">tx</span>            <span class="n">BYTEA</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class="line"><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I imported the first 100K blocks or so into this table, how it was
done I might describe in a separate post.</p>

<p>I’ll introduce the extension with my favorite example: the decoding of the
signature of the genesis block <a href="https://blockchain.info/tx/4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b">input</a>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">SELECT</span> <span class="p">(</span><span class="n">sig</span><span class="p">).</span><span class="n">op_sym</span><span class="p">,</span> <span class="n">encode</span><span class="p">((</span><span class="n">sig</span><span class="p">).</span><span class="k">data</span><span class="p">,</span> <span class="s1">&#39;escape&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">FROM</span> <span class="p">(</span>
</span><span class="line">    <span class="k">SELECT</span> <span class="n">parse_script</span><span class="p">((</span><span class="n">get_vin</span><span class="p">(</span><span class="n">tx</span><span class="p">)).</span><span class="n">scriptSig</span><span class="p">)</span> <span class="k">AS</span> <span class="n">sig</span> <span class="k">FROM</span> <span class="n">rtxs</span>
</span><span class="line">    <span class="k">WHERE</span> <span class="n">digest</span><span class="p">(</span><span class="n">digest</span><span class="p">(</span><span class="n">tx</span><span class="p">,</span> <span class="s1">&#39;sha256&#39;</span><span class="p">),</span> <span class="s1">&#39;sha256&#39;</span><span class="p">)</span> <span class="o">=</span> <span class="n">E</span><span class="s1">&#39;\\x3ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a&#39;</span>
</span><span class="line">  <span class="p">)</span> <span class="n">x</span><span class="p">;</span>
</span><span class="line">   <span class="n">op_sym</span>    <span class="o">|</span>                                <span class="n">encode</span>
</span><span class="line"><span class="c1">-------------+-----------------------------------------------------------------------</span>
</span><span class="line"> <span class="n">OP_PUSHDATA</span> <span class="o">|</span> <span class="err">\</span><span class="mi">377</span><span class="err">\</span><span class="mi">377</span><span class="err">\</span><span class="mi">000</span><span class="err">\</span><span class="n">x1D</span>
</span><span class="line"> <span class="n">OP_PUSHDATA</span> <span class="o">|</span> <span class="err">\</span><span class="n">x04</span>
</span><span class="line"> <span class="n">OP_PUSHDATA</span> <span class="o">|</span> <span class="n">The</span> <span class="n">Times</span> <span class="mi">03</span><span class="o">/</span><span class="n">Jan</span><span class="o">/</span><span class="mi">2009</span> <span class="n">Chancellor</span> <span class="k">on</span> <span class="n">brink</span> <span class="k">of</span> <span class="k">second</span> <span class="n">bailout</span> <span class="k">for</span> <span class="n">banks</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="expression-indexes">Expression Indexes</h3>

<p>One neat feature of PostgreSQL is ability to
<a href="https://www.postgresql.org/docs/current/static/indexes-expressional.html">index expressions</a>.
For example, we know that we can compute a transaction hash with</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">select</span> <span class="n">digest</span><span class="p">(</span><span class="n">digest</span><span class="p">(</span><span class="n">tx</span><span class="p">,</span> <span class="s1">&#39;sha256&#39;</span><span class="p">),</span> <span class="s1">&#39;sha256&#39;</span><span class="p">)</span> <span class="k">from</span> <span class="n">rtxs</span> <span class="k">limit</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">                               <span class="n">digest</span>
</span><span class="line"><span class="c1">--------------------------------------------------------------------</span>
</span><span class="line"> <span class="err">\</span><span class="n">x6e29b04a029e308344995fab2b75e953e1efa914d306ad47c14a3cebc84564fd</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note that this is <a href="https://en.wikipedia.org/wiki/Endianness">little-endian</a>,
while conventionally transaction id’s are represented with bytes
reversed (big-endian): <a href="https://blockchain.info/tx/fd6445c8eb3c4ac147ad06d314a9efe153e9752bab5f994483309e024ab0296e">fd6445c8eb3c4ac147ad06d314a9efe153e9752bab5f994483309e024ab0296e</a></p>

<p>Now if we want to be able to look up transactions quickly by the
transaction hash, as is the convention, we can create an expression
index like so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="k">ON</span> <span class="n">rtxs</span><span class="p">(</span><span class="n">digest</span><span class="p">(</span><span class="n">digest</span><span class="p">(</span><span class="n">tx</span><span class="p">,</span> <span class="s1">&#39;sha256&#39;</span><span class="p">),</span> <span class="s1">&#39;sha256&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When we do this, PostgreSQL scans the entire table, computes the hash
and stores it in the index. An index, after all, is just another table
(of sorts), and there is nothing wrong with indexes containing values
that do not exist in the table to which the index refers.</p>

<p>Once we do this, any time the expression <code>digest(digest(tx, 'sha256'), 'sha256')</code>
is used in reference to the <code>rtxs</code> table, PostgreSQL will not execute
the <code>digest()</code> function, but would instead use the value stored in
the index.</p>

<p>We can attest to this with</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">explain</span> <span class="k">analyze</span> <span class="k">SELECT</span> <span class="n">id</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">rtxs</span>
</span><span class="line"><span class="k">WHERE</span> <span class="n">digest</span><span class="p">(</span><span class="n">digest</span><span class="p">(</span><span class="n">tx</span><span class="p">,</span> <span class="s1">&#39;sha256&#39;</span><span class="p">),</span> <span class="s1">&#39;sha256&#39;</span><span class="p">)</span> <span class="o">=</span> <span class="n">E</span><span class="s1">&#39;\\x6e29b04a029e308344995fab2b75e953e1efa914d306ad47c14a3cebc84564fd&#39;</span><span class="p">;</span>
</span><span class="line">                                                                    <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class="line"><span class="c1">--------------------------------------------------------------------------------------------------------------------------------------------------</span>
</span><span class="line"> <span class="k">Index</span> <span class="n">Scan</span> <span class="k">using</span> <span class="n">rtxs_digest_idx</span> <span class="k">on</span> <span class="n">rtxs</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">42</span><span class="p">..</span><span class="mi">8</span><span class="p">.</span><span class="mi">44</span> <span class="k">rows</span><span class="o">=</span><span class="mi">1</span> <span class="n">width</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">020</span><span class="p">..</span><span class="mi">0</span><span class="p">.</span><span class="mi">020</span> <span class="k">rows</span><span class="o">=</span><span class="mi">1</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">   <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">digest</span><span class="p">(</span><span class="n">digest</span><span class="p">(</span><span class="n">tx</span><span class="p">,</span> <span class="s1">&#39;sha256&#39;</span><span class="p">::</span><span class="nb">text</span><span class="p">),</span> <span class="s1">&#39;sha256&#39;</span><span class="p">::</span><span class="nb">text</span><span class="p">)</span> <span class="o">=</span> <span class="s1">&#39;\x6e29b04a029e308344995fab2b75e953e1efa914d306ad47c14a3cebc84564fd&#39;</span><span class="p">::</span><span class="n">bytea</span><span class="p">)</span>
</span><span class="line"> <span class="n">Planning</span> <span class="n">time</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span><span class="mi">077</span> <span class="n">ms</span>
</span><span class="line"> <span class="n">Execution</span> <span class="n">time</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span><span class="mi">037</span> <span class="n">ms</span>
</span><span class="line"><span class="p">(</span><span class="mi">4</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is pretty clever - even though we do not have an actual
“transaction hash” column in our table, we do have the value and an
index in the database.</p>

<h3 id="views">Views</h3>

<p>But what if we wanted to have a better readable representation of
transactions, for example something that includes the transaction
hash?</p>

<p>The best way to do this is via a view:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">CREATE</span> <span class="k">VIEW</span> <span class="n">tx_view</span> <span class="k">AS</span>
</span><span class="line">  <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">digest</span><span class="p">(</span><span class="n">digest</span><span class="p">(</span><span class="n">tx</span><span class="p">,</span> <span class="s1">&#39;sha256&#39;</span><span class="p">),</span> <span class="s1">&#39;sha256&#39;</span><span class="p">)</span> <span class="k">AS</span> <span class="n">txid</span><span class="p">,</span> <span class="n">tx</span>
</span><span class="line">    <span class="k">FROM</span> <span class="n">rtxs</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Postgres is clever enough to use the above index for the view:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">explain</span> <span class="k">analyze</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">tx_view</span>
</span><span class="line"> <span class="k">WHERE</span> <span class="n">txid</span> <span class="o">=</span> <span class="n">E</span><span class="s1">&#39;\\x6e29b04a029e308344995fab2b75e953e1efa914d306ad47c14a3cebc84564fd&#39;</span><span class="p">;</span>
</span><span class="line"><span class="c1">--------------------------------------------------------------------------------------------------------------------------------------------------</span>
</span><span class="line"> <span class="k">Index</span> <span class="n">Scan</span> <span class="k">using</span> <span class="n">rtxs_digest_idx</span> <span class="k">on</span> <span class="n">rtxs</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">42</span><span class="p">..</span><span class="mi">8</span><span class="p">.</span><span class="mi">45</span> <span class="k">rows</span><span class="o">=</span><span class="mi">1</span> <span class="n">width</span><span class="o">=</span><span class="mi">318</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">045</span><span class="p">..</span><span class="mi">0</span><span class="p">.</span><span class="mi">046</span> <span class="k">rows</span><span class="o">=</span><span class="mi">1</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">   <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">digest</span><span class="p">(</span><span class="n">digest</span><span class="p">(</span><span class="n">tx</span><span class="p">,</span> <span class="s1">&#39;sha256&#39;</span><span class="p">::</span><span class="nb">text</span><span class="p">),</span> <span class="s1">&#39;sha256&#39;</span><span class="p">::</span><span class="nb">text</span><span class="p">)</span> <span class="o">=</span> <span class="s1">&#39;\x6e29b04a029e308344995fab2b75e953e1efa914d306ad47c14a3cebc84564fd&#39;</span><span class="p">::</span><span class="n">bytea</span><span class="p">)</span>
</span><span class="line"> <span class="n">Planning</span> <span class="n">time</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span><span class="mi">104</span> <span class="n">ms</span>
</span><span class="line"> <span class="n">Execution</span> <span class="n">time</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span><span class="mi">067</span> <span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A similar technique can applied to inputs and outputs, for example for
outputs we could create a view like so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">CREATE</span> <span class="k">VIEW</span> <span class="n">rtxouts</span> <span class="k">AS</span>
</span><span class="line"> <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="p">(</span><span class="n">vout</span><span class="p">).</span><span class="n">n</span><span class="p">,</span> <span class="p">(</span><span class="n">vout</span><span class="p">).</span><span class="n">value</span><span class="p">,</span> <span class="p">(</span><span class="n">vout</span><span class="p">).</span><span class="n">scriptpubkey</span>
</span><span class="line">  <span class="k">FROM</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">get_vout</span><span class="p">(</span><span class="n">tx</span><span class="p">)</span> <span class="n">vout</span> <span class="k">FROM</span> <span class="n">rtxs</span><span class="p">)</span> <span class="n">x</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The outputs are now easily accessibly as:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="o">#</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">rtxouts</span> <span class="k">limit</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line"> <span class="n">id</span> <span class="o">|</span> <span class="n">n</span> <span class="o">|</span>   <span class="n">value</span>    <span class="o">|</span>                                                               <span class="n">scriptpubkey</span>
</span><span class="line"><span class="c1">----+---+------------+------------------------------------------------------------------------------------------------------------------------------------------</span>
</span><span class="line">  <span class="mi">1</span> <span class="o">|</span> <span class="mi">0</span> <span class="o">|</span> <span class="mi">5000000000</span> <span class="o">|</span> <span class="err">\</span><span class="n">x4104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac</span>
</span><span class="line">  <span class="mi">2</span> <span class="o">|</span> <span class="mi">0</span> <span class="o">|</span> <span class="mi">5000000000</span> <span class="o">|</span> <span class="err">\</span><span class="n">x410496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858eeac</span>
</span><span class="line">  <span class="mi">3</span> <span class="o">|</span> <span class="mi">0</span> <span class="o">|</span> <span class="mi">5000000000</span> <span class="o">|</span> <span class="err">\</span><span class="n">x41047211a824f55b505228e4c3d5194c1fcfaa15a456abdf37f9b9d97a4040afc073dee6c89064984f03385237d92167c13e236446b417ab79a0fcae412ae3316b77ac</span>
</span><span class="line"><span class="p">(</span><span class="mi">3</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Want to know the most popular opcode used in scripts?</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="c1">--Note: this is obviously not the full blockchain</span>
</span><span class="line">
</span><span class="line"><span class="k">SELECT</span> <span class="p">(</span><span class="n">parse_script</span><span class="p">(</span><span class="n">scriptpubkey</span><span class="p">)).</span><span class="n">op_sym</span><span class="p">,</span> <span class="k">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">  <span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">scriptpubkey</span> <span class="k">FROM</span> <span class="n">rtxouts</span><span class="p">)</span> <span class="n">x</span>
</span><span class="line"><span class="k">GROUP</span> <span class="k">BY</span> <span class="n">op_sym</span>
</span><span class="line"><span class="k">ORDER</span> <span class="k">BY</span> <span class="k">count</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">  <span class="n">op_sym</span>     <span class="o">|</span>  <span class="k">count</span>
</span><span class="line"><span class="c1">----------------+---------</span>
</span><span class="line"> <span class="n">OP_NOP</span>         <span class="o">|</span>       <span class="mi">5</span>
</span><span class="line"> <span class="n">OP_DUP</span>         <span class="o">|</span> <span class="mi">1007586</span>
</span><span class="line"> <span class="n">OP_EQUALVERIFY</span> <span class="o">|</span> <span class="mi">1007586</span>
</span><span class="line"> <span class="n">OP_HASH160</span>     <span class="o">|</span> <span class="mi">1007586</span>
</span><span class="line"> <span class="n">OP_PUSHDATA</span>    <span class="o">|</span> <span class="mi">1139431</span>
</span><span class="line"> <span class="n">OP_CHECKSIG</span>    <span class="o">|</span> <span class="mi">1151434</span>
</span><span class="line"><span class="p">(</span><span class="mi">6</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Anyway, that’s it for now. Please comment your questions/comments
below, or via twitter, I am very curious on what people think on this
approach!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bitcoin Transaction Hash in Pure PostgreSQL]]></title>
    <link href="http://grisha.org/blog/2017/10/10/postgre-as-a-full-node/"/>
    <updated>2017-10-10T17:54:00-04:00</updated>
    <id>http://grisha.org/blog/2017/10/10/postgre-as-a-full-node</id>
    <content type="html"><![CDATA[<p>Update: hacked together
<a href="https://github.com/blkchain/pg_blkchain">this</a>, more details to
follow later…</p>

<p>In theory, Postgres should be able to verify transactions and blocks,
as well as do a lot of other things that are currently only done by
full nodes. For this to be performant, it will most likely require an
extension written in C, but I’m curious how far we can get with bare
bones Postgres.</p>

<p>More importantly, would that actually be useful? A node is really
just a database, a very efficient one for a very specific purpose, but
would leveraging the full power of Postgres be somehow more beneficial
than just running Bitcoin-Qt or btcd, for example?</p>

<p>To get to the bottom of this would be a lot of work, and potentially a
lot of fun. It would also be a great blockchain learning exercise. (If
you’re working on a PG extension for Bitcoin or more generally
blockchain, please do let me know!)</p>

<h3 id="random-thoughts">Random Thoughts</h3>

<p>The structure of the Bitcoin blockchain is relatively simple.  We have
<em>transactions</em>, which in turn have <em>inputs</em> and <em>outputs</em> and belong
to <em>blocks</em>. Four tables, that’s it.</p>

<p>I’ve been able to import the whole blockchain with some fairly basic
Go code into my old Thinkpad running Linux overnight. The Go code
needs some more polishing and is probably worthy of a separate write
up, so I won’t get into it for now. Below is the schema I used. I
intentionally left out referential integrity and indexes to keep it
simple and avoid premature optimization.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class=""><span class="line">CREATE TABLE blocks (                     -- CBlockIndex (chain.h)
</span><span class="line">   id           BIGINT NOT NULL
</span><span class="line">  ,prev         BIGINT NOT NULL              -- .prev-&gt;nHeight  // genesis will have -1
</span><span class="line">  ,height       BIGINT NOT NULL              -- .nHeight
</span><span class="line">  ,hash         BYTEA NOT NULL            -- &lt;computed&gt;
</span><span class="line">  ,version      BIGINT NOT NULL              -- .nVersion
</span><span class="line">  ,prevhash     BYTEA NOT NULL            -- .pprev-&gt;GetBlockHash()
</span><span class="line">  ,merkleroot   BYTEA NOT NULL            -- .hashMerkleRoot
</span><span class="line">  ,time         BIGINT NOT NULL           -- .nTime
</span><span class="line">  ,bits         BIGINT NOT NULL           -- .nBits
</span><span class="line">  ,nonce        BIGINT NOT NULL           -- .nNonce
</span><span class="line">);
</span><span class="line">
</span><span class="line">CREATE TABLE txs (
</span><span class="line">   id            BIGINT NOT NULL
</span><span class="line">  ,txid          BYTEA NOT NULL
</span><span class="line">  ,version       BIGINT NOT NULL
</span><span class="line">  ,locktime      BIGINT NOT NULL
</span><span class="line">);
</span><span class="line">
</span><span class="line">CREATE TABLE txins (
</span><span class="line">   id            BIGINT NOT NULL
</span><span class="line">  ,tx_id         BIGINT NOT NULL
</span><span class="line">  ,n             BIGINT NOT NULL
</span><span class="line">  ,prevout_hash  BYTEA NOT NULL
</span><span class="line">  ,prevout_n     BIGINT NOT NULL
</span><span class="line">  ,scriptsig     BYTEA NOT NULL
</span><span class="line">  ,sequence      BIGINT NOT NULL
</span><span class="line">);
</span><span class="line">
</span><span class="line">CREATE TABLE txouts (
</span><span class="line">   id           BIGINT NOT NULL
</span><span class="line">  ,tx_id        BIGINT NOT NULL
</span><span class="line">  ,n            BIGINT NOT NULL
</span><span class="line">  ,value        BIGINT NOT NULL
</span><span class="line">  ,scriptpubkey BYTEA NOT NULL
</span><span class="line">);
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There are a couple projects out there that keep the blockchain in a
database, most notably
<a href="https://github.com/bitcoin-abe/bitcoin-abe">Abe</a>. I haven’t studied
the code very carefully, but my initial impression was that Abe tries
to use standard SQL that would work across most big databases, which
is philosophically different from my objective of going 100% Postgres
and leveraging all that it can do for us.</p>

<p>Bitcoin uses a lot of uint32’s. A Postgres INT is the correct size,
but it is signed, which means we have to use the next larger type,
BIGINT. It seems like it might be a waste to use 64 bits for a 32-bit
value, but I couldn’t think of anything better than a BIGINT. For the
binary stuff it seems like BYTEA is the best match.</p>

<p>So what can we do with this? There is no easy way to create or verify an
<a href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm">Elliptic Curve signature</a>
in Postgres, but with the help of the <a href="https://www.postgresql.org/docs/current/static/pgcrypto.html">pgcrypto</a>
extension, we should be able to at least generate the correct SHA256
digest which is used in the signature. As a side note, EC signature math is actually
remarkably simple and could probably be implemented
as a PG function, but I’m too lazy. Here it is in a
<a href="https://github.com/wobine/blackboard101/blob/master/EllipticCurvesPart5-TheMagic-SigningAndVerifying.py">few lines of Python</a>.</p>

<p>The rules on how Bitcoin generates the hash (which is then signed) are
slightly <a href="https://en.bitcoin.it/w/images/en/7/70/Bitcoin_OpCheckSig_InDetail.png">complicated</a>, and that’s an
<a href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-November/006878.html">understatement</a>.</p>

<p>For the purposes of this exercise, I’d just be happy with a value that
matches, even if the code does not fully comply with the Bitcoin rules.</p>

<p>One problem I ran into was that, because Bitcoin blockchain is
little-endian except for where it isn’t, you often need a way to
reverse bytes in a BYTEA. Strangely, Postgres does not provide a way
to do that, unless I’m missing something. But thanks to
<a href="https://stackoverflow.com/questions/11142235/convert-bigint-to-bytea-but-swap-the-byte-order">stackoverflow</a>,
here is one way to do this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">reverse</span><span class="p">(</span><span class="n">bytea</span><span class="p">)</span> <span class="k">RETURNS</span> <span class="n">bytea</span> <span class="k">AS</span> <span class="err">$</span><span class="n">reverse</span><span class="err">$</span>
</span><span class="line">    <span class="k">SELECT</span> <span class="n">string_agg</span><span class="p">(</span><span class="n">byte</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">::</span><span class="n">bytea</span><span class="p">)</span>
</span><span class="line">       <span class="k">FROM</span> <span class="p">(</span>
</span><span class="line">          <span class="k">SELECT</span> <span class="n">substr</span><span class="p">(</span><span class="err">$</span><span class="mi">1</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="n">byte</span>
</span><span class="line">             <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="k">length</span><span class="p">(</span><span class="err">$</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">i</span><span class="p">)</span> <span class="n">s</span>
</span><span class="line"><span class="err">$</span><span class="n">reverse</span><span class="err">$</span> <span class="k">LANGUAGE</span> <span class="k">sql</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We also have no way to render a Bitcoin
<a href="https://en.bitcoin.it/wiki/Protocol_documentation#Variable_length_integer">varint</a>, but we can fake it
with some substringing for the time being.</p>

<p>Equipped with this, we can construct the following statement, sorry
it’s a little long and I do not have the patience to explain it in
writing.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">select</span> <span class="n">digest</span><span class="p">(</span><span class="n">digest</span><span class="p">(</span><span class="n">tx_ser</span> <span class="o">||</span> <span class="n">hashtype</span><span class="p">,</span> <span class="s1">&#39;sha256&#39;</span><span class="p">),</span> <span class="s1">&#39;sha256&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">shasha</span> <span class="k">from</span> <span class="p">(</span>
</span><span class="line"> <span class="k">select</span> <span class="k">substring</span><span class="p">(</span><span class="n">reverse</span><span class="p">(</span><span class="n">int8send</span><span class="p">(</span><span class="k">version</span><span class="p">))</span> <span class="k">from</span> <span class="mi">1</span> <span class="k">for</span> <span class="mi">4</span><span class="p">)</span> <span class="o">||</span>
</span><span class="line">       <span class="n">vin</span> <span class="o">||</span>
</span><span class="line">       <span class="n">vout</span> <span class="o">||</span>
</span><span class="line">       <span class="k">substring</span><span class="p">(</span><span class="n">reverse</span><span class="p">(</span><span class="n">int8send</span><span class="p">(</span><span class="n">locktime</span><span class="p">))</span> <span class="k">from</span> <span class="mi">1</span> <span class="k">for</span> <span class="mi">4</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tx_ser</span><span class="p">,</span>
</span><span class="line">       <span class="k">substring</span><span class="p">(</span><span class="n">reverse</span><span class="p">(</span><span class="n">int8send</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="k">from</span> <span class="mi">1</span> <span class="k">for</span> <span class="mi">4</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hashtype</span>
</span><span class="line">  <span class="k">from</span> <span class="n">txs</span> <span class="n">t</span>
</span><span class="line">  <span class="k">join</span> <span class="n">txins</span> <span class="n">tt</span> <span class="k">ON</span> <span class="n">tt</span><span class="p">.</span><span class="n">tx_id</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">id</span>
</span><span class="line">  <span class="k">join</span> <span class="k">lateral</span> <span class="p">(</span>
</span><span class="line">    <span class="k">select</span> <span class="n">tx_id</span><span class="p">,</span> <span class="k">substring</span><span class="p">(</span><span class="n">reverse</span><span class="p">(</span><span class="n">int8send</span><span class="p">(</span><span class="k">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span> <span class="k">from</span> <span class="mi">1</span> <span class="k">for</span> <span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="n">string_agg</span><span class="p">(</span><span class="n">txin_ser</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">vin</span>
</span><span class="line">    <span class="k">from</span> <span class="p">(</span>
</span><span class="line">      <span class="k">select</span>
</span><span class="line">         <span class="n">ti</span><span class="p">.</span><span class="n">tx_id</span><span class="p">,</span>
</span><span class="line">         <span class="n">reverse</span><span class="p">(</span><span class="n">prevout_hash</span><span class="p">)</span> <span class="o">||</span>
</span><span class="line">         <span class="k">substring</span><span class="p">(</span><span class="n">reverse</span><span class="p">(</span><span class="n">int8send</span><span class="p">(</span><span class="n">prevout_n</span><span class="p">))</span> <span class="k">from</span> <span class="mi">1</span> <span class="k">for</span> <span class="mi">4</span><span class="p">)</span> <span class="o">||</span>
</span><span class="line">         <span class="k">substring</span><span class="p">(</span><span class="n">reverse</span><span class="p">(</span><span class="n">int8send</span><span class="p">(</span><span class="k">length</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">ti</span><span class="p">.</span><span class="n">n</span> <span class="o">=</span> <span class="n">tt</span><span class="p">.</span><span class="n">n</span> <span class="k">THEN</span> <span class="n">ptxout</span><span class="p">.</span><span class="n">scriptpubkey</span> <span class="k">ELSE</span> <span class="s1">&#39;&#39;</span> <span class="k">END</span><span class="p">)))</span> <span class="k">from</span> <span class="mi">1</span> <span class="k">for</span> <span class="mi">1</span><span class="p">)</span> <span class="o">||</span>
</span><span class="line">         <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">ti</span><span class="p">.</span><span class="n">n</span> <span class="o">=</span> <span class="n">tt</span><span class="p">.</span><span class="n">n</span> <span class="k">THEN</span> <span class="n">ptxout</span><span class="p">.</span><span class="n">scriptpubkey</span> <span class="k">ELSE</span> <span class="s1">&#39;&#39;</span> <span class="k">END</span> <span class="o">||</span>
</span><span class="line">         <span class="k">substring</span><span class="p">(</span><span class="n">reverse</span><span class="p">(</span><span class="n">int8send</span><span class="p">(</span><span class="n">sequence</span><span class="p">))</span> <span class="k">from</span> <span class="mi">1</span> <span class="k">for</span> <span class="mi">4</span><span class="p">)</span> <span class="k">as</span> <span class="n">txin_ser</span>
</span><span class="line">      <span class="k">from</span> <span class="n">txins</span> <span class="n">ti</span>
</span><span class="line">      <span class="k">join</span> <span class="n">txs</span> <span class="n">ptx</span> <span class="k">on</span> <span class="n">ti</span><span class="p">.</span><span class="n">prevout_hash</span> <span class="o">=</span> <span class="n">ptx</span><span class="p">.</span><span class="n">txid</span>
</span><span class="line">      <span class="k">join</span> <span class="n">txouts</span> <span class="n">ptxout</span> <span class="k">on</span> <span class="n">ptxout</span><span class="p">.</span><span class="n">tx_id</span> <span class="o">=</span> <span class="n">ptx</span><span class="p">.</span><span class="n">id</span> <span class="k">and</span> <span class="n">ti</span><span class="p">.</span><span class="n">prevout_n</span> <span class="o">=</span> <span class="n">ptxout</span><span class="p">.</span><span class="n">n</span>
</span><span class="line">      <span class="k">order</span> <span class="k">by</span> <span class="n">ti</span><span class="p">.</span><span class="n">n</span>
</span><span class="line">     <span class="p">)</span> <span class="n">x</span>
</span><span class="line">   <span class="k">group</span> <span class="k">by</span> <span class="n">tx_id</span>
</span><span class="line">   <span class="p">)</span> <span class="n">vin</span> <span class="k">on</span> <span class="n">vin</span><span class="p">.</span><span class="n">tx_id</span> <span class="o">=</span> <span class="n">tt</span><span class="p">.</span><span class="n">tx_id</span>
</span><span class="line">   <span class="k">join</span> <span class="p">(</span>
</span><span class="line">      <span class="k">select</span> <span class="n">tx_id</span><span class="p">,</span> <span class="k">substring</span><span class="p">(</span><span class="n">reverse</span><span class="p">(</span><span class="n">int8send</span><span class="p">(</span><span class="k">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span> <span class="k">from</span> <span class="mi">1</span> <span class="k">for</span> <span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="n">string_agg</span><span class="p">(</span><span class="n">txout_ser</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">vout</span>
</span><span class="line">      <span class="k">from</span> <span class="p">(</span>
</span><span class="line">        <span class="k">select</span>
</span><span class="line">          <span class="n">tx_id</span><span class="p">,</span>
</span><span class="line">          <span class="n">reverse</span><span class="p">(</span><span class="n">int8send</span><span class="p">(</span><span class="n">value</span><span class="p">))</span> <span class="o">||</span>
</span><span class="line">          <span class="k">substring</span><span class="p">(</span><span class="n">reverse</span><span class="p">(</span><span class="n">int8send</span><span class="p">(</span><span class="k">length</span><span class="p">(</span><span class="n">scriptpubkey</span><span class="p">)))</span> <span class="k">from</span> <span class="mi">1</span> <span class="k">for</span> <span class="mi">1</span><span class="p">)</span> <span class="o">||</span>
</span><span class="line">          <span class="n">scriptpubkey</span> <span class="k">as</span> <span class="n">txout_ser</span>
</span><span class="line">        <span class="k">from</span> <span class="n">txouts</span>
</span><span class="line">        <span class="k">order</span> <span class="k">by</span> <span class="n">n</span>
</span><span class="line">        <span class="p">)</span> <span class="n">x</span>
</span><span class="line">      <span class="k">group</span> <span class="k">by</span> <span class="n">tx_id</span>
</span><span class="line">    <span class="p">)</span> <span class="k">out</span> <span class="k">ON</span> <span class="k">out</span><span class="p">.</span><span class="n">tx_id</span> <span class="o">=</span> <span class="n">tt</span><span class="p">.</span><span class="n">tx_id</span>
</span><span class="line"> <span class="k">where</span> <span class="n">tt</span><span class="p">.</span><span class="n">tx_id</span> <span class="o">=</span> <span class="mi">37898</span>
</span><span class="line"><span class="p">)</span> <span class="n">x</span><span class="p">;</span>
</span><span class="line"><span class="o">-</span><span class="p">[</span> <span class="n">RECORD</span> <span class="mi">1</span> <span class="p">]</span><span class="c1">--------------------------------------------------------------</span>
</span><span class="line"><span class="n">shasha</span> <span class="o">|</span> <span class="err">\</span><span class="n">x23c3bf5091f3cdaf5996b0091c5f5bb6d82f3cdc2ce077018bb854f40274e512</span>
</span><span class="line"><span class="o">-</span><span class="p">[</span> <span class="n">RECORD</span> <span class="mi">2</span> <span class="p">]</span><span class="c1">--------------------------------------------------------------</span>
</span><span class="line"><span class="n">shasha</span> <span class="o">|</span> <span class="err">\</span><span class="n">xbcd4d519931da3ab98ca9745a0ceba79f05306cad4fa6ee9863819d1783a2e00</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The particular transaction we are looking at is
<a href="https://blockchain.info/tx/2847ae66175042438532c2eccc5b39935fd1216453e62e2c3cb9c8e5020cc771">this</a>.
It happens to have id of 37898 in my database. In case you’re
wondering, for this example I used a subset of the blockchain which
only has the first 182,000 blocks. On the full blockchain and without
indexes, this statement would have taken an eternity to execute.</p>

<p>What makes this particular transaction interesting is that it has two
inputs, which is slightly trickier, because to spend them, there need to
be two different signatures of the same transaction. This is because
before signing, the input scriptSig needs to be replaced with the
output’s scriptPubKey (the oversimplified version). This is reflected in the SQL
in the use of <code>LATERAL</code> and <code>CASE</code>.</p>

<p>You do not have to take my word that the two hashes are correct, we
can verify them fairly easily with a bit of help from the Python ecdsa
library. Here is the code to verify the second hash. The key and the
signature are in the
<a href="https://blockchain.info/tx/2847ae66175042438532c2eccc5b39935fd1216453e62e2c3cb9c8e5020cc771">transaction itself</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">ecdsa</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">codecs</span>
</span><span class="line"><span class="n">key</span> <span class="o">=</span> <span class="n">codecs</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span>
</span><span class="line">    <span class="s">&quot;04de99a4267263f495e07721f96241359b48b9f522973b9d333ed8e296357c595130535ca387601955f1406e335cf658bb6a12d62c177e9511498fefcafead1c0e&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;hex&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">der</span> <span class="o">=</span> <span class="s">&#39;0V0</span><span class="se">\x10\x06\x07</span><span class="s">*</span><span class="se">\x86</span><span class="s">H</span><span class="se">\xce</span><span class="s">=</span><span class="se">\x02\x01\x06\x05</span><span class="s">+</span><span class="se">\x81\x04\x00\n\x03</span><span class="s">B</span><span class="se">\x00</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">key</span>
</span><span class="line"><span class="n">digest</span> <span class="o">=</span> <span class="n">codecs</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&quot;bcd4d519931da3ab98ca9745a0ceba79f05306cad4fa6ee9863819d1783a2e00&quot;</span><span class="p">,</span> <span class="s">&quot;hex&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">signature</span> <span class="o">=</span> <span class="n">codecs</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span>
</span><span class="line">    <span class="s">&quot;30460221008e95fd3536cfd437c49e4c1dfaeeb2ece0e521420c89f1487ca6eff94053485c022100ef3a8cdc9b0a6d6d403bf7758c6b617380db6936de2bbcd3b556ec5f45c03b54&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;hex&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">vk</span> <span class="o">=</span> <span class="n">ecdsa</span><span class="o">.</span><span class="n">VerifyingKey</span><span class="o">.</span><span class="n">from_der</span><span class="p">(</span><span class="n">der</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="n">vk</span><span class="o">.</span><span class="n">verify_digest</span><span class="p">(</span><span class="n">signature</span><span class="p">,</span> <span class="n">digest</span><span class="p">,</span> <span class="n">sigdecode</span><span class="o">=</span><span class="n">ecdsa</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">sigdecode_der</span><span class="p">)</span>
</span><span class="line"><span class="c"># True</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I hope this was fun! Now I wonder how hard it would be to make an
extension to provide all the functionality required by Bitcoin….</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Electricity cost of 1 Bitcoin (Sep 2017)]]></title>
    <link href="http://grisha.org/blog/2017/09/28/electricity-cost-of-1-bitcoin/"/>
    <updated>2017-09-28T16:38:00-04:00</updated>
    <id>http://grisha.org/blog/2017/09/28/electricity-cost-of-1-bitcoin</id>
    <content type="html"><![CDATA[<p>How much does it cost in electricity to mine a Bitcoin?</p>

<p>As of Sep 28, 2017, according to blockchain.info the hashrate is:
9,214,860,125 GH/s.</p>

<p>These days it seems that the best miner available for sale is the
AntMiner S9. It is actually over a year old, and there are faster and
more energy efficient ASICs now, e.g. BitFury, but it is very hard to
get any information on those, so we will just use the S9 information.</p>

<p>The S9 is capable of 12,930 GH/s. The collective Bitcoin hash rate is
equivalent to 712,672 S9 miners running in parallel.</p>

<p>An S9 uses 1375W, which means that in 1 hour it consumes 1.375 kW/h.</p>

<p>In USA, a kWh costs $0.12 on average. (It can be
as low as 0.04, according to this <a href="https://www.eia.gov/electricity/monthly/epm_table_grapher.php?t=epmt_5_6_a">EIA chart</a>.)</p>

<p>At 12c per kWh a running S9 costs $0.165 per hour.</p>

<p>712,672 running S9’s would cost $117,591.02 per hour.</p>

<p>Bitcoin blocks are solved at 6 per hour on average. Thus, each block
costs $19,598.50 to solve.</p>

<p>The current mining reward is 12.5 BTC, which gives us the answer:</p>

<p>At \$0.12 kW/h a Bitcoin costs \$1,567.88 to mine.</p>

<p>At \$0.04 kW/h a Bitcoin costs \$522.62 to mine.</p>

<p>This, of course, does not include hardware and other costs.</p>

<p>It’s quite likely that the largest mining operations pay even less
than $0.04 for electricity and the hardware they use is many times
more efficient.</p>

<p>While grosly inaccurate, this shows that mining is quite profitable,
and that Bitcoin price would have to fall a lot for mining to stop
being profitable.</p>

<h3 id="looking-at-the-trend">Looking at the Trend</h3>

<p>Current difficulty is 1103400932964, The difficulty before that was
922724699725.</p>

<p>Difficulty adjusts every 2,016 blocks, which is about two weeks.</p>

<p>The Difficulty number is a coefficient of the “difficulty 1 target”,
i.e. where the hash has to begin with 4 zero bytes (32 zero bits). It
means is that it is N times harder than “1 target”.</p>

<p>We can see that at the last adjustment it went up by 180,676,233,239,
or 16%, which is quite a bit in just two weeks. The last adjustment
before that was from 888171856257, or 4%.</p>

<p>Assuming that the only miner in the world was the S9, the difficulty
adjustment can only be explained by more S9’s coming online. The
number of S9’s online is directly proportional to the hashrate, which
is directly proportional to the difficulty. Thus there is a direct
relationship between energy cost and the difficulty.</p>

<p>When the difficulty was 922724699725 (Sep 6 through 16), the hash rate
was at about 8,000,000 TH/s, or equivalent of 618,716 S9’s. At that
difficulty and the 12c kW/h price, a BTC cost $1,361 to mine.</p>

<p>Now let’s look back at the world before the S9, which uses the Bitmain
BM1387 16nm ASIC. Before the S9, there was S7, based on BitMain BM1385
28nm ASIC. The S7 power consumption is roughly same as S9, or let’s
assume it is for simplicity, but it is only capable of 4,000 GH/s.</p>

<p>Back at the end of 2015 when S7 was announced, the hashrate was at
around 700,000,000 GH/s, or equivalent to 175,000 S7’s. That cost
\$28,875 per hour, or \$4,812.5 per block. The block reward was 25
Bitcoins then, so a Bitcoin would cost only \$192 to mine. (With a 12.5
reward it would have been \$385).</p>

<p>This is all very confusing, but we can see that faster hardware and
more of it drives the cost of mining up and the rlationship between
the difficulty and the cost of mining a Bitcoin is linear. Faster
hardware enables higher hash rate at improved energy efficiency, and
the difficulty adjusts to keep the rate of blocks and supply of new
BTC at 10 minutes.</p>

<p>The cost factor behind Bitcoin is energy, and spending more energy on
mining makes a Bitcoin more expensive and less profitable. However, a
more energy-expensive Bitcoin is a more sound/secure Bitcoin from the
cryptographic perspective, which means it is likely to go up in USD
price, and thus should still be profitable for the miners. This is a
very interesting factor here, because if the BTC/USD price wasn’t
going up, the miners would be bitter enemies and would do everything
possible to prevent more miners from coming online. The rise of the
BTC/USD price is what justifies as positive more miners coming
online. So far we have not seen any news reports of mining facilities
being sabotaged, which probably means miners are not enemies.</p>

<p>I will need to think on this some more as there are a lot of moving
parts. But if I can make a cursory conclusion here, it is that
(industrial) mining is and will remain very profitable for some time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bitcoin: USD Value]]></title>
    <link href="http://grisha.org/blog/2017/09/25/bitcoin-value-2/"/>
    <updated>2017-09-25T08:50:00-04:00</updated>
    <id>http://grisha.org/blog/2017/09/25/bitcoin-value-2</id>
    <content type="html"><![CDATA[<p>In <a href="http://grisha.org/blog/2017/09/22/bitcoin-value/">part 1</a> I explained
how money has always been a global ledger and Bitcoin is just a
different implementation of one. The million dollar question remains,
what should Bitcoin be worth in a currency we’re more familiar with,
such as USD?</p>

<h3 id="asset-pricing">Asset Pricing</h3>

<p>To illustrate the dilemma we’re faced with, lets look at three types
of assets and how we price them.</p>

<p><em>Stocks:</em> price is determined by the present and future profits, which
is relatively straight forward.</p>

<p><em>Commodities</em> (e.g oil): price is a function of supply (oil being
produced) and demand (oil burned in engines or whatever).</p>

<p><em>Store of value:</em> this is anything that is bought because it keeps its
value. Most commonly it is precious metals like gold, but it can also
be fiat currency or valuable works of art. This category is most
fitting for Bitcoin. Pricing of a store of value is strangely
arbitrary, I attempt to explain it below.</p>

<h3 id="speculative-demand">Speculative Demand</h3>

<p>There are two kinds of demand. <em>Actual</em> demand is based in our
everyday needs. For example we rely on combustible engines which
consume oil. Engines burn oil (or its byproducts) converting it to
exhaust gases, at which point it is no more. The more we drive, the
more oil we burn, the higher the demand.</p>

<p>The second kind of demand is <em>speculative</em>. It is based on the
expectation of a future price change. Speculators buy assets they
expect to go up in price and sell those they don’t. When everyone
wants to buy oil because they think the price is going up, its price
does indeed goes up. But that is not directly related to the actual
supply of oil from the ground (it often is, but not always).</p>

<h3 id="right-price">Right Price</h3>

<p>In <a href="http://grisha.org/blog/2017/09/22/bitcoin-value/">part 1</a> we covered how
a sale is actually a loan, and how the seller ends up with tokens
representing the value owed to the seller. The number of tokes (aka
price) is a reflection of how we value things relative to each other.</p>

<p>When we buy stuff for everyday use we establish a price range that is
driven by, for lack of a better term, <em>common sense</em>. For example we
may think that a loaf of bread is worth a dozen eggs. If the price of
something exceeds common sense, we will forego buying it. This means
that the price has a direct effect on demand especially when it comes
to everyday consumption items such as food or fuel.</p>

<p>Speculators have no respect for common sense and the right price. They
are only concerned with the trend. It is possible for the speculative
demand to drive the price way above the common sense level, we saw
that when “peak oil” was a thing. But the price will eventually
gravitate towards the common sense price.</p>

<h3 id="store-of-value-price">Store of Value Price</h3>

<p>In contrast, price for a store of value is purely speculative, which
means the sensibility of the price does not apply.</p>

<p>Let’s take gold, for example. Intuitively we might reason that there
is a (non-speculative) supply and demand for gold, but it’s actually
illusory.  The annual production of gold is minute compared to the
total gold above ground, which means there is essentially no
supply. There is also next to no demand, because gold cannot be
consumed. There is never less or more gold available in the world, its
quantity is fairly constant. Yet the price fluctuates. The only
explanation for this is speculation.</p>

<p>There is simply no such thing as the “right price” for store of
value. If I want to move a million dollars into gold, the price of
gold is of no consequence to me, be it a thousand or a million dollars
per ounce. So long as I know that it is stable, it is a good store of
value.</p>

<p>The good news here is that no price is too high (or too low) for
Bitcoin. 4K only seems high because a year ago it was 400. We tend to
judge the price based on history, and there is good sense in that,
indeed what goes up in value too much too fast often subsequently
<em>corrects</em>.</p>

<h3 id="importance-of-market-cap">Importance of Market Cap</h3>

<p><em>Market capitalization</em> is the price of all of the asset available in
the world. It’s easy to compute the market cap for a stock because we
know the number of shares outstanding. There is no such thing as a
market cap for a commodity because it is continuously produced and
consumed. When it comes to something like gold, we can estimate the
market cap because we know approximately how much physical gold is
above ground. Bitcoin, like gold, has an approximate market cap
(approximate because it is not possible to know how much BTC has been
lost).</p>

<p>Market cap size is critical for adoption of a store of value. It needs
to be large enough to “fit” even very large amounts of fiat, ideally
without affecting the market. Gold market cap is estimated at 7
trillion USD, which means that even the richest people can move all
their assets into gold and not move the market. (At least one at a
time. All of them at once will move the market big time).</p>

<p>Bitcoin market cap of about 70B USD is not large enough for even one
of the richest people on the planet. This implies that if the market
cap does not grow, Bitcoin is likely to fail as store of value.</p>

<h3 id="hash-rate">Hash Rate</h3>

<p>What sets Bitcoin apart from all other crypto currencies is its
extremely high hash rate. This means that a Bitcoin is orders of
magnitude more “precious” than any other crypto coin presently in
existence.</p>

<p>There is a definite correlation between the Bitcoin hash rate and the
price. Some people argue that hash rate follows price, not the other
way around, and it’s probably true.</p>

<p>Bitcoin’s high hash rate is what makes it the best store of value
among crypto coins today.</p>

<h3 id="adoption">Adoption</h3>

<p>Ultimately, I believe adoption is the most important factor in Bitcoin
USD price. Greater adoption will increase the number of speculators
willing to own Bitcoin, it will drive the price up, and hopefully
bring it to a level comparable to that of gold.</p>

<p>The key to adoption is not ease of payment or volume of transactions
like we used to think until very recently. The key to adoption is
understanding of the mathematics behind Bitcoin. With all the hype
surrounding it, only remarkably few understand how sound Bitcoin
actually is. In many ways it is more sound than any other store of
value known, including gold.</p>

<p>Regardless of whether Bitcoin becomes de facto digital gold or not, we
are witnessing a historic transformation possibly bigger than the
Internet itself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bitcoin: Better Ink than Gold?]]></title>
    <link href="http://grisha.org/blog/2017/09/22/bitcoin-value/"/>
    <updated>2017-09-22T07:52:00-04:00</updated>
    <id>http://grisha.org/blog/2017/09/22/bitcoin-value</id>
    <content type="html"><![CDATA[<p>The fundamental question about Bitcoin is not whether it is sound from
the cryptography standpoint. The question is: what is it?</p>

<h3 id="money-is-debt-ink">Money is Debt Ink</h3>

<p>To define Bitcoin we need to look back at the history of <em>money</em>.  The
earliest money was in the form of things that were scarce and
impossible to falsify, something like specific kinds of sea shells.
Everyone knew that stuff could be traded for these tokens.</p>

<p>Once such monetary tokens were invented, we no longer needed to decide
what to barter right there and then, we could postpone the
decision. One could <em>sell</em> milk for tokens, then use those tokens to
<em>buy</em> a spear later, this way the milk didn’t spoil while waiting for
the spear to be made.</p>

<p>What is not very obvious is that the tokens represented <em>debt</em>.  A
sale is really a <em>loan</em> in disguise. Before the sale, the seller had
milk. After the sale, the seller had tokens, which are proof that
value of tokens is owed to the seller. In other words, the tokens
received for the milk sold were a <em>record of debt</em>. Tokens are the
<em>ink</em> in which this record is written.</p>

<p>It is noteworthy that there is no money if there is no debt, or that
money implies debt. It’s a simple principle that so few understand.</p>

<h3 id="world-wide-debt-ledger">World-Wide Debt Ledger</h3>

<p>The best way of thinking about money is that it is the <em>medium</em> in
which we maintain a world-wide record of debt. The entries in this
book or ledger are written as physical tokens. Only the people in
possession of the tokens actually know how much they have and there is
no history, only the final state. The history exists only in the
minds (or records) of the traders. It is very private.</p>

<h3 id="gold-ink">Gold Ink</h3>

<p>Later people started using rare metals such as gold or silver as
money.  Metals were better than sea shells because they were
divisible. We could now make arbitrary size tokes we called (coined?)
<em>coins</em>.</p>

<p>Although we intuitively think that gold has a lot of value, in reality
it has very little. Gold does not feed us or keep us warm. It does
have some unique properties, but back when we started using gold as
money we couldn’t possibly appreciate those, other than perhaps gold
being pretty and extremely durable.</p>

<p>Gold is also rare. But rarity does not imply value. The sea shells
were worthless before they were used as money, and they are worthless
now, yet they too are rare.</p>

<h3 id="banks-paper--and-records-of-records-of-records">Banks, Paper  and Records of Records (of Records)</h3>

<p>But it turned out that keeping valuable tokens was difficult, they
could be lost or stolen, and worse, people were willing to kill for
them. And so we decided to keep them all safe in one place.  This
was the original <em>bank</em>.</p>

<p>The bank issued <em>paper notes</em> that corresponded to the gold in the
vault. Now these paper notes could be traded for anything. This was
because people knew that even though the paper is worthless, it
represents gold that is in the bank. At any time one could go to the
bank, give the bank the paper note and receive gold (at which point
the bank would destroy the paper note because the debt is settled).</p>

<p>A paper note is a <em>record of the record</em> of debt. The true record was
in gold, paper was a copy. It’s a bit of a mind-twister, but humans
have become really good at rewriting the original debt ledger in other
mediums.</p>

<p>Ironically the concept of the bank as a safe vault never really
worked: people were willing to steal and kill for paper money just the
same. These days bank vaults keep paper notes as if its gold. And the
bank’s computer keeps a <em>record of the record of the record</em> of debt.</p>

<h3 id="real-estate-ink">Real Estate Ink</h3>

<p>At some point bankers realized that they can manipulate the monetary
supply because only the bankers actually knew how much gold they
had. It was done “for the good of the public” who could get easier
loans, but it was also an easy way for the banks to make money out of
nothing.</p>

<p>Eventually it was decreed that not just gold, but anyhting could be
similarly held by the bank so that vastly more paper notes could be
issued. Most notably real estate, the arrangement of issuing paper
notes for a house being known as a mortgage. And since a house cannot be
placed into the vault, it too had to be recorded, creating yet another
layer of abstraction. It all ended with collateralized debt
obligations, credit default swaps and ultimately the 2008 subprime
mortgage crisis. Next year Bitcoin was born…</p>

<h3 id="monetary-system-is-just-a-ledger">Monetary System is Just a Ledger</h3>

<p>The bottom line remains: we kept a legder. The recording medium was
precious metals, then evolved to paper and metals, and finally when we
went off the gold standard it became just paper reflecting value of
arbitrary things held under lien as collateral.</p>

<h3 id="enter-blockchain">Enter Blockchain</h3>

<p>The Bitcoin <em>blockchian</em> is also a medium for this legder, only
instead of relying on scarcity of precious metals, the scarcity is in
the mathematical complexity of a problem.</p>

<p>And this is where our minds begin to play tricks on us, because this
is a concept previously unknown to humans. A Bitcoin, which takes an
enormous amount of computational power to generate, is actually,
really scarce. Yes, it is not physical, it is just “knowlegde” or
“information”, but by all laws of nature it is scarce, in fact more
scarce than gold, the total amount of which in the universe isn’t
fully known.</p>

<h3 id="but-bitcoin-is-just-an-agreement">But Bitcoin is just an Agreement?</h3>

<p>Interestingly, Bitcoin is merely an agreement and one might argue that
some day we can collectively decide to increase the 21 million limit
thereby diluting Bitcoin value. But can we actually do that, or will it
not be Bitcoin at that point? I think only time will
tell.</p>

<p>We do already have a lot of things that we agree on and we don’t
really question how it happened. The aforementioned shells were
collectively agreed upon. We agree on what the current date is, does
it matter how it happened? In fact, much of what the world is, just
<em>is</em>, including the fiat money (where “fiat” literally means “let it
be done”). And so now Bitcoin just is.</p>

<p>The sea shells ceased to exist as money in favor or precious metals,
and it is likely that same will at some point happen with Bitcoin.</p>

<p>History does show that when it comes to money, people show their worst
traits. This is why countries with solid currencies have big armies
and police, and very strict laws regarding manipulation of money. This
is how “fiat” actually works.</p>

<p>Amazingly, the mathematic principles on which Bitcoin is based do not
need to be defended. No army in the world could ever change a single
prime number.</p>

<h3 id="alternative-realities">Alternative Realities</h3>

<p>The name Bitcoin refers to a specific blockchain. There can be many
like it. The name could have been different, the parameters of the
algorithm could have been different, just like the dollar bills could
have been blue. There are other cryptographic currencies, and they are
different, they too now exist. (Caveat: some of them are
mathematically bogus).</p>

<p>One could argue that gold exists in nature, while Bitcoin was created
by man, and thus gold is somehow more real. But Bitcoin rests on the
mathematical principles that too are just part of this universe, they
were not created by man, they were discovered and applied, and again
in this sense Bitcoin isn’t much different than gold.</p>

<h3 id="the-mystery-of-value">The Mystery of Value</h3>

<p>The mystery to me is how we collectively set a value of things like
gold or Bitcoins. Now that we’ve demonstrated that as money, they are
equivalent. Why is an ounce of gold worth $1300? Who decided that? The
market? Is the real value of it in how good of an ink it is in the
world-wide debt ledger?</p>

<p>To be continued…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tgres Status - July 4th 2017]]></title>
    <link href="http://grisha.org/blog/2017/07/04/tgres-status-july-2017/"/>
    <updated>2017-07-04T08:28:00-04:00</updated>
    <id>http://grisha.org/blog/2017/07/04/tgres-status-july-2017</id>
    <content type="html"><![CDATA[<p>It’s been a while since I’ve written on
<a href="https://github.com/tgres/tgres">Tgres</a>,
here’s a little update, Independence Day edition.</p>

<h3 id="current-status">Current Status</h3>

<p>The current status is that Tgres is looking more and more like a
finished product. It still needs time and especially user testing (the
ball is in your court, dear reader), because only time reveals the
weirdest of bugs and validates stability. I would not ditch your
current stack just yet, but at this point you’d be remiss not
having given Tgres a spin.</p>

<p>Recently I had an opportunity to test Tgres as a mirror replica of a
sizable Graphite/Statsd/Grafana set up receiving approximately 10K
data points per second across more than 200K series, and the results
were inspiring. Tgres handled the incoming data without breaking a
sweat on “hardware” (ec2 instances, rather) that was a fraction of the
Graphite machines while still outperforming it in most respects.</p>

<p>I’d say the biggest problem (and not really a Tgres one) is that
mirroring Graphite functionality <em>exactly</em> is next to impossible. Or,
rather, it is possible, but it would imply purposely introducing
inaccuracies and complexities. Because of this Tgres can never be a
“drop in” replacement for Graphite. Tgres can provide results that are
close but not identical, and dashboards and how the data is interpreted
would require some rethinking.</p>

<h2 id="whats-new">What’s new?</h2>

<h3 id="data-point-versioning">Data Point Versioning</h3>

<p>In a round-robin database slot values are overwritten as time moves
forward and the archive comes full-circle. Whenever a value is not
overwritten for whatever reason, a stale value from an obsolete
iteration erroneously becomes the value for the current iteration.</p>

<p>One solution is to be diligent and always make sure that values are
overwritten. This solution can be excessively I/O intensive for sparse
series. If a series is sparse, then more I/O resources are spent
blanking out non-data (by setting the value to NaN or whatever) than
storing actual data points.</p>

<p>A much more efficient approach is to store a version number along with
the datapoint. Every time the archive comes full-circle, version is
incremented. With versions there is no need to nullify slots, they
become obsoleted by virtue of the data point version not matching the
current version.</p>

<p>Under the hood Tgres does this by keeping a separate array in the <code>ts</code>
table which contains a smallint (2 bytes) for every data point. The <code>tv</code>
view is aware of it and considers versions without exposing any
details, in other words everything works as before, only Tgres is a
lot more efficient and executes a lot less SQL statements.</p>

<h3 id="zero-heartbeat-series">Zero Heartbeat Series</h3>

<p>Tgres always strives to connect the data points. If two data points
arrive more than a step apart, the slots in between are
<a href="https://github.com/tgres/tgres/blob/d5a622a33511c1a8c43538c8de915fac52b02291/rrd/ds.go#L220-L229">filled in</a>
to provide continuity. A special parameter called
<a href="https://github.com/tgres/tgres/blob/d5a622a33511c1a8c43538c8de915fac52b02291/rrd/ds.go#L81-L105">Heartbeat</a>
controls the maximum time between data points. A gap greater than the Heartbeat is
considered unknown or NaN.</p>

<p>This was a deliberate design decision from the beginning, and it is not changing.
Some tools choose to store data points as is,
deferring any normalization to the query time. Graphite is kind of in
the middle: it doesn’t store the data points as is, yet it does not
attempt to do any normalization either, which ultimately leads to
inaccuracies which I describe in another
<a href="http://grisha.org/blog/2015/05/04/recording-time-series/">post</a>.</p>

<p>The concept of Heartbeat should be familiar to those experienced with
RRDTool, but it is unknown to Graphite users which has no such
parameter. This “disconnected” behavior is often taken advantage of to
track things that aren’t continuous but are event occurrences which can
still benefit from being observed as a time series. Tracking
application deploys, where each deploy is a data value of 1 is one
such example.</p>

<p>Tgres now supports this behavior when the the Heartbeat is set to
0. Incoming data points are simply stored in the best matching slot
and no attempt is made to fill in the gap in between with data.</p>

<h3 id="tgres-listens-to-delete-events">Tgres Listens to DELETE Events</h3>

<p>This means that to delete a DS all you need to do is run <code>DELETE FROM
ds WHERE ...</code> and you’re done. All the corresponding table rows will
be deleted by Postgres because of the foreign key constraints, and the
DS will be cleared from the Tgres cache at the same time.</p>

<p>This is possible thanks to the Postgres excellent
<a href="https://www.postgresql.org/docs/current/static/sql-notify.html">LISTEN/NOTIFY</a>
capability.</p>

<h3 id="in-memory-series-for-faster-querying">In-Memory Series for Faster Querying</h3>

<p>A subset of series can be kept entirely in memory. The recent testing
has shown that people take query performance very seriously, and
dashboards with refresh rates of 5s or even 1s are not unheard
of. When you have to go to the database to answer every query, and if
the dashboard touches a hundred series, this does not work too well.</p>

<p>To address this, Tgres now keeps an in-memory cache of queried
series. The cache is an <a href="https://godoc.org/github.com/hashicorp/golang-lru">LRU</a>
and its size is configurable. On restart Tgres saves cache keys and loads the series
back to keep the cache “warm”.</p>

<p>Requests for some cached queries can now be served in literally
<a href="https://en.wikipedia.org/wiki/Microsecond">microseconds</a>, which
makes for some pretty amazing user experience.</p>

<h3 id="ds-and-rra-state-is-an-array">DS and RRA State is an Array</h3>

<p>One problem with the Tgres table layout was that DS and RRA tables
contained frequently updated columns such as lastupdate, value and
duration The initial strategy was that these could be updated
periodically in a lzay fashion, but it became apparent that it was not
practical for any substantial number of series.</p>

<p>To address this all frequently mutable attributes are now stored in
arrays, same way as data points and therefore can be updated 200 (or
whatever segment width is configured) at a time.</p>

<p>To simplify querying DSs and RRAs two new views (<code>dsv</code> and <code>rrav</code>)
were created which abstract away the array value lookup.</p>

<h3 id="whisper-data-migration">Whisper Data Migration</h3>

<p>The <a href="https://github.com/tgres/tgres/tree/master/cmd/whisper_import">whisper_import</a>
tool has been pretty much rewritten and has better instructions. It’s been
tested extensively, though admittedly on one particular set up, your mileage may vary.</p>

<h3 id="graphite-dsl">Graphite DSL</h3>

<p>Lots and lots of fixes and additions to the Graphite DSL
implementation. Tgres still does not support <em>all</em> of the functions,
but that was never the plan to begin with.</p>

<h2 id="future">Future</h2>

<p>Here’s some ideas I might tackle in the near future. If you are
interested in contributing, do not be shy, pull requests, issues and
any questions or comments are welcome. (Probably best to keep
development discussion in <a href="https://github.com/tgres/tgres/issues">Github</a>).</p>

<ul>
  <li>
    <h4 id="get-rid-of-the-config-file">Get rid of the config file</h4>
  </li>
</ul>

<p>Tgres doesn’t really need a config file - the few options that are
required for running should be command line args, the rest, such as
new series specs should be in the database.</p>

<ul>
  <li>
    <h4 id="a-user-interface">A user interface</h4>
  </li>
</ul>

<p>Not terribly high on the priority list, since the main UI is <code>psql</code>
for low level stuff and Grafana for visualization, but something to
list series and tweak config options might come in handy.</p>

<ul>
  <li>
    <h4 id="track-usage">Track Usage</h4>
  </li>
</ul>

<p>It would be interesting to know how many bytes exactly a series
occupies, how often it is updated and queried, and what is the
resource cost for maintaining it.</p>

<ul>
  <li>
    <h4 id="better-code-organization">Better code organization</h4>
  </li>
</ul>

<p>For example vcache could be a separate package.</p>

<ul>
  <li>
    <h4 id="rethink-the-dsl">Rethink the DSL</h4>
  </li>
</ul>

<p>There should be a DSL version 2, which is not based on the Graphite
unwieldiness. It should be very simple and versatile and not have
hundreds of functions.</p>

<ul>
  <li>
    <h4 id="authentication-and-encryption">Authentication and encryption</h4>
  </li>
</ul>

<p>No concrete ideas here, but it would be nice to have a plan.</p>

<ul>
  <li>
    <h4 id="clustering-needs-to-be-re-considered">Clustering needs to be re-considered</h4>
  </li>
</ul>

<p>The current clustering strategy is flawed. It might work with the
current plan, but some serious brainstorming needs to happen
here. Perhaps it should just be removed in favor of delegating
horizontal scaling to the database layer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Go Web App in 2017]]></title>
    <link href="http://grisha.org/blog/2017/04/27/simplistic-go-web-app/"/>
    <updated>2017-04-27T15:00:00-04:00</updated>
    <id>http://grisha.org/blog/2017/04/27/simplistic-go-web-app</id>
    <content type="html"><![CDATA[<p>Update: <a href="http://grisha.org/blog/2017/04/27/simplistic-go-web-app-part-2/">part 2</a> is
here, enjoy. And <a href="http://grisha.org/blog/2017/04/27/go-web-app-part-3/">part 3</a>. And
<a href="http://grisha.org/blog/2017/04/27/go-web-app-part-4/">part 4</a>.</p>

<p>A few weeks ago I started building yet another web-based app, in
<a href="https://golang.org/">Go</a>. Being mostly a back-end developer, I don’t
have to write web apps very often, and every time I do, it seems like a great challenge.
I often wish someone would write a guide to web development for people
who do not have all day to get into the intricacies of great design
and just need to build a functional site that works without too much
fuss.</p>

<p>I’ve decided to use this opportunity to start from scratch and build
it to the best of my understanding of how an app ought to be built in
2017. I’ve spent many hours getting to the bottom of all things I’ve
typically avoided in the past, just so that for once in many years I
can claim to have a personal take on the matter and have a reusable
recipe that at least works for me, and hopefully not just me.</p>

<p>This post is the beginning of what I expect to be a short series
highlighting what I’ve learned in the process. The first post is a
general introduction describing the present problematic state of
affairs and why I think Go is a good choice. The subsequent posts have
more details and code. I am curious whether my experience resonates
with others, and what I may have gotten wrong, so don’t hesitate to
comment!</p>

<p>Edit: If you’d rather just see code, it’s <a href="https://github.com/grisha/gowebapp">here</a>.</p>

<h3 id="introduction">Introduction</h3>

<p>In the past my basic knowledge of HTML, CSS and JavaScript has been
sufficient for my modest site building needs. Most of the apps I’ve
ever built were done using <a href="https://github.com/grisha/mod_python">mod_python</a>
directly using the publisher handler. Ironically for an early Python adopter,
I’ve also done a fair bit of work with <a href="http://rubyonrails.org/">Rails</a>. For the past several years
I focused on (big) data infrastructure, which isn’t web development at all,
though having to build web-based UI’s is not uncommon. In fact the app I’m referring to
here is a data app, but it’s not open source and what it does really
doesn’t matter for this discussion. Anyway, this should provide some
perspective of where I come from when approaching this problem.</p>

<h3 id="python-and-ruby">Python and Ruby</h3>

<p>As recently as a year ago, Python and Ruby would be what I would
recommend for a web app environment. There may be other similar
languages, but from where I stand, the world is dominated by Python and
Ruby.</p>

<p>For the longest time the main job of a web application was constructing
web pages by piecing HTML together server-side. Both Python and Ruby
are very well suited for the template-driven work of taking data from
a database and turning it into a bunch of HTML. There are lots of
frameworks/tools to choose from, e.g. Rails, Django, Sinatra, Flask,
etc, etc.</p>

<p>And even though these languages have certain significant limitations,
such as the <a href="https://en.wikipedia.org/wiki/Global_interpreter_lock">GIL</a>,
the ease with which they address the complexity of
generating HTML is far more valuable than any trade-offs that came
with them.</p>

<h3 id="the-gil">The GIL</h3>

<p>The Global Interpreter Lock is worthy of a separate mention. It is the
elephant in the room, by far the biggest limitation of any Python or
Ruby solution. It is so crippling, people can get emotional talking
about it, there are endless GIL discussions in both Ruby and Python
communities.</p>

<p>For those not familiar with the problem - the GIL only lets one thing
happen at a time. When you create threads and it “looks” like parallel
execution, the interpreter is still executing instructions
sequentially. This means that a single process can only take advantage
of a single CPU.</p>

<p>There do exist alternative implementations, for example JVM-based, but
they are not the norm. I’m not exactly clear why, they may not be
fully interchangeable, they probably do not support C extensions
correctly, and they might still have a GIL, not sure, but as far as I
can tell, the C implementation is what everyone uses out
there. Re-implementing the interpreter without the GIL would amount to
a complete rewrite, and more importantly it may affect the behavior of
the language (at least that’s my naive understanding), and so for this
reason I think the GIL is here to stay.</p>

<p>Web apps of any significant scale absolutely require the ability to
serve requests in parallel, taking advantage of every CPU a machine
has. Thus far the only possible solution known is to run multiple
instances of the app as separate processes.</p>

<p>This is typically done with help of additional software such as
Unicorn/Gunicorn with every process listening on its own port and
running behind some kind of a connection balancer such as Nginx and/or
Haproxy. Alternatively it can be accomplished via Apache and its
modules (such as mod_python or mod_wsgi), either way it’s
complicated. Such apps typically rely on the database server as the
arbiter for any concurrency-sensitive tasks. To implement caching
without keeping many copies of the same thing on the same server a
separate memory-based store is required, e.g. Memcached or Redis,
usually both. These apps also cannot do any background processing, for
that there is a set of tools such as Resque. And then all these
components need to be monitored to make sure it’s working. Logs need
to be consolidated and there are additional tools for that. Given the
inevitable complexity of this set up there is also a requirement for a
configuration manager such as Chef or Puppet. And still, these set ups
are generally not capable of maintaining a large number of long term
connections, a problem known as C10K.</p>

<p>Bottom line is that a simple database-backed web app requires a whole
bunch of moving parts before it can serve a “Hello World!” page. And
nearly all of it because of the GIL.</p>

<h3 id="emergence-of-single-page-applications">Emergence of Single Page Applications</h3>

<p>More and more, server-side HTML generation is becoming a thing of the
past. The latest (and correct) trend is for UI construction and
rendering to happen completely client-side, driven by JavaScript. Apps
whose user interface is fully JS-driven are sometimes called
<a href="https://en.wikipedia.org/wiki/Single-page_application">Single Page Applications</a>,
and are in my opinion the future whether we like it or not. In an SPA
scenario the server only serves data, typically as JSON, and no HTML
is constructed there. In this set up, the tremendous complexity
introduced primarily so that a popular scripting language could be
used isn’t worth the trouble. Especially considering that Python or
Ruby bring little to the table when all of the output is JSON.</p>

<h3 id="enter-golang">Enter Golang</h3>

<p>Go is gradually disrupting the the world of web applications. Go
natively supports parallel execution which eliminates the requirement
for nearly all the components typically used to work around the GIL
limitation.</p>

<p>Go programs are binaries which run natively, so there is no need for
anything language-specific to be installed on the server. Gone is the
problem of ensuring the correct runtime version the app requires,
there is no separate runtime, it’s part of the binary.  Go programs
can easily and elegantly run tasks in the background, thus no need for
tools like Resque. Go programs run as a single process which makes
caching trivial and means Memcached or Redis is not necessary either.
Go can handle an unlimited number of parallel connections, eliminating
the need for a front-end guard like Nginx.</p>

<p>With Go the tall stack of Python, Ruby, Bundler, Virtualenv, Unicorn,
WSGI, Resque, Memcached, Redis, etc, etc is reduced to just one
binary. The only other component generally still needed is a database
(I recommend PostgreSQL). It’s important to note that all of these
tools are available as before for optional use, but with Go there is
the option of getting by entirely without them.</p>

<p>To boot this Go program will most likely outperform any Python/Ruby
app by an order of magnitude, require less memory, and with fewer
lines of code.</p>

<h3 id="so-is-there-a-popular-framework-yet">So Is there a Popular Framework Yet?</h3>

<p>The short answer is: a framework is entirely optional and not
recommended. There are many projects claiming to be great frameworks,
but I think it’s best to try to get by without one.  This isn’t just
my personal opinion, I find that it is generally shared in the Go
community.</p>

<p>It helps to think why frameworks existed in the first place. On the
Python/Ruby side this was because these languages were not initially
designed to serve web pages, and lots of external components were
necessary to bring them up to the task. Same can be said for Java,
which just like Python and Ruby, is about as old as the web as we know
it, or even pre-dates it slightly.</p>

<p>As I remember it, out of the box, early versions of Python did not
provide anything to communicate with a database, there was no
templating, HTTP support was confusing, networking was non-trivial,
bundling crypto would not even be legal then, and there was a whole
lot of other things missing. A framework provided all the necessary
pieces and set out rules for idiomatic development for all the common
web app use cases.</p>

<p>Go, on the other hand, was built by people who already experienced and
understood web development. It includes just about everything
necessary. An external package or two can be needed to deal with certain
specific aspects, e.g. OAuth, but by no means does a couple of
packages constitute a “framework”.</p>

<p>If the above take on frameworks not convincing enough, it’s helpful to
consider the framework learning curve and the risks. It took me about
two years to get comfortable with Rails. Frameworks can become
abandoned and obsolete, porting apps to a new framework is hard if
not impossible. Given how quickly the information technology sands
shift, frameworks are not to be chosen lightly.</p>

<p>I’d like to specifically single out tools and frameworks that attempt
to mimic idioms common to the Python, Ruby or the JavaScript
environments. Anything that looks or feels or claims to be “Rails for
Go”, features techniques like injection, dynamic method publishing
and the like which require relying heavily on reflection are not the
Go way of doing things, it’s best to stay away from those.</p>

<p>Frameworks definitely do make some things easier, especially in the
typical business CRUD world, where apps have many screens with lots of
fields, manipulating data in complex and ever-changing database
schemas. In such an environment, I’m not sure Go is a good choice in
the first place, especially if performance and scaling are not a
priority.</p>

<p>Another issue common to frameworks is that they abstract lower level
mechanisms from the developer often in way that over time grows to be
so arcane that it is literally impossible to figure out what is
actually happening. What begins with an idiomatic alias for a single
line of JavaScript becomes layers upon layers of transpilers,
minimizers on top of helpers hidden somewhere in a sub-dependency. One
day something breaks and it’s impossible to know where to even look
for the problem. It’s nice to know exactly what is going on sometimes,
Go is generally very good about that.</p>

<h3 id="what-about-the-database-and-orm">What about the database and ORM?</h3>

<p>Similarly to frameworks, Go culture is not big on ORM’s. For starters,
Go specifically does not support objects, which is what the O in ORM
stands for.</p>

<p>I know that writing SQL by hand instead of relying on
<code>User.find(:all).filter...</code> convenience provided to by the likes of
ActiveRecord is unheard of in some communities, but I think this
attitude needs to change. SQL is an amazing language. Dealing with SQL
directly is not that hard, and quite liberating, as well as incredibly
powerful. Possibly the most tedious part of it all is copying the data
from a database cursor into structures, but here I found the sqlx
project very useful.</p>

<h3 id="in-conclusion">In Conclusion</h3>

<p>I think this sufficiently describes the present situation of the
server side. The client side I think could be separate post, so I’ll
pause here for now. To sum up, thus far it looks like we’re building
an app with roughly the following requirements:</p>

<ul>
  <li>Minimal reliance on third party packages.</li>
  <li>No web framework.</li>
  <li>PostgreSQL backend.</li>
  <li>Single Page Application.</li>
</ul>

<p><a href="http://grisha.org/blog/2017/04/27/simplistic-go-web-app-part-2/">part 2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Go Web App - Part 2]]></title>
    <link href="http://grisha.org/blog/2017/04/27/simplistic-go-web-app-part-2/"/>
    <updated>2017-04-27T14:00:00-04:00</updated>
    <id>http://grisha.org/blog/2017/04/27/simplistic-go-web-app-part-2</id>
    <content type="html"><![CDATA[<p>This is a continuation of <a href="http://grisha.org/blog/2017/04/27/simplistic-go-web-app/">part 1</a>.
(There is also <a href="http://grisha.org/blog/2017/04/27/go-web-app-part-3/">part 3</a>
and <a href="http://grisha.org/blog/2017/04/27/go-web-app-part-4/">part 4</a>).</p>

<p>So our app is going to have two major parts to it: client and
server. (What year is this?). The server side is going to be in Go,
and the client side in JS. Let’s talk about the server side first.</p>

<h2 id="the-go-server-side">The Go (Server) Side</h2>

<p>The server side of our application is going to be responsible for
initially serving up all the necessary JavaScript and supporting files
if any, aka static assets and data in the form of JSON. That’s it,
just two functions: (1) static assets and (2) JSON.</p>

<p>It’s worth noting that serving assets is optional: assets could be
served from a CDN, for example. But what is different is that it is not
a problem for our Go app, unlike a Python/Ruby app it can perform on
par with Ngnix and Apache serving static assets. Delegating assets to
another piece of software to lighten its load is no longer necessary,
though certainly makes sense in some situations.</p>

<p>To make this simpler, let’s pretend we’re making an app that lists
people (just first and last name) from a database table, that’s
it. The code is here <a href="https://github.com/grisha/gowebapp">https://github.com/grisha/gowebapp</a>.</p>

<h3 id="directory-layout">Directory Layout</h3>

<p>It has been my experience that dividing functionality across packages
early on is a good idea in Go. Even if it is not completely clear how
the final program will be structured, it is good to keep things
separate to the extent possible.</p>

<p>For a web app I think something along the lines of the following
layout makes sense:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># github.com/user/foo
</span><span class="line">
</span><span class="line">foo/            # package main
</span><span class="line">  |
</span><span class="line">  +--daemon/    # package daemon
</span><span class="line">  |
</span><span class="line">  +--model/     # package model
</span><span class="line">  |
</span><span class="line">  +--ui/        # package ui
</span><span class="line">  |
</span><span class="line">  +--db/        # package db
</span><span class="line">  |
</span><span class="line">  +--assets/    # where we keep JS and other assets</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="top-level-package-main">Top level: <code>package main</code></h3>

<p>At the top level we have package <code>main</code> and its code in <code>main.go</code>. The
key advantage here is that with this layout <code>go get github.com/user/foo</code>
can be the only command required to install the whole application into
<code>$GOPATH/bin</code>.</p>

<p>Package <code>main</code> should do as little as possible. The only code that
belongs here is to parse the command argument flags. If the app had a
config file, I’d stick parsing and checking of that file into yet
another package, probably called <code>config</code>. After that main should pass
the control to the <code>daemon</code> package.</p>

<p>An essential main.go is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">    <span class="s">&quot;github.com/user/foo/daemon&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">assetsPath</span> <span class="kt">string</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">processFlags</span><span class="p">()</span> <span class="o">*</span><span class="nx">daemon</span><span class="p">.</span><span class="nx">Config</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">cfg</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">daemon</span><span class="p">.</span><span class="nx">Config</span><span class="p">{}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">flag</span><span class="p">.</span><span class="nx">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">ListenSpec</span><span class="p">,</span> <span class="s">&quot;listen&quot;</span><span class="p">,</span> <span class="s">&quot;localhost:3000&quot;</span><span class="p">,</span> <span class="s">&quot;HTTP listen spec&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="nx">flag</span><span class="p">.</span><span class="nx">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">Db</span><span class="p">.</span><span class="nx">ConnectString</span><span class="p">,</span> <span class="s">&quot;db-connect&quot;</span><span class="p">,</span> <span class="s">&quot;host=/var/run/postgresql dbname=gowebapp sslmode=disable&quot;</span><span class="p">,</span> <span class="s">&quot;DB Connect String&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="nx">flag</span><span class="p">.</span><span class="nx">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">assetsPath</span><span class="p">,</span> <span class="s">&quot;assets-path&quot;</span><span class="p">,</span> <span class="s">&quot;assets&quot;</span><span class="p">,</span> <span class="s">&quot;Path to assets dir&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="nx">flag</span><span class="p">.</span><span class="nx">Parse</span><span class="p">()</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">cfg</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">setupHttpAssets</span><span class="p">(</span><span class="nx">cfg</span> <span class="o">*</span><span class="nx">daemon</span><span class="p">.</span><span class="nx">Config</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Assets served from %q.&quot;</span><span class="p">,</span> <span class="nx">assetsPath</span><span class="p">)</span>
</span><span class="line">    <span class="nx">cfg</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">Assets</span> <span class="p">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Dir</span><span class="p">(</span><span class="nx">assetsPath</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">cfg</span> <span class="o">:=</span> <span class="nx">processFlags</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="nx">setupHttpAssets</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">daemon</span><span class="p">.</span><span class="nx">Run</span><span class="p">(</span><span class="nx">cfg</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Error in main(): %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above program accepts three parameters, <code>-listen</code>, <code>-db-connect</code>
and <code>-assets-path</code>, nothing earth shattering.</p>

<h4 id="using-structs-for-clarity">Using structs for clarity</h4>

<p>In line <code>cfg := &amp;daemon.Config{}</code> we are creating a <code>daemon.Config</code>
object. It’s main purpose is to pass around configuration in a
structured and clear format. Every one of our packages defines its own
<code>Config</code> type describing the parameters it needs, and packages can
include other package configs. We see an example of this in
<code>processFlags()</code> above: <code>flag.StringVar(&amp;cfg.Db.ConnectString,
...</code>. Here <code>db.Config</code> is included in <code>daemon.Config</code>. I find doing
this very useful. These structures also keep open the possibility of
serializing configs as JSON, TOML or whatever.</p>

<h4 id="using-httpfilesystem-to-serve-assets">Using http.FileSystem to serve assets</h4>

<p>The <code>http.Dir(assetsPath)</code> in <code>setupHttpAssets</code> is in preparation to
how we will serve the assets in the <code>ui</code> package. The reason it’s done
this way is to leave the door open for <code>cfg.UI.Assets</code> (which is a
<code>http.FileSystem</code> interface) to be provided by other implementations,
e.g. serving this content from memory.  I will describe it in more
detail in a later post.</p>

<p>Lastly, main calls <code>daemon.Run(cfg)</code> which is what actually starts our
app and where it blocks until it’s terminated.</p>

<h3 id="package-daemon"><code>package daemon</code></h3>

<p>Package <code>daemon</code> contains everything related to running a
process. Stuff like which port to listen on, custom logging would
belong here, as well anything related to a graceful restart, etc.</p>

<p>Since the job of the <code>daemon</code> package is to initiate the database
connection, it will need to import the <code>db</code> package. It’s also
responsible for listening on the TCP port and starting the user
interface for that listener, therefore it needs to import the <code>ui</code>
package, and since the <code>ui</code> package needs to access data, which is
done via the <code>model</code> package, it will need to import <code>model</code> as well.</p>

<p>A bare bones <code>daemon</code> might look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">daemon</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">    <span class="s">&quot;log&quot;</span>
</span><span class="line">    <span class="s">&quot;net&quot;</span>
</span><span class="line">    <span class="s">&quot;os&quot;</span>
</span><span class="line">    <span class="s">&quot;os/signal&quot;</span>
</span><span class="line">    <span class="s">&quot;syscall&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="s">&quot;github.com/grisha/gowebapp/db&quot;</span>
</span><span class="line">    <span class="s">&quot;github.com/grisha/gowebapp/model&quot;</span>
</span><span class="line">    <span class="s">&quot;github.com/grisha/gowebapp/ui&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">type</span> <span class="nx">Config</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">ListenSpec</span> <span class="kt">string</span>
</span><span class="line">
</span><span class="line">    <span class="nx">Db</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Config</span>
</span><span class="line">    <span class="nx">UI</span> <span class="nx">ui</span><span class="p">.</span><span class="nx">Config</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">Run</span><span class="p">(</span><span class="nx">cfg</span> <span class="o">*</span><span class="nx">Config</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Starting, HTTP on: %s\n&quot;</span><span class="p">,</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">ListenSpec</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="nx">db</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">InitDb</span><span class="p">(</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">Db</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Error initializing database: %v\n&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">err</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">m</span> <span class="o">:=</span> <span class="nx">model</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="nx">l</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">ListenSpec</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Error creating listener: %v\n&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">err</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">ui</span><span class="p">.</span><span class="nx">Start</span><span class="p">(</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">UI</span><span class="p">,</span> <span class="nx">m</span><span class="p">,</span> <span class="nx">l</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="nx">waitForSignal</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">waitForSignal</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">)</span>
</span><span class="line">    <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">ch</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGINT</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class="line">    <span class="nx">s</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span>
</span><span class="line">    <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Got signal: %v, exiting.&quot;</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note how <code>Config</code> includes <code>db.Config</code> and <code>ui.Config</code> as I described
earlier.</p>

<p>All the action happens in <code>Run(*Config)</code>. We initialize a database
connection, create a <code>model.Model</code> instance, and start the <code>ui</code>
passing in the config, a pointer to the model and the listener.</p>

<h3 id="package-model"><code>package model</code></h3>

<p>The purpose of <code>model</code> is to separate how data is stored in the
database from the <code>ui</code>, as well as to contain any business logic an
app might have. It’s the brains of the app if you will.</p>

<p>The <code>model</code> package should define a struct (<code>Model</code> seems like an
appropriate name) and a pointer to an instance of the struct should be
passed to all the <code>ui</code> functions and methods. There should only be one
such instance in our app - for extra credit you can enforce that
programmatically by making it a singleton, but I don’t think that’s
necessary.</p>

<p>Alternatively you could get by without a <code>Model</code> and just use the
package <code>model</code> itself. I don’t like this approach, but it’s an
option.</p>

<p>The model should also define structs for the data entities we are
dealing with. In our example it would be a <code>Person</code> struct. Its
members should be exported (capitalized) because other packages will
be accessing those. If you use
<a href="https://github.com/jmoiron/sqlx">sqlx</a>, this is where you would also
specify tags that map elements to db column names, e.g. <code>`db:"first_name"`</code></p>

<p>Our Person type:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">Id</span>          <span class="kt">int64</span>
</span><span class="line">    <span class="nx">First</span><span class="p">,</span> <span class="nx">Last</span> <span class="kt">string</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In our case we do not need tags because our column names match the
element names, and sqlx conveniently takes care of the capitalization,
so <code>Last</code> matches the column named <code>last</code>.</p>

<h4 id="package-model-should-not-import-db">package model should NOT import db</h4>

<p>Somewhat counter-intuitive, <code>model</code> cannot import <code>db</code>. This is
because <code>db</code> needs to import <code>model</code>, and circular imports are not
allowed in Go. This is one case where interfaces come in
handy. <code>model</code> needs to define an interface which <code>db</code> should
satisfy. For now all we know is we need to list people, so we can
start with this definition:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">db</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">SelectPeople</span><span class="p">()</span> <span class="p">([]</span><span class="o">*</span><span class="nx">Person</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Our app doesn’t really do much, but we know it lists people, so our
model should probably have a <code>People() ([]*Person, error)</code> method:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">Model</span><span class="p">)</span> <span class="nx">People</span><span class="p">()</span> <span class="p">([]</span><span class="o">*</span><span class="nx">Person</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">SelectPeople</span><span class="p">()</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To keep things tidy, code should be in separate files, e.g. <code>Person</code>
definition should be in <code>person.go</code>, etc. For readability, here is a
single file version of our <code>model</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">model</span>
</span><span class="line">
</span><span class="line"><span class="kd">type</span> <span class="nx">db</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">SelectPeople</span><span class="p">()</span> <span class="p">([]</span><span class="o">*</span><span class="nx">Person</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">type</span> <span class="nx">Model</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">db</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">New</span><span class="p">(</span><span class="nx">db</span> <span class="nx">db</span><span class="p">)</span> <span class="o">*</span><span class="nx">Model</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="o">&amp;</span><span class="nx">Model</span><span class="p">{</span>
</span><span class="line">        <span class="nx">db</span><span class="p">:</span> <span class="nx">db</span><span class="p">,</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">Model</span><span class="p">)</span> <span class="nx">People</span><span class="p">()</span> <span class="p">([]</span><span class="o">*</span><span class="nx">Person</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">SelectPeople</span><span class="p">()</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">Id</span>          <span class="kt">int64</span>
</span><span class="line">    <span class="nx">First</span><span class="p">,</span> <span class="nx">Last</span> <span class="kt">string</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="package-db"><code>package db</code></h3>

<p><code>db</code> is the actual implementation of the database interaction. This is
where the SQL statements are constructed and executed. This package
also imports <code>model</code> because it will need to construct those structs
from database data.</p>

<p>First, <code>db</code> needs to provide the <code>InitDb</code> function which will
establish the database connection, as well as create the necessary
tables and prepare the SQL statements.</p>

<p>Our simplistic example doesn’t support migrations, but in theory this
is also where they might potentially happen.</p>

<p>We are using PostgreSQL, which means we need to import the
<a href="https://github.com/lib/pq">pq</a> driver. We are also going to rely on
sqlx, and we need our own <code>model</code>. Here is the beginning of our <code>db</code>
implementation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">db</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">    <span class="s">&quot;database/sql&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="s">&quot;github.com/grisha/gowebapp/model&quot;</span>
</span><span class="line">    <span class="s">&quot;github.com/jmoiron/sqlx&quot;</span>
</span><span class="line">    <span class="nx">_</span> <span class="s">&quot;github.com/lib/pq&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">type</span> <span class="nx">Config</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">ConnectString</span> <span class="kt">string</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">InitDb</span><span class="p">(</span><span class="nx">cfg</span> <span class="nx">Config</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">pgDb</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">dbConn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sqlx</span><span class="p">.</span><span class="nx">Connect</span><span class="p">(</span><span class="s">&quot;postgres&quot;</span><span class="p">,</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">ConnectString</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">p</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">pgDb</span><span class="p">{</span><span class="nx">dbConn</span><span class="p">:</span> <span class="nx">dbConn</span><span class="p">}</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">dbConn</span><span class="p">.</span><span class="nx">Ping</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">createTablesIfNotExist</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">prepareSqlStatements</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">p</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Out <code>InitDb()</code> creates an instance of a <code>pgDb</code>, which is our Postgres
implementation of the <code>model.db</code> interface. It keeps all that we need
to communicate with the database, including the prepared statements,
and exports the necessary methods to satisfy the interface.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">type</span> <span class="nx">pgDb</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">dbConn</span> <span class="o">*</span><span class="nx">sqlx</span><span class="p">.</span><span class="nx">DB</span>
</span><span class="line">
</span><span class="line">    <span class="nx">sqlSelectPeople</span> <span class="o">*</span><span class="nx">sqlx</span><span class="p">.</span><span class="nx">Stmt</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is the code to create the tables and the statements. From the SQL
perspective this is rather simplistic, it could be a lot more
elaborate, of course:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">pgDb</span><span class="p">)</span> <span class="nx">createTablesIfNotExist</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">create_sql</span> <span class="o">:=</span> <span class="s">`</span>
</span><span class="line">
</span><span class="line"><span class="s">       CREATE TABLE IF NOT EXISTS people (</span>
</span><span class="line"><span class="s">       id SERIAL NOT NULL PRIMARY KEY,</span>
</span><span class="line"><span class="s">       first TEXT NOT NULL,</span>
</span><span class="line"><span class="s">       last TEXT NOT NULL);</span>
</span><span class="line">
</span><span class="line"><span class="s">    `</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">rows</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">dbConn</span><span class="p">.</span><span class="nx">Query</span><span class="p">(</span><span class="nx">create_sql</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">err</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">rows</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">pgDb</span><span class="p">)</span> <span class="nx">prepareSqlStatements</span><span class="p">()</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="nx">p</span><span class="p">.</span><span class="nx">sqlSelectPeople</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">dbConn</span><span class="p">.</span><span class="nx">Preparex</span><span class="p">(</span>
</span><span class="line">        <span class="s">&quot;SELECT id, first, last FROM people&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">err</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="kc">nil</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, we need to provide the method to satisfy the interface:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="go"><span class="line">    <span class="nx">people</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="o">*</span><span class="nx">model</span><span class="p">.</span><span class="nx">Person</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">sqlSelectPeople</span><span class="p">.</span><span class="nx">Select</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">people</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">people</span><span class="p">,</span> <span class="kc">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here we’re taking advantage of sqlx to run the query and construct a
slice from results with a simple call to <code>Select()</code> (NB:
<code>p.sqlSelectPeople</code> is a <code>*sqlx.Stmt</code>). Without sqlx we would have to
iterate over the result rows, processing each with <code>Scan</code>, which would
be considerably more verbose.</p>

<p>Beware of a very subtle “gotcha” here. <code>people</code> could also be defined
as <code>var people []*model.Person</code> and the method would work just the
same. However, if the database returned no rows, the method would
return <code>nil</code>, not an empty slice. If the result of this method is
later encoded as JSON, the former would become <code>null</code> and the latter
<code>[]</code>. This could cause problems if the client side doesn’t know how to
treat <code>null</code>.</p>

<p>That’s it for <code>db</code>.</p>

<h3 id="package-ui">package ui</h3>

<p>Finally, we need to serve all that stuff via HTTP and that’s what the
<code>ui</code> package does.</p>

<p>Here is a very simplistic variant:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">ui</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">    <span class="s">&quot;fmt&quot;</span>
</span><span class="line">    <span class="s">&quot;net&quot;</span>
</span><span class="line">    <span class="s">&quot;net/http&quot;</span>
</span><span class="line">    <span class="s">&quot;time&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="s">&quot;github.com/grisha/gowebapp/model&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">type</span> <span class="nx">Config</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">Assets</span> <span class="nx">http</span><span class="p">.</span><span class="nx">FileSystem</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">Start</span><span class="p">(</span><span class="nx">cfg</span> <span class="nx">Config</span><span class="p">,</span> <span class="nx">m</span> <span class="o">*</span><span class="nx">model</span><span class="p">.</span><span class="nx">Model</span><span class="p">,</span> <span class="nx">listener</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listener</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="nx">server</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span>
</span><span class="line">        <span class="nx">ReadTimeout</span><span class="p">:</span>    <span class="mi">60</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span><span class="line">        <span class="nx">WriteTimeout</span><span class="p">:</span>   <span class="mi">60</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span><span class="line">        <span class="nx">MaxHeaderBytes</span><span class="p">:</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">http</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">indexHandler</span><span class="p">(</span><span class="nx">m</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">    <span class="k">go</span> <span class="nx">server</span><span class="p">.</span><span class="nx">Serve</span><span class="p">(</span><span class="nx">listener</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">const</span> <span class="nx">indexHTML</span> <span class="p">=</span> <span class="s">`</span>
</span><span class="line"><span class="s">&lt;!DOCTYPE HTML&gt;</span>
</span><span class="line"><span class="s">&lt;html&gt;</span>
</span><span class="line"><span class="s">  &lt;head&gt;</span>
</span><span class="line"><span class="s">    &lt;meta charset=&quot;utf-8&quot;&gt;</span>
</span><span class="line"><span class="s">    &lt;title&gt;Simple Go Web App&lt;/title&gt;</span>
</span><span class="line"><span class="s">  &lt;/head&gt;</span>
</span><span class="line"><span class="s">  &lt;body&gt;</span>
</span><span class="line"><span class="s">    &lt;div id=&#39;root&#39;&gt;&lt;/div&gt;</span>
</span><span class="line"><span class="s">  &lt;/body&gt;</span>
</span><span class="line"><span class="s">&lt;/html&gt;</span>
</span><span class="line"><span class="s">`</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">indexHandler</span><span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">model</span><span class="p">.</span><span class="nx">Model</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">indexHTML</span><span class="p">)</span>
</span><span class="line">    <span class="p">})</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note how <code>indexHTML</code> contains next to nothing. This is 100% of the
HTML that this app will ever serve. It will evolve a little as we get
into the client side of the app, but only by a few lines.</p>

<p>Also noteworthy is how the handler is defined. If this idiom is not
familiar, it’s worth spending a few minutes (or a day) to internalize
it completely as it is very common in Go. <code>indexHandler()</code> is not a
handler, it <em>returns</em> a handler function. It is done this way so
that we can pass in a <code>*model.Model</code> via closure, since an HTTP
handler function definition is fixed and a model pointer is not one of
the parameters.</p>

<p>In the case of <code>indexHandler()</code> we’re not actually doing anything with
the model pointer, but when we get to implementing an actual list of
people we will need it.</p>

<h3 id="conclusion">Conclusion</h3>

<p>Above is essentially all the knowledge required to build a basic Go
web app, at least the Go side of it. Next week I’ll get into the
client side and we will complete the people listing code.</p>

<p>Continue to <a href="http://grisha.org/blog/2017/04/27/go-web-app-part-3/">part 3</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Go Web App - Part 3]]></title>
    <link href="http://grisha.org/blog/2017/04/27/go-web-app-part-3/"/>
    <updated>2017-04-27T13:00:00-04:00</updated>
    <id>http://grisha.org/blog/2017/04/27/go-web-app-part-3</id>
    <content type="html"><![CDATA[<p>This is part 3. See <a href="http://grisha.org/blog/2017/04/27/simplistic-go-web-app/">part 1</a>
and <a href="http://grisha.org/blog/2017/04/27/simplistic-go-web-app-part-2/">part 2</a>.</p>

<p>The previous two posts got us to a point where we had a Go app which
was able to serve a tiny bit of HTML. This post will talk about the
client side, which, alas, is mostly JavaScript, not Go.</p>

<h3 id="javascript-in-2017">JavaScript in 2017</h3>

<p>This is what gave me the most grief. I don’t really know how to
categorize the mess that present day JavaScript is, nor do I really
know what to attribute it to, and trying to rationalize it would make
for a great, but entirely different blog post. So I’m just going to
accept this as the reality we cannot change and move on to how to best
work with it.</p>

<h3 id="variants-of-js">Variants of JS</h3>

<p>The most common variant of JS these days is known as ES2015 (aka ES6 or
ECMAScript 6th Edition), and it is <em>mostly</em> supported by the more or
less latest browsers. The latest released spec of JavaScript is ES7
(aka ES2016), but since the browsers are sill catching up with ES6, it
looks like ES7 is never really going to be adopted as such, because
most likely the next coming ES8 which might be released in 2017 will
supersede it before the browsers are ready.</p>

<p>Curiously, there appears to be no simple way to construct an
environment fully specific to a particular ECMAScript version. There
is not even a way to revert to an older fully supported version ES5 or
ES4, and thus it is not really possible to test your script for
compliance. The best you can do is to test it on the browsers you have
access to and hope for the best.</p>

<p>Because of the ever changing and vastly varying support for the
language across platforms and browsers, <em>transpilation</em> has emerged as
a common idiom to address this. Transpilation mostly amounts to
JavaScript code being converted to JavaScript that complies with a
specific ES version or a particular environment. For example <code>import
Bar from 'foo';</code> might become <code>var Bar = require('foo');</code>. And so if a
particular feature is not supported, it can be made available with the
help of the right plug-in or transpiler. I suspect that the
transpilation proliferation phenomenon has led to additional problems,
such as the input expected by a transpiler assuming existence of a
feature that is no longer supported, same with output. Often this
might be remedied by additional plugins, and it can be very difficult
to sort out. On more than one occasion I spent a lot of time trying to
get something to work only to find out later that my entire approach
has been obsoleted by a new and better solution now built-in to some
other tool.</p>

<h3 id="js-frameworks">JS Frameworks</h3>

<p>There also seems to be a lot of disagreement on which JS framework is
best. It is even more confusing because the same framework can be so
radically different from one version to the next I wonder why they
didn’t just change the name.</p>

<p>I have no idea which is best, and I only had the patience to try a
couple. About a year ago I spent a bunch of time tinkering with
AngularJS, and this time, for a change, I tinkered with React. For me,
I think React makes more sense, and so this is what this example app
is using, for better or worse.</p>

<h3 id="react-and-jsx">React and JSX</h3>

<p>If you don’t know what React is, here’s my (technically incorrect)
explanation: it’s HTML embedded in JavaScript. We’re all so
brainwashed into JavaScript being embedded in HTML as the natural
order of things, that inverting this relationship does not even occur
as a possibility. For the fundamental simplicity of this revolutionary (sic)
concept I think React is quite brilliant.</p>

<p>A react “Hello World!” looks approximately like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kr">class</span> <span class="nx">Hello</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">let</span> <span class="nx">who</span> <span class="o">=</span> <span class="s2">&quot;World&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span> <span class="nx">Hello</span> <span class="p">{</span><span class="nx">who</span><span class="p">}</span><span class="o">!</span> <span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class="line">    <span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notice how the HTML just begins without any escape or
delimiter. Surprisingly, the opening “&lt;” works quite reliably as the
marker signifying beginning of HTML. Once inside HTML, the opening
curly brace indicates that we’re back to JavaScript temporarily, and
this is how variable values are interpolated inside HTML. That’s pretty
much all you need to know to “get” React.</p>

<p>Technically, the above file format is known as <code>JSX</code>, while React is
the library which provides the classes used to construct React objects
such as <code>React.Component</code> above. JSX is transpiled into regular
JavaScript by a tool known as Babel, and in fact JSX is not even
required, a React component can be written in plain JavaScript, and
there is a school of thought whereby React is used without JSX. I
personally find the JSX-less approach a little too noisy, and I also
like that Babel allows you to use a more modern dialect of JS (though
not having to deal with a transpiler is definitely a win).</p>

<h3 id="minimal-working-example">Minimal Working Example</h3>

<p>First, we need three pieces of external JavaScript. They are (1) React
and ReactDOM, (2) Babel in-browser transpiler and (3) a little lib
called Axios which is useful for making JSON HTTP requests. I get them
out of Cloudflare CDN, there are probably other ways. To do this, we
need to augment our <code>indexHTML</code> variable to look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">const</span> <span class="p">(</span>
</span><span class="line">	<span class="nx">cdnReact</span>           <span class="p">=</span> <span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/react/15.5.4/react.min.js&quot;</span>
</span><span class="line">	<span class="nx">cdnReactDom</span>        <span class="p">=</span> <span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/react/15.5.4/react-dom.min.js&quot;</span>
</span><span class="line">	<span class="nx">cdnBabelStandalone</span> <span class="p">=</span> <span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.24.0/babel.min.js&quot;</span>
</span><span class="line">	<span class="nx">cdnAxios</span>           <span class="p">=</span> <span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.1/axios.min.js&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">const</span> <span class="nx">indexHTML</span> <span class="p">=</span> <span class="s">`</span>
</span><span class="line"><span class="s">&lt;!DOCTYPE HTML&gt;</span>
</span><span class="line"><span class="s">&lt;html&gt;</span>
</span><span class="line"><span class="s">  &lt;head&gt;</span>
</span><span class="line"><span class="s">    &lt;meta charset=&quot;utf-8&quot;&gt;</span>
</span><span class="line"><span class="s">    &lt;title&gt;Simple Go Web App&lt;/title&gt;</span>
</span><span class="line"><span class="s">  &lt;/head&gt;</span>
</span><span class="line"><span class="s">  &lt;body&gt;</span>
</span><span class="line"><span class="s">    &lt;div id=&#39;root&#39;&gt;&lt;/div&gt;</span>
</span><span class="line"><span class="s">    &lt;script src=&quot;`</span> <span class="o">+</span> <span class="nx">cdnReact</span> <span class="o">+</span> <span class="s">`&quot;&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="s">    &lt;script src=&quot;`</span> <span class="o">+</span> <span class="nx">cdnReactDom</span> <span class="o">+</span> <span class="s">`&quot;&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="s">    &lt;script src=&quot;`</span> <span class="o">+</span> <span class="nx">cdnBabelStandalone</span> <span class="o">+</span> <span class="s">`&quot;&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="s">    &lt;script src=&quot;`</span> <span class="o">+</span> <span class="nx">cdnAxios</span> <span class="o">+</span> <span class="s">`&quot;&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="s">    &lt;script src=&quot;/js/app.jsx&quot; type=&quot;text/babel&quot;&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="s">  &lt;/body&gt;</span>
</span><span class="line"><span class="s">&lt;/html&gt;</span>
</span><span class="line"><span class="s">`</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>At the very end it now loads <code>"/js/app.jsx"</code> which we need to
accommodate as well. Back in part 1 we created a UI config variable
called <code>cfg.Assets</code> using <code>http.Dir()</code>. We now need to wrap it in
a handler which serves files, and Go conveniently provides one:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line">    <span class="nx">http</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/js/&quot;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">FileServer</span><span class="p">(</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">Assets</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With the above, all the files in <code>"assets/js"</code> become available under
<code>"/js/"</code>.</p>

<p>Finally we need to create the <code>assets/js/app.jsx</code> file itself:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">class</span> <span class="nx">Hello</span> <span class="nx">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">let</span> <span class="nx">who</span> <span class="p">=</span> <span class="s">&quot;World&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span>
</span><span class="line">      <span class="p">&lt;</span><span class="nx">h1</span><span class="p">&gt;</span> <span class="nx">Hello</span> <span class="p">{</span><span class="nx">who</span><span class="p">}!</span> <span class="p">&lt;</span><span class="o">/</span><span class="nx">h1</span><span class="p">&gt;</span>
</span><span class="line">    <span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span> <span class="p">&lt;</span><span class="nx">Hello</span><span class="o">/</span><span class="p">&gt;,</span> <span class="nx">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s">&quot;#root&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The only difference from the previous listing is the very last line,
which is what makes the app actually render itself.</p>

<p>If we now hit the index page from a (JS-capable) browser, we should see a “Hello
World”.</p>

<p>What happened was that the browser loaded “app.jsx” as it was
instructed, but since “jsx” is not a file type it is familiar with, it
simply ignored it. When Babel got its chance to run, it scanned our
document for any script tags referencing “text/babel” as its type, and
re-requested those pages (which makes them show up twice in developer
tools, but the second request ought to served entirely from browser cache). It
then transpiled it to valid JavaScript and executed it, which in turn
caused React to actually render the “Hello World”.</p>

<h3 id="listing-people">Listing People</h3>

<p>We need to first go back to the server side and create a URI that
lists people. In order for that to happen, we need an http handler,
which might look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">peopleHandler</span><span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">model</span><span class="p">.</span><span class="nx">Model</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">people</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">People</span><span class="p">()</span>
</span><span class="line">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">http</span><span class="p">.</span><span class="nx">Error</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;This is an error&quot;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">)</span>
</span><span class="line">			<span class="k">return</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">
</span><span class="line">		<span class="nx">js</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">people</span><span class="p">)</span>
</span><span class="line">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">http</span><span class="p">.</span><span class="nx">Error</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;This is an error&quot;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">)</span>
</span><span class="line">			<span class="k">return</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">js</span><span class="p">))</span>
</span><span class="line">	<span class="p">})</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And we need to register it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line">    <span class="nx">http</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/people&quot;</span><span class="p">,</span> <span class="nx">peopleHandler</span><span class="p">(</span><span class="nx">m</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now if we hit <code>"/people"</code>, we should get a <code>"[]"</code> in response. If we
insert a record into our people table with something along the lines
of:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">people</span> <span class="p">(</span><span class="k">first</span><span class="p">,</span> <span class="k">last</span><span class="p">)</span> <span class="k">VALUES</span><span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;Doe&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The response should change to <code>[{"Id":1,"First":"John","Last":"Doe"}]</code>.</p>

<p>Finally we need to hook up our React/JSX code to make it all
render.</p>

<p>For this we are going to create a <code>PersonItem</code> component, and
another one called <code>PeopleList</code> which will use <code>PersonItem</code>.</p>

<p>A <code>PersonItem</code> only needs to know how to render itself as a table row:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kr">class</span> <span class="nx">PersonItem</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span>    <span class="o">&lt;</span><span class="err">/td&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">first</span><span class="p">}</span> <span class="o">&lt;</span><span class="err">/td&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">last</span><span class="p">}</span>  <span class="o">&lt;</span><span class="err">/td&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="err">/tr&gt;</span>
</span><span class="line">    <span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A <code>PeopleList</code> is slightly more complicated:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kr">class</span> <span class="nx">PeopleList</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">people</span><span class="o">:</span> <span class="p">[]</span> <span class="p">};</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">serverRequest</span> <span class="o">=</span>
</span><span class="line">      <span class="nx">axios</span>
</span><span class="line">        <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/people&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">           <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">people</span><span class="o">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">data</span> <span class="p">});</span>
</span><span class="line">        <span class="p">});</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kr">const</span> <span class="nx">people</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">people</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">person</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="p">(</span>
</span><span class="line">        <span class="o">&lt;</span><span class="nx">PersonItem</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">i</span><span class="p">}</span> <span class="nx">id</span><span class="o">=</span><span class="p">{</span><span class="nx">person</span><span class="p">.</span><span class="nx">Id</span><span class="p">}</span> <span class="nx">first</span><span class="o">=</span><span class="p">{</span><span class="nx">person</span><span class="p">.</span><span class="nx">First</span><span class="p">}</span> <span class="nx">last</span><span class="o">=</span><span class="p">{</span><span class="nx">person</span><span class="p">.</span><span class="nx">Last</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class="line">      <span class="p">);</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="p">(</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="nx">table</span><span class="o">&gt;&lt;</span><span class="nx">tbody</span><span class="o">&gt;</span>
</span><span class="line">          <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Id</span><span class="o">&lt;</span><span class="err">/th&gt;&lt;th&gt;First&lt;/th&gt;&lt;th&gt;Last&lt;/th&gt;&lt;/tr&gt;</span>
</span><span class="line">          <span class="p">{</span><span class="nx">people</span><span class="p">}</span>
</span><span class="line">        <span class="o">&lt;</span><span class="err">/tbody&gt;&lt;/table&gt;</span>
</span><span class="line">
</span><span class="line">      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class="line">    <span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It has a constructor which initializes a <code>this.state</code> variable. It
also declared a <code>componentDidMount()</code> method, which React will call
when the component is about to be rendered, making it the (or one of)
correct place to fetch the data from the server. It fetches the data
via an Axios call, and saves the result in
<code>this.state.people</code>. Finally, <code>render()</code> iterates over the contents of
<code>this.state.people</code> creating an instance of <code>PersonItem</code> for each.</p>

<p>That’s it, our app now responds with a (rather ugly) table listing
people from our database.</p>

<h3 id="conclusion">Conclusion</h3>

<p>In essence, this is all you need to know to make a fully functional Web
App in Go. This app has a number of shortcomings, which I will
hopefully address later. For example in-browser transpilation is not
ideal, though it might be fine for a low volume internal app where
page load time is not important, so we might want to have a way to
pre-transpile it ahead of time. Also our JSX is confined to a single
file, this might get hard to manage for any serious size app where
there are lots of components. The app has no navigation. There is no
styling. There are probably things I’m forgetting about…</p>

<p>Enjoy!</p>

<p>P.S. Complete code is <a href="https://github.com/grisha/gowebapp">here</a></p>

<p>Continued in <a href="http://grisha.org/blog/2017/04/27/go-web-app-part-4/">part 4</a>…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Go Web App - Part 4]]></title>
    <link href="http://grisha.org/blog/2017/04/27/go-web-app-part-4/"/>
    <updated>2017-04-27T09:13:00-04:00</updated>
    <id>http://grisha.org/blog/2017/04/27/go-web-app-part-4</id>
    <content type="html"><![CDATA[<p>This is part 4. See <a href="http://grisha.org/blog/2017/04/27/simplistic-go-web-app/">part 1</a>,
<a href="http://grisha.org/blog/2017/04/27/simplistic-go-web-app-part-2/">part 2</a> and
<a href="http://grisha.org/blog/2017/04/27/go-web-app-part-3/">part 3</a>.</p>

<p>In this part I will try to briefly go over the missing pieces in our
very simplistic Go Web App.</p>

<h3 id="http-handler-wrappers">HTTP Handler Wrappers</h3>

<p>I tiny rant: I do not like the word “middleware”. The concept of a
wrapper has been around since the dawn of computing, there is no need
to invent new words for it.</p>

<p>Having that out of the way, let’s say we need to require
authentication for a certain URL. This is what our index handler
presently looks like:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">indexHandler</span><span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">model</span><span class="p">.</span><span class="nx">Model</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">indexHTML</span><span class="p">)</span>
</span><span class="line">	<span class="p">})</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We could write a function which takes an <code>http.Handler</code> as an argument
and returns a (different) <code>http.Handler</code>. The returned handler checks
whether the user is authenticated with <code>m.IsAuthenticated()</code> (whatever
it does is not important here) and redirects the user to a login page,
or executes the original handler by calling its <code>ServeHTTP()</code> method.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">requireLogin</span><span class="p">(</span><span class="nx">h</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">,</span> <span class="nx">m</span> <span class="o">*</span><span class="nx">model</span><span class="p">.</span><span class="nx">Model</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="k">if</span> <span class="p">!</span><span class="nx">m</span><span class="p">.</span><span class="nx">IsAuthenticated</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="nx">http</span><span class="p">.</span><span class="nx">Redirect</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">loginURL</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusFound</span><span class="p">)</span>
</span><span class="line">			<span class="k">return</span>
</span><span class="line">		<span class="p">}</span>
</span><span class="line">		<span class="nx">h</span><span class="p">.</span><span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class="line">	<span class="p">})</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Given the above, the function registration now would look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line">   <span class="nx">http</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">requireLogin</span><span class="p">(</span><span class="nx">indexHandler</span><span class="p">(</span><span class="nx">m</span><span class="p">)),</span> <span class="nx">m</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Handlers can be wrapped this way in as many layers as needed and this
approach is very flexible. Anything from setting headers to
compressing output can be accomplished via a wrapper. Note also that
we can pass in whatever arguments we need, for example our
<code>*model.Model</code>.</p>

<h3 id="url-parameters">URL Parameters</h3>

<p>Sooner or later we might want to rely on URL parameters,
e.g. <code>/person/3</code> where <code>3</code> is a person id. Go standard library doesn’t
provide any support for this leaving it as an exercise for the
developer. The software component responsible for this sort of thing
is known as a <a href="https://golang.org/pkg/net/http/#ServeMux">Mux</a> or
“router” and it can be replaced by a custom implementation. A Mux also
provides a <code>ServeHTTP()</code> method which means it satisfies the
<code>http.Handler</code> interface, i.e. it is a handler.</p>

<p>A very popular implementation is the <a href="https://github.com/gorilla/mux">Gorilla Mux</a>.
It is easy to delegate entire
sub-urls to the Gorilla Mux wherever more flexibility is needed. For
example we can decide that everything from <code>/person</code> and below is
handled by an instance of a Gorilla router <em>and</em> we want that to be
all authenticated, which might look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="go"><span class="line">	<span class="c1">// import &quot;github.com/gorilla/mux&quot;</span>
</span><span class="line">	<span class="nx">pr</span> <span class="o">:=</span> <span class="nx">mux</span><span class="p">.</span><span class="nx">NewRouter</span><span class="p">().</span><span class="nx">PathPrefix</span><span class="p">(</span><span class="s">&quot;/person&quot;</span><span class="p">).</span><span class="nx">Subrouter</span><span class="p">()</span>
</span><span class="line">	<span class="nx">pr</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/{id}&quot;</span><span class="p">,</span> <span class="nx">personGetHandler</span><span class="p">(</span><span class="nx">m</span><span class="p">)).</span><span class="nx">Methods</span><span class="p">(</span><span class="s">&quot;GET&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="nx">pr</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">personPostHandler</span><span class="p">(</span><span class="nx">m</span><span class="p">)).</span><span class="nx">Methods</span><span class="p">(</span><span class="s">&quot;POST&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="nx">pr</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/{id}&quot;</span><span class="p">,</span> <span class="nx">personPutHandler</span><span class="p">(</span><span class="nx">m</span><span class="p">)).</span><span class="nx">Methods</span><span class="p">(</span><span class="s">&quot;PUT&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="nx">http</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/person/&quot;</span><span class="p">,</span> <span class="nx">requireLogin</span><span class="p">(</span><span class="nx">pr</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>NB: I found that trailing slashes are important and the rules on when
they are required are a bit confusing.</p>

<p>There are many other router/mux implementations out there, the beauty
of not buying into any kind of a framework is that we can choose the
one that works best for us or write our own (they are not difficult
to implement).</p>

<h3 id="asset-handling">Asset Handling</h3>

<p>One of the neatest things about Go is that a compiled program is a
single binary not a big pile of files like it is with most scripting
languages and even compiled ones. But if our program relies on assets
(JS, CSS, image and other files), we would need to copy those over to
the server at deployment time.</p>

<p>There is a way we can preserve the “one binary” characteristic of
our program by including assets as part of the binary itself. For
that there is the <a href="https://github.com/jteeuwen/go-bindata/">go-bindata</a> project and its
nephew <a href="github.com/elazarl/go-bindata-assetfs">go-bindata-assetfs</a>.</p>

<p>Since packing assets into the binary is slightly beyond what
<code>go build</code> can accomplish, we will need some kind of a script to take care of it.
My personal preference is to use the tried and true <code>make</code>, and it
is not uncommon to see Go projects come with a <code>Makefile</code>.</p>

<p>Here is a relevant example Makefile rule</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">ASSETS_DIR</span> <span class="o">=</span> <span class="s2">&quot;assets&quot;</span>
</span><span class="line">build:
</span><span class="line">	@export <span class="nv">GOPATH</span><span class="o">=</span><span class="nv">$$</span><span class="o">{</span>GOPATH-~/go<span class="o">}</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class="line">	go get github.com/jteeuwen/go-bindata/... github.com/elazarl/go-bindata-assetfs/... <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class="line">	<span class="nv">$$</span>GOPATH/bin/go-bindata -o bindata.go -tags builtinassets <span class="k">${</span><span class="nv">ASSETS_DIR</span><span class="k">}</span>/... <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class="line">	go build -tags builtinassets -ldflags <span class="s2">&quot;-X main.builtinAssets=${ASSETS_DIR}&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above rule creates a <code>bindata.go</code> file which will be placed in the
same directory where <code>main.go</code> is and becomes part of package
<code>main</code>. <code>main.go</code> will somehow know that assets are built-in and this
is accomplished via an <code>-ldflags "-X main.builtinAssets=${ASSETS_DIR}"</code> trick,
which is a way to assign values to variables at compile time. This means
that our code can now check for the value of <code>builtinAssets</code> to decide
what to do, e.g.:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="go"><span class="line">	<span class="k">if</span> <span class="nx">builtinAssets</span> <span class="o">!=</span> <span class="s">&quot;&quot;</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Running with builtin assets.&quot;</span><span class="p">)</span>
</span><span class="line">		<span class="nx">cfg</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">Assets</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">assetfs</span><span class="p">.</span><span class="nx">AssetFS</span><span class="p">{</span><span class="nx">Asset</span><span class="p">:</span> <span class="nx">Asset</span><span class="p">,</span> <span class="nx">AssetDir</span><span class="p">:</span> <span class="nx">AssetDir</span><span class="p">,</span> <span class="nx">AssetInfo</span><span class="p">:</span> <span class="nx">AssetInfo</span><span class="p">,</span> <span class="nx">Prefix</span><span class="p">:</span> <span class="nx">builtinAssets</span><span class="p">}</span>
</span><span class="line">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">		<span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Assets served from %q.&quot;</span><span class="p">,</span> <span class="nx">assetsPath</span><span class="p">)</span>
</span><span class="line">		<span class="nx">cfg</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">Assets</span> <span class="p">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Dir</span><span class="p">(</span><span class="nx">assetsPath</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The second important thing is that we are defining a
<a href="https://dave.cheney.net/2013/10/12/how-to-use-conditional-compilation-with-the-go-build-tool">build tag</a>
called <code>builtinassets</code>. We are also telling <code>go-bindata</code> about it, what this
means is “only compile me when builtinassets is set”, and this controls
under which circumstances <code>bindata.go</code> (which contains our assets as
Go code) is to actually be compiled.</p>

<h3 id="pre-transpilation-of-javascript">Pre-transpilation of JavaScript</h3>

<p>Last, but not the least, I want to briefly mention packing of web
assets. To describe it properly is enough material for a whole new
series of posts, and this would really have nothing to do with Go. But
I can at least list the following points.</p>

<ul>
  <li>
    <p>You might as well give in and install <a href="https://www.npmjs.com/">npm</a>,
and make a <code>package.json</code> file.</p>
  </li>
  <li>
    <p>Once npm is installed, it is trivial to install the Babel command-line
compiler, <code>babel-cli</code>, which is one way to transpile JavaScript.</p>
  </li>
  <li>
    <p>A more complicated, frustrating, but ultimately more flexible method
is to use <a href="https://webpack.github.io/">webpack</a>. Webpack will
pre-transpile and do things like combine all JS into a single
file as well as minimize it.</p>
  </li>
  <li>
    <p>I was surprised by how difficult it was to provide module import
functionality in JavaScript. The problem is that there is an ES6
standard for <code>import</code> and <code>export</code> keywords, but there is no
implementation, and even Babel assumes that something else
implements it for you. In the end I settled on
<a href="https://github.com/systemjs/systemjs">SystemJS</a>.  The complication
with SystemJS is that now in-browser Babel transpilation needs to be
something that SystemJS is aware of, so I had to use its Babel
plugin for that. Webpack in turn (I think?) provides its own module
support implementation, so SystemJS is not needed when assets are
packed. Anyhow, it was all rather frustrating.</p>
  </li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>I would say that in the set up I describe in this four part series Go
absolutely shines, while JavaScript not so much. But once I got over
the initial hurdle of getting it all to work, React/JSX was easy and
perhaps even pleasant to work with.</p>

<p>That’s it for now, hope you find this useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tgres 0.10.0b - Time Series with Go and PostgreSQL]]></title>
    <link href="http://grisha.org/blog/2017/03/22/tgres-0-dot-10-dot-0b-time-series-with-go-and-postgresql/"/>
    <updated>2017-03-22T13:52:00-04:00</updated>
    <id>http://grisha.org/blog/2017/03/22/tgres-0-dot-10-dot-0b-time-series-with-go-and-postgresql</id>
    <content type="html"><![CDATA[<p>After nearly two years of hacking, I am tagging this version of
<a href="https://github.com/tgres/tgres">Tgres</a>
as beta. It is functional and stable enough for people to try out and
not feel like they are wasting their time. There is still a lot that
could and should be improved, but at this point the most
important thing is to get more people to check it out.</p>

<h3 id="what-is-tgres">What is Tgres?</h3>

<p>Tgres is a <a href="https://golang.org">Go</a> program which can receive time
series data via <a href="https://graphiteapp.org/">Graphite</a>, <a href="https://github.com/etsy/statsd/wiki">Statsd</a>
protocols or an http <a href="https://godoc.org/github.com/tgres/tgres/http#PixelHandler">pixel</a>, store it
in <a href="https://www.postgresql.org/">PostgreSQL</a>, and provide Graphite-like access to the data
in a way that is compatible with tools such as <a href="https://grafana.com/">Grafana</a>. You could think of it as a
drop-in Graphite/Statsd replacement, though I’d rather avoid direct
comparison, because the key feature of Tgres is that data is stored in
PostgreSQL.</p>

<p><a href="http://grisha.org/blog/2017/02/28/tgres-load-testing-follow-up/"><img src="http://grisha.org/images/tgres_load_head_01.png" /></a></p>

<h3 id="why-postgresql">Why PostgreSQL?</h3>

<p>The “grand vision” for Tgres begins with the database. Relational
databases have the most man-decades of any storage type invested into
them, and PostgreSQL is probably the most advanced implementation
presently in existence.</p>

<p>If you search for “relational databases and time series” (or
some variation thereupon), you will come across the whole gamut of
opinions (if not convictions) varying so widely it is but
discouraging. This is because time series storage, while simple at
first glance, is actually fraught with subtleties and ambiguities that
can drive even the most patient of us up the wall.</p>

<h3 id="avoid-solving-the-storage-problem">Avoid Solving the Storage Problem.</h3>

<p>Someone once said that “anything is possible when you don’t know what
you’re talking about”, and nowhere is it more evident than in data
storage. File systems and relational databases trace their origin back
to the late 1960s and over half a century later I doubt that
any field experts would say “the storage problem is solved”. And so it seems
almost foolish to suppose that by throwing together a key-value store and a
concensus algorithm or some such it is possible to come up with
something <em>better</em>? Instead of re-inventing storage, why not focus on
how to structure the data in a way that is compatible with a
storage implementation that we know works and scales reliably?</p>

<p>As part of the Tgres project, I thought it’d be interesting to get to
the bottom of this. If not bottom, then at least deeper than most
people dare to dive. I am not a mathematician or a statistician, nor
am I a data scientist, whatever that means, but I think I understand
enough about the various subjects involved, including programming,
that I can come up with something more than just another off-the-cuff
opinion.</p>

<p>And so now I think I can conclude definitively that time
series data can be stored in a relational database very efficently, PostgreSQL in
particular for its support for
<a href="https://www.postgresql.org/docs/current/static/arrays.html">arrays</a>.
The general approach I described in a series of blogs starting with
<a href="http://grisha.org/blog/2015/09/23/storing-time-series-in-postgresql-efficiently/">this one</a>,
Tgres uses the technique described in the
<a href="http://grisha.org/blog/2017/01/21/storing-time-seris-in-postgresql-optimize-for-write/">last one</a>.
In my <a href="http://grisha.org/blog/2017/02/28/tgres-load-testing-follow-up/">performance tests</a>
the Tgres/Postgres combination was so efficient it was possibly
outperforming its time-series <a href="http://obfuscurity.com/2016/09/Benchmarking-Graphite-master-on-AWS">siblings</a>.</p>

<p>The good news is that as a user you don’t need to think about the
complexities of the data layout, Tgres takes care of it. Still I very
much wish people would take more time to think about how to organize
data in a tried and true solution like PostgreSQL before jumping ship
into the murky waters of the “noSQL” ocean, lured by alternative
storage sirens, big on promise but shy on delivery, only to drown
where no one could come to the rescue.</p>

<h3 id="how-else-is-tgres-different">How else is Tgres different?</h3>

<p>Tgres is a single program, a single binary which does everything
(one of my favorite things about Go). It supports all of Graphite
and Statsd protocols without having to run separate
processes, there are no dependencies of any kind other than a PostgreSQL
database. No need for Python, Node or a JVM, just the binary, the
<a href="https://github.com/tgres/tgres/blob/v0.10.0b/etc/tgres.conf.sample">config file</a>
and access to a database.</p>

<p>And since the data is stored in Postgres, virtually all of the
features of Postgres are available: from being able to query
the data using real SQL with all the latest features, to replication,
security, performance, back-ups and whatever else Postgres
offers.</p>

<p>Another benefit of data being in a database is that it can be
accessible to any application frameworks in Python, Ruby or whatever
other language as just another database table. For example in Rails it
might be as trivial as <code>class Tv &lt; ActiveRecord::Base; end</code> et voilà,
you have the data points as a model.</p>

<p>It should also be mentioned that Tgres requires no PostgreSQL
extensions. This is because optimizing by implementing a custom
extension which circumvents the PostgreSQL natural way of handling
data means we are solving the storage problem again. PostgreSQL
storage is not broken to begin with, no customization is necessary to
handle time series.</p>

<p>In addition to being a standalone program, Tgres packages aim to be useful on their own
as part of any other Go program. For example it is very easy to equip a Go application with Graphite
capabilities by providing it access to a database and using the
provided http
<a href="https://godoc.org/github.com/tgres/tgres/http#GraphiteRenderHandler">handler</a>. This
also means that you can use a separate Tgres instance dedicated to querying data
(perhaps from a downstream Potgres slave).</p>

<h3 id="some-internals-overview">Some Internals Overview</h3>

<p>Internally, Tgres series identification is tag-based. The series are
identified by a <a href="https://www.postgresql.org/docs/current/static/datatype-json.html">JSONB</a>
field which is a set of key/value pairs indexed using a
<a href="https://www.postgresql.org/docs/current/static/gin-intro.html">GIN index</a>.
In Go, the JSONB field becomes a
<a href="https://godoc.org/github.com/tgres/tgres/serde#Ident">serde.Ident</a>.
Since the “outside” interface Tgres is presently mimicking is Graphite,
which uses dot-separated series identifiers, all idents are made of just one tag
“name”, but this will change as we expand the DSL.</p>

<p>Tgres stores data in evenly-spaced series. The conversion from the
data as it comes in to its evenly-spaced form happens on-the-fly,
using a <a href="http://grisha.org/blog/2016/08/04/data-points/">weighted mean</a> method, and
the resulting stored rate is actually correct. This is similar to how
<a href="http://oss.oetiker.ch/rrdtool/">RRDTool</a> does it, but different from
many other tools which simply discard all points except for last in the same
series slot as I explained in <a href="http://grisha.org/blog/2015/05/04/recording-time-series/">this post</a>.</p>

<p>Tgres maintains a (configurable) number of Round-Robin Archives (RRAs)
of varying length and resolution for each series, this is an approach
similar to RRDTool and Graphite Whisper as well. The conversion to
evenly-spaced series happens in the
<a href="https://godoc.org/github.com/tgres/tgres/rrd">rrd</a> package.</p>

<p>Tgres does not store the original (unevenly spaced) data points. The
rationale behind this is that for analytical value you always
inevitably have to convert an uneven series to a regular one. The
problem of storing the original data points is not a time-seires
problem, the main challenge there is the ability to keep up with a
massive influx of data, and this is what Hadoop, Cassandra, S3,
BigQuery, etc are excellent at.</p>

<p>While Tgres code implements most of the <a href="http://graphite.readthedocs.io/en/latest/functions.html">Graphite functions</a>,
complete compatibility with the Graphite DSL is not a goal, and some
functions will probably left uniplemented. In my opinion the Graphite
DSL has a number of shortcomings by design. For example, the series names are not
strings but are syntactically identifiers, i.e. there is no
difference between <code>scale(foo.bar, 10)</code> and <code>scale("foo.bar", 10)</code>,
which is problematic in more than one way. The dot-names are
ingrained into the DSL, and lots of functions take arguments denoting
position within the dot-names, but they seem unnecessary. For
example there is <code>averageSeriesWithWildcards</code> and
<code>sumSeriesWithWildcards</code>, while it would be cleaner to have some kind
of a <code>wildcard()</code> function which can be passed into <code>average()</code> or
<code>sum()</code>. Another example is that Graphite does not support chaining (but Tgres already
does), e.g. <code>scale(average("foo.*"), 10)</code> might be better as
<code>average("foo.*").scale(10)</code>. There are many more similar small
grievances I have with the DSL, and in the end I think that the DSL ought to be
revamped to be more like a real language (or perhaps just be a
language, e.g. Go itself), exactly how hasn’t been crystalized just
yet.</p>

<p>Tgres also aims to be a useful time-series processing Golang package
(or a set of packages). This means that in Go the code also needs to
be clean and readable, and that there ought to be a conceptual
correspondence between the DSL and how one might to something at the
lower level in Go. Again, the vision here is still blurry, and more
thinking is required.</p>

<p>For Statsd functionality, the network protocol is supported by the
<a href="https://godoc.org/github.com/tgres/tgres/statsd">tgres/statsd</a>
package while the aggregation is done by the
<a href="https://godoc.org/github.com/tgres/tgres/aggregator">tgres/aggregator</a>. In
addition, there is also support for “paced metrics” which let you
aggregate data <em>before</em> it is passed on to the Tgres receiver and
becomes a data point, which is useful in situations where you have
some kind of an iteration that would otherwise generate millions of
measurements per second.</p>

<p>The finest resolution for Tgres is a millisecond. Nanoseconds seems
too small to be practical, though it shouldn’t be too hard to change
it, as internally Tgres uses native Go types for time and duration -
the milliseconds are the integers in the database.</p>

<p>When the Data points are received via the network, the job of parsing the
network stuff is done by the code in the <a href="https://godoc.org/github.com/tgres/tgres/daemon">tgres/daemon</a>
package with some help from <a href="https://godoc.org/github.com/tgres/tgres/http">tgres/http</a>
and <a href="https://godoc.org/github.com/tgres/tgres/statsd">tgres/statsd</a>, as well as
potentially others (e.g. Python pickle decoding).</p>

<p>Once received and correctly parsed, they are passed on to the
<a href="https://godoc.org/github.com/tgres/tgres/receiver">tgres/receiver</a>. The
receiver’s job is to check whether this series ident is known to us
by checking the cache or that it needs to be loaded from the
database or created. Once the appropriate series is found, the
receiver updates the in-memory cache of the
<a href="https://godoc.org/github.com/tgres/tgres/rrd#RoundRobinArchive">RRAs</a>
for the series (which causes the data points to be evenly spaced) as well as
periodically flushes data points to the data base. The
receiver also controls the <a href="https://godoc.org/github.com/tgres/tgres/aggregator">aggregator</a>
of statsd metrics.</p>

<p>The database interface code is in the <a href="https://godoc.org/github.com/tgres/tgres/serde">tgres/serde</a>
package which supports PostgreSQL or an in-memory database (useful
in situations where persistence is not required or during testing).</p>

<p>When Tgres is queried for data, it loads it from the database
into a variety of implementations of the Series interface in the
<a href="https://godoc.org/github.com/tgres/tgres/series">tgres/series</a> package
as controlled by the <a href="https://godoc.org/github.com/tgres/tgres/dsl">tgres/dsl</a>
responsible for figuring out what is asked of it in the query.</p>

<p>In addition to all of the above, Tgres supports clustering, though this is
highly experimental at this point. The idea
is that a cluster of Tgres instances (all backed by the same database,
at least for now) would split the series amongst themselves and
forward data points to the node which is responsible for a particular
series. The nodes are placed behind a load-balancer of some kind, and
with this set up nodes can go in and out of the cluster without any
overall downtime for maximum availability. The clustering logic lives in
<a href="https://godoc.org/github.com/tgres/tgres/cluster">tgres/cluster</a>.</p>

<p>This is an overly simplistic overview which hopefully conveys that
there are a lot of pieces to Tgres.</p>

<h2 id="future">Future</h2>

<p>In addition to a new/better DSL, there are lots of interesting ideas,
and if you have any please chime in on Github.</p>

<p>One thing that is missing in the telemetry world is encryption,
authentication and access control so that tools like Tgres could be
used to store health data securely.</p>

<p>A useful feature might be interoperability with big data tools to
store the original data points and perhaps provide means for pulling
them out of BigQuery or whatever and replay them into series - this
way we could change the resolution to anything at will.</p>

<p>Or little details like a series alias - so that a series could be
renamed. The way this would work is you rename a series while keeping
its old ident as an alias, then take your time to make sure all the
agents send data under the new name, at which point the alias can go
away.</p>

<p>Lots can also be done on the scalability front with improved
clustering, sharding, etc.</p>

<h2 id="we-could-use-your-help">We Could Use Your Help</h2>

<p>Last but not least, this is an Open Source project. It works best when
people who share the vision also contribute to the project, and this
is where you come in. If you’re interested in learning more about time
series and databases, please check it out and feel free to contribute
in any way you can!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tgres Load Testing Follow Up]]></title>
    <link href="http://grisha.org/blog/2017/02/28/tgres-load-testing-follow-up/"/>
    <updated>2017-02-28T21:40:00-05:00</updated>
    <id>http://grisha.org/blog/2017/02/28/tgres-load-testing-follow-up</id>
    <content type="html"><![CDATA[<p>To follow up on the <a href="http://grisha.org/blog/2017/02/23/can-tgres-outperform-graphite/">previous post</a>,
after a bunch
of tweaking, here is Tgres (<a href="https://github.com/tgres/tgres/commit/90924e4afa4ac8bef61caf46c3439794983660ec">commit</a>) receiving over 150,000 data points per
second across 500,000 time series without any signs of the queue size
or any other resource blowing up.</p>

<p>This is both Tgres and Postgres running on the same i2.2xlarge EC2 instance (8 cores, 64GB, SSD).</p>

<p><img src="http://grisha.org/images/tgres_aws1_150k.png" /></p>

<p>At this point I think there’s been enough load testing and optimization, and I am
going to get back to crossing the t’s and dotting the i’s so that we can release
the first version of Tgres.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQL vs Whisper, which is Faster?]]></title>
    <link href="http://grisha.org/blog/2017/02/23/can-tgres-outperform-graphite/"/>
    <updated>2017-02-23T09:49:00-05:00</updated>
    <id>http://grisha.org/blog/2017/02/23/can-tgres-outperform-graphite</id>
    <content type="html"><![CDATA[<p>Note: there is an <a href="http://grisha.org/blog/2017/02/28/tgres-load-testing-follow-up/">update</a> to this post.</p>

<h2 id="tldr">TL;DR</h2>

<p>On a 8 CPU / 16 GB EC2 instance,
<a href="https://github.com/tgres/tgres">Tgres</a> can process 150,000 data
points per second across 300,000 series (Postgres running on the same
machine). With some tweaks we were able to get the number of series to
half a million, flushing ~60K data points per second.</p>

<h2 id="now-the-long-version">Now the long version…</h2>

<p>If you were to ask me whether Tgres could outperform Graphite, just a
couple of months ago my answer would have been “No”. Tgres uses
Postgres to store time series data, while Graphite stores data by
writing to files directly, the overhead of the relational database
just seemed too great.</p>

<p>Well, I think I’ve managed to prove myself wrong. After re-working
Tgres to use the
<a href="http://grisha.org/blog/2017/01/21/storing-time-seris-in-postgresql-optimize-for-write/">write-optimized layout</a>,
I’ve run some tests on AWS yielding unexpectedly promising results.</p>

<p>As a benchmark I targeted the excellent <a href="http://obfuscurity.com/2016/08/Benchmarking-Carbon-and-Whisper-on-AWS">blog post</a>
by Jason Dixon describing his AWS Graphite test. My goal was to get to at least half the
level of performance described therein. But it appears the combination of Go, Postgres and some
clever data structuring has been able to beat it, not without breaking
a little sweat, but it has.</p>

<p>My test was conducted on a
<a href="https://aws.amazon.com/ec2/instance-types/">c4.2xlarge</a> instance,
which has 8 cores and 16 GB, using 100GB EBS (which, if I understood it
correctly, comes with 300 IOPS, please comment if I’m wrong). The “c4”
instances are supposed to be some of the highest speed CPU AWS has to
offer, but compare this with the instance used in the Graphite test,
an i2.4xlarge (16 CPU/ 122GB), it had half the CPU cores and nearly
one tenth of the RAM.</p>

<p>Before I go any further, here is the obligatory screenshot, then my
observations and lessons learned in the process, as well as a
screenshot depicting even better performance.</p>

<p><img src="http://grisha.org/images/tgres_aws1.png" /></p>

<p>The Tgres version running was <a href="https://github.com/tgres/tgres/tree/1c57cba3fe4cdb0b96bf5054cfd01cb2a41e2bba">this one</a>,
with the config detailed at the bottom of the post.</p>

<p>Postgres was whatever <code>yum install postgresql95-server</code> brings your
way, with the <code>data</code> directory moved to the EBS volume formatted using
ext4 (not that I think it matters). The Postgres config was modified to
allow a 100ms commit delay and to make autovacuum extra aggressive. I
did not increase any memory buffers and left everything else as
is. Specifically, these were the changes:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">autovacuum_work_mem = -1
</span><span class="line">synchronous_commit = off
</span><span class="line">commit_delay = 100000
</span><span class="line">autovacuum_max_workers = 10
</span><span class="line">autovacuum_naptime = 1s
</span><span class="line">autovacuum_vacuum_threshold = 2000
</span><span class="line">autovacuum_vacuum_scale_factor = 0.0
</span><span class="line">autovacuum_vacuum_cost_delay = 0</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The data points for the test were generated by a <a href="https://github.com/tgres/tgres/blob/06a9f5805a934c304b11f44a32792414ceafe6f0/blaster/blaster.go#L55">goroutine</a>
in the Tgres process itself. In the past I’ve found that blasting a server
with this many UDP packets can be tricky and hardware/network
intensive. It’s also hard to tell when/if they get dropped and why,
etc. Since Go is not known for having problems in its network stack, I
was not too worried about it, I just wanted a reliable and
configurable source of incoming packets, and in Go world writing a
simple goroutine seemed like the right answer.</p>

<h2 id="somewhat-random-notes-and-making-tgres-even-faster">Somewhat Random Notes and Making Tgres Even Faster</h2>

<h3 id="determining-failure">Determining failure</h3>

<p>Determining when we are “at capacity” is tricky. I’ve mostly looked at
two factors (aside from the obvious - running out of memory/disk,
becoming unresponsive, etc): receiver queue size
and Postgres <a href="https://www.keithf4.com/checking-for-postgresql-bloat/">table bloat</a>.</p>

<h4 id="queue-size">Queue size</h4>

<p>Tgres uses “elastic channels” (so eloquently
<a href="https://github.com/npat-efault/musings/wiki/Elastic-channels">described here</a> by Nick Patavalis)
for incoming data points and to load series from Postgres.  These are
channel-like structures that can grow to arbitrary length only limited
by the memory available. This is done so as to be able to take maximum
advantage of the hardware at hand. If any of those queues starts
growing out of control, we are failing. You can see in the picture
that at about 140K data points per second the receiver queue started
growing, though it did stay steady at this size and never spun out of
control (the actual test was left overnight at this rate just to make
sure).</p>

<h4 id="pg-table-bloat">PG Table Bloat</h4>

<p>Table bloat is a phenomenon affecting Postgres in write-intensive
situations because of its adherence to the <a href="https://en.wikipedia.org/wiki/Multiversion_concurrency_control">MVCC</a>.
It basically means that pages on disk are being updated faster than the autovacuum
process can keep up with them and the table starts growing out of
control.</p>

<p>To monitor for table bloat, I used a simple formula which determined
the approximate size of the table based on the row count (our data is
all floats, which makes it very predictable) and compared it with the
actual size. If the actual size exceeded the estimated size, that’s
considered bloat. Bloat is reported in the “TS Table Size” chart. A
little bloat is fine, and you can see that it stayed in fairly low
percent throughout the test.</p>

<p>In the end, though more research is warranted, it may just turn out
that contrary to every expectation PostgreSQL was <em>not</em> the limiting
factor here. The <code>postmaster</code> processes stayed below 170MB RSS, which
is absolutely remarkable, and Grafana refreshes were very quick even
at peak loads.</p>

<h4 id="memory-consumption">Memory consumption</h4>

<p>Tgres has a slight limitation in that creating a series is
expensive. It needs to check with Postgres and for reasons I don’t
want to bore you with it’s always a SELECT, optionally followed by an
“UPSERT”. This takes time, and during the ramp-up period when the
number of series is growing fast and lots of them need to be created,
the Go runtime ends up consuming a lot of memory. You can see that
screenshot image reports 4.69GB. If I were to restart Tgres (which
would cause all existing DS names to be pre-cached) its memory
footprint stayed at about 1.7GB. More work needs to be done to figure
out what accounts for the difference.</p>

<h4 id="data-point-rate-and-number-of-series">Data Point Rate and Number of Series</h4>

<p>The rate of data points that need to be saved to disk is a function of
the number of series and the resolution of the RRAs. To illustrate, if
I have one series at 1 point per second, even if I blast a million
data points per second, still only 1 data point per second needs to be
saved.</p>

<p>There is an important difference between Graphite and Tgres in that
Tgres actually adjusts the final value considering the every data
point value using weighted mean, while Graphite just ignores all
points but the last. So Tgres does a bit more work, which adds up
quickly at 6-figure rates per second.</p>

<p>The Graphite test if I read the chart correctly was able to process
~70K data points per second across 300K series. My test had 300K
series and data points were coming in at over 150K/s. But just out of
curiosity, I tried to push it to its limit.</p>

<p>At 400 series, you can see clear signs of deterioration. You can see
how vcache isn’t flushed fast enough leaving gaps at the end of
series. If we stop the data blast, it does eventually catch up,
so long as there is memory for the cache.</p>

<p><img src="http://grisha.org/images/tgres_aws1_det.png" /></p>

<p>If you don’t catch this condition in time, Tgres will die with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">fatal error: runtime: out of memory
</span><span class="line">
</span><span class="line">runtime stack:
</span><span class="line">runtime.throw<span class="o">(</span>0xa33e5a, 0x16<span class="o">)</span>
</span><span class="line">        /home/grisha/.gvm/gos/go1.8/src/runtime/panic.go:596 +0x95
</span><span class="line">...
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="segment-width">Segment Width</h3>

<p>There is still one easy performance card we can play here. Segment
width is how many data points are stored in one row, it is also the
limit on how many points we can transfer in a single SQL operation.
Segment width by default is 200, because a width higher than that
causes rows to exceed a page and trigger
<a href="https://www.postgresql.org/docs/current/static/storage-toast.html">TOAST</a>.
TOAST can be good or bad because it means data is stored in a separate table
(not so good), but it also means it’s compressed, which may be an I/O
win.</p>

<h4 id="so-what-would-happen-if-we-set-the-segment-width-to-1000">So what would happen if we set the segment width to 1000?</h4>

<p>The picture changes significantly (see below). I was able to get the
number of series to 500K, note the whopping 52,602 data points being
written to the database per second! You can see we’re pushing it to
the limit because the receiver queue is beginning to grow. I <em>really</em>
wanted to get the rate up to 150K/sec, but it just didn’t want to go
there.</p>

<p><img src="http://grisha.org/images/tgres_aws1_1k.png" /></p>

<h4 id="and-what-would-happen-if-we-set-the-segment-width-to-4096">And what would happen if we set the segment width to 4096?</h4>

<p>Interestingly, the memory footprint is a tad larger while the vcache
is leaner, the number of data points flushed per second is about same,
though in fewer SQL statements, and the overall picture is about the
same and the incoming queue still skyrockets at just about 100K/sec
over 500K series.</p>

<p><img src="http://grisha.org/images/tgres_aws1_4k.png" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>There is plenty of places in Tgres code that could still be
optimized.</p>

<p>One issue that would be worth looking into is exposing Tgres to the
firehose on an empty database. The current code runs out of memory in
under a minute when suddenly exposed to 300K new series at
150K/s. Probably the simplest solution to this would be to somehow
detect that we’ve unable to keep up and start dropping data
points. Eventually, when all the series are created and cached,
performance should even out after the initial spike and all should be
well.</p>

<p>In any event, it’s nice to be able to do something like this and know
that it is performant as well:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="n">tgres</span><span class="o">=&gt;</span> <span class="k">select</span> <span class="n">t</span><span class="p">,</span> <span class="n">r</span> <span class="k">from</span> <span class="n">ds</span>
</span><span class="line"> <span class="k">join</span> <span class="n">tv</span>  <span class="k">on</span> <span class="n">tv</span><span class="p">.</span><span class="n">ds_id</span> <span class="o">=</span> <span class="n">ds</span><span class="p">.</span><span class="n">id</span>
</span><span class="line"><span class="k">where</span> <span class="n">ident</span> <span class="o">@&gt;</span> <span class="s1">&#39;{&quot;name&quot;:&quot;tgres.0_0_0_0.runtime.load.five&quot;}&#39;</span>
</span><span class="line">  <span class="k">and</span> <span class="n">tv</span><span class="p">.</span><span class="n">step_ms</span> <span class="o">=</span> <span class="mi">10000</span>
</span><span class="line"><span class="k">order</span> <span class="k">by</span> <span class="n">t</span> <span class="k">desc</span>
</span><span class="line"><span class="k">limit</span> <span class="mi">5</span><span class="p">;</span>
</span><span class="line">           <span class="n">t</span>            <span class="o">|</span>       <span class="n">r</span>
</span><span class="line"><span class="c1">------------------------+----------------</span>
</span><span class="line"> <span class="mi">2017</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">23</span> <span class="mi">22</span><span class="p">:</span><span class="mi">31</span><span class="p">:</span><span class="mi">50</span><span class="o">+</span><span class="mi">00</span> <span class="o">|</span> <span class="mi">1</span><span class="p">.</span><span class="mi">256833462648</span>
</span><span class="line"> <span class="mi">2017</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">23</span> <span class="mi">22</span><span class="p">:</span><span class="mi">26</span><span class="p">:</span><span class="mi">30</span><span class="o">+</span><span class="mi">00</span> <span class="o">|</span> <span class="mi">1</span><span class="p">.</span><span class="mi">305209492142</span>
</span><span class="line"> <span class="mi">2017</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">23</span> <span class="mi">22</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">10</span><span class="o">+</span><span class="mi">00</span> <span class="o">|</span> <span class="mi">1</span><span class="p">.</span><span class="mi">554056287975</span>
</span><span class="line"> <span class="mi">2017</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">23</span> <span class="mi">22</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">00</span><span class="o">+</span><span class="mi">00</span> <span class="o">|</span> <span class="mi">1</span><span class="p">.</span><span class="mi">453365774931</span>
</span><span class="line"> <span class="mi">2017</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">23</span> <span class="mi">22</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mi">50</span><span class="o">+</span><span class="mi">00</span> <span class="o">|</span> <span class="mi">1</span><span class="p">.</span><span class="mi">380504724386</span>
</span><span class="line"><span class="p">(</span><span class="mi">5</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="reference">Reference</h2>

<p>For completness sake, the instance was created using Terraform config
approximately like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">variable</span> <span class="s">&quot;aws_region&quot;</span> <span class="p">{</span> <span class="k">default</span> <span class="p">=</span> <span class="s">&quot;us-east-1&quot;</span> <span class="p">}</span>
</span><span class="line"><span class="nx">variable</span> <span class="s">&quot;aws_zone&quot;</span> <span class="p">{</span> <span class="k">default</span> <span class="p">=</span> <span class="s">&quot;us-east-1a&quot;</span> <span class="p">}</span>
</span><span class="line"><span class="nx">variable</span> <span class="s">&quot;key_name&quot;</span> <span class="p">{</span> <span class="k">default</span> <span class="p">=</span> <span class="s">&quot;REDACTED&quot;</span>
</span><span class="line">
</span><span class="line"><span class="nx">provider</span> <span class="s">&quot;aws&quot;</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">region</span> <span class="p">=</span> <span class="s">&quot;${var.aws_region}&quot;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">resource</span> <span class="s">&quot;aws_ebs_volume&quot;</span> <span class="s">&quot;ebs_volume&quot;</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">availability_zone</span> <span class="p">=</span> <span class="s">&quot;${var.aws_zone}&quot;</span>
</span><span class="line">  <span class="nx">size</span> <span class="p">=</span> <span class="mi">100</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">resource</span> <span class="s">&quot;aws_volume_attachment&quot;</span> <span class="s">&quot;ebs_att&quot;</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">device_name</span> <span class="p">=</span> <span class="s">&quot;/dev/sdh&quot;</span>
</span><span class="line">  <span class="nx">volume_id</span> <span class="p">=</span> <span class="s">&quot;${aws_ebs_volume.ebs_volume.id}&quot;</span>
</span><span class="line">  <span class="nx">instance_id</span> <span class="p">=</span> <span class="s">&quot;${aws_instance.tgres-test-tmp.id}&quot;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">resource</span> <span class="s">&quot;aws_instance&quot;</span> <span class="s">&quot;tgres-test-tmp&quot;</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">ami</span> <span class="p">=</span> <span class="s">&quot;ami-0b33d91d&quot;</span>
</span><span class="line">  <span class="nx">instance_type</span> <span class="p">=</span> <span class="s">&quot;c4.2xlarge&quot;</span>
</span><span class="line">  <span class="nx">subnet_id</span> <span class="p">=</span> <span class="s">&quot;REDACTED&quot;</span>
</span><span class="line">  <span class="nx">vpc_security_group_ids</span> <span class="p">=</span> <span class="p">[</span>
</span><span class="line">    <span class="s">&quot;REDACTED&quot;</span>
</span><span class="line">  <span class="p">]</span>
</span><span class="line">  <span class="nx">associate_public_ip_address</span> <span class="p">=</span> <span class="kc">true</span>
</span><span class="line">  <span class="nx">key_name</span> <span class="p">=</span> <span class="s">&quot;${var.key_name}&quot;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And then the following commands were used to prime everyting:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo mke2fs /dev/sdh
</span><span class="line">sudo mkdir /ebs
</span><span class="line">sudo mount /dev/sdh /ebs
</span><span class="line">
</span><span class="line">sudo yum install -y postgresql95-server
</span><span class="line">sudo service postgresql95 initdb
</span><span class="line">sudo mkdir /ebs/pg
</span><span class="line">sudo mv /var/lib/pgsql95/data /ebs/pg/data
</span><span class="line">sudo ln -s /ebs/pg/data /var/lib/pgsql95/data
</span><span class="line">
</span><span class="line">sudo vi /var/lib/pgsql95/data/postgresql.conf
</span><span class="line"><span class="c"># BEGIN postgres config - paste this somewhere in the file</span>
</span><span class="line"><span class="nv">autovacuum_work_mem</span> <span class="o">=</span> -1
</span><span class="line"><span class="nv">synchronous_commit</span> <span class="o">=</span> off
</span><span class="line"><span class="nv">commit_delay</span> <span class="o">=</span> 100000
</span><span class="line"><span class="nv">autovacuum_max_workers</span> <span class="o">=</span> 10
</span><span class="line"><span class="nv">autovacuum_naptime</span> <span class="o">=</span> 1s
</span><span class="line"><span class="nv">autovacuum_vacuum_threshold</span> <span class="o">=</span> 2000
</span><span class="line"><span class="nv">autovacuum_vacuum_scale_factor</span> <span class="o">=</span> 0.0
</span><span class="line"><span class="nv">autovacuum_vacuum_cost_delay</span> <span class="o">=</span> 0
</span><span class="line"><span class="c"># END postgres config</span>
</span><span class="line">
</span><span class="line">sudo service postgresql95 restart
</span><span class="line">
</span><span class="line"><span class="c"># create PG database</span>
</span><span class="line">
</span><span class="line">sudo su - postgres
</span><span class="line">createuser -s ec2-user   <span class="c"># note -s is superuser - not necessary for tgres but just in case</span>
</span><span class="line">createdb tgres
</span><span class="line"><span class="nb">exit</span>
</span><span class="line">
</span><span class="line"><span class="c"># Tgres (requires Go - I used 1.8)</span>
</span><span class="line"><span class="c"># (or you can just scp it from some machine where you already have go environment)</span>
</span><span class="line">mkdir golang
</span><span class="line"><span class="nb">export </span><span class="nv">GOPATH</span><span class="o">=</span>~/golang/
</span><span class="line">go get github.com/tgres/tgres
</span><span class="line"><span class="nb">cd</span> /home/ec2-user/golang/src/github.com/tgres/tgres
</span><span class="line">go build
</span><span class="line">cp etc/tgres.conf.sample etc/tgres.conf
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>tgres.conf</code> file looked like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">min-step                <span class="o">=</span> <span class="s2">&quot;10s&quot;</span>
</span><span class="line">
</span><span class="line">pid-file <span class="o">=</span>                 <span class="s2">&quot;tgres.pid&quot;</span>
</span><span class="line">log-file <span class="o">=</span>                 <span class="s2">&quot;log/tgres.log&quot;</span>
</span><span class="line">log-cycle-interval <span class="o">=</span>       <span class="s2">&quot;24h&quot;</span>
</span><span class="line">
</span><span class="line">max-flushes-per-second      <span class="o">=</span> 1000000 <span class="c"># NB - Deprecated setting</span>
</span><span class="line"><span class="nv">workers</span>                     <span class="o">=</span> 4       <span class="c"># NB - Deprecated setting</span>
</span><span class="line">
</span><span class="line">http-listen-spec            <span class="o">=</span> <span class="s2">&quot;0.0.0.0:8888&quot;</span>
</span><span class="line">graphite-line-listen-spec   <span class="o">=</span> <span class="s2">&quot;0.0.0.0:2003&quot;</span>
</span><span class="line">graphite-text-listen-spec   <span class="o">=</span> <span class="s2">&quot;0.0.0.0:2003&quot;</span>
</span><span class="line">graphite-udp-listen-spec    <span class="o">=</span> <span class="s2">&quot;0.0.0.0:2003&quot;</span>
</span><span class="line">graphite-pickle-listen-spec <span class="o">=</span> <span class="s2">&quot;0.0.0.0:2004&quot;</span>
</span><span class="line">
</span><span class="line">statsd-text-listen-spec     <span class="o">=</span> <span class="s2">&quot;0.0.0.0:8125&quot;</span>
</span><span class="line">statsd-udp-listen-spec      <span class="o">=</span> <span class="s2">&quot;0.0.0.0:8125&quot;</span>
</span><span class="line">stat-flush-interval         <span class="o">=</span> <span class="s2">&quot;10s&quot;</span>
</span><span class="line">stats-name-prefix           <span class="o">=</span> <span class="s2">&quot;stats&quot;</span>
</span><span class="line">
</span><span class="line">db-connect-string <span class="o">=</span> <span class="s2">&quot;host=/tmp dbname=tgres sslmode=disable&quot;</span>
</span><span class="line">
</span><span class="line"><span class="o">[[</span>ds<span class="o">]]</span>
</span><span class="line"><span class="nv">regexp</span> <span class="o">=</span> <span class="s2">&quot;.*&quot;</span>
</span><span class="line"><span class="nv">step</span> <span class="o">=</span> <span class="s2">&quot;10s&quot;</span>
</span><span class="line"><span class="c">#heartbeat = &quot;2h&quot;</span>
</span><span class="line"><span class="nv">rras</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;10s:6h&quot;</span>, <span class="s2">&quot;1m:7d&quot;</span>, <span class="s2">&quot;1h:1y&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Tgres was running with the following. The <code>TGRES_BLASTER</code> starts the
blaster goroutine.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">TGRES_BIND</span><span class="o">=</span>0.0.0.0 <span class="nv">TGRES_BLASTER</span><span class="o">=</span>1 ./tgres
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once you have Tgres with the blaster running, you can control it via
HTTP, e.g. the following would set it to 50K/s data points across 100K
series. Setting rate to 0 pauses it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">curl -v <span class="s2">&quot;http://127.0.0.1:8888/blaster/set?rate=50000&amp;n=100000&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Storing Time Series in PostgreSQL - Optimize for Write]]></title>
    <link href="http://grisha.org/blog/2017/01/21/storing-time-seris-in-postgresql-optimize-for-write/"/>
    <updated>2017-01-21T09:33:00-05:00</updated>
    <id>http://grisha.org/blog/2017/01/21/storing-time-seris-in-postgresql-optimize-for-write</id>
    <content type="html"><![CDATA[<p>Continuing on the
<a href="http://grisha.org/blog/2016/12/16/storing-time-series-in-postgresql-part-ii/">previous</a>
write up on how time series data can be stored in Postgres
efficiently, here is another approach, this time providing for extreme
write performance.</p>

<p>The “horizontal” data structure in the last article requires an SQL
statement for every data point update. If you cache data points long
enough, you might be able to collect a bunch for a series and write
them out at once for a slight performance advantage. But there is no
way to update multiple series with a single statement, it’s always
at least one update per series. With a large number of series, this
can become a performance bottleneck. Can we do better?</p>

<p>One observation we can make about incoming time series data is that
commonly the data points are roughly from the same time period, the
current time, give or take. If we’re storing data at regularly-spaced
intervals, then it is extremely likely that many if not all of the
most current data points from various time series are going to belong
to the exact same time slot. Considering this observation, what if we
organized data points in rows of arrays, only now we would have a row
per timestamp while the position within the array would determine the
series?</p>

<p>Lets create the tables:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">rra_bundle</span> <span class="p">(</span>
</span><span class="line">  <span class="n">id</span> <span class="nb">SERIAL</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
</span><span class="line">  <span class="n">step_ms</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class="line">  <span class="n">steps_per_row</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class="line">  <span class="k">size</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class="line">  <span class="n">latest</span> <span class="n">TIMESTAMPTZ</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">rra</span> <span class="p">(</span>
</span><span class="line">  <span class="n">id</span> <span class="nb">SERIAL</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
</span><span class="line">  <span class="n">ds_id</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class="line">  <span class="n">rra_bundle_id</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class="line">  <span class="n">pos</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">ts</span> <span class="p">(</span>
</span><span class="line">  <span class="n">rra_bundle_id</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class="line">  <span class="n">i</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class="line">  <span class="n">dp</span> <span class="n">DOUBLE</span> <span class="k">PRECISION</span><span class="p">[]</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">DEFAULT</span> <span class="s1">&#39;{}&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notice how the step and size now become properties of the bundle
rather than the rra which now refers to a bundle. In the <code>ts</code> table,
<code>i</code> is the index in the round-robin archive (which in the previous
“horizontal” layout would be the array index).</p>

<p>The data we used before was a bunch of temperatures, lets add two more
series, one where temperature is 1 degree higher, and one where it’s 1
degree lower. (Not that it really matters).</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">rra_bundle</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">60000</span><span class="p">,</span> <span class="mi">1440</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="s1">&#39;2008-04-02 00:00:00-00&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">rra</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">rra</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">rra</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;{64,65,63}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;{67,68,66}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;{70,71,69}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;{71,72,70}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="s1">&#39;{72,73,71}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;{69,70,68}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;{67,68,66}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;{65,66,64}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="s1">&#39;{60,61,59}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="s1">&#39;{58,59,57}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;{59,60,58}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="s1">&#39;{62,63,61}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="s1">&#39;{68,69,67}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="s1">&#39;{70,71,69}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="s1">&#39;{71,72,70}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="s1">&#39;{72,73,71}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="s1">&#39;{77,78,76}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="s1">&#39;{70,71,69}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="s1">&#39;{71,72,70}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="s1">&#39;{73,74,72}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="s1">&#39;{75,76,74}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="s1">&#39;{79,80,78}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="s1">&#39;{82,83,81}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="s1">&#39;{90,91,89}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="s1">&#39;{69,70,68}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="s1">&#39;{75,76,74}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="s1">&#39;{80,81,79}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="s1">&#39;{81,82,80}&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notice that every INSERT adds data for all three of our series in a
single database operation!</p>

<p>Finally, let us create the view. (How it works is described in detail in the
<a href="http://grisha.org/blog/2016/12/16/storing-time-series-in-postgresql-part-ii/">previous article</a>)</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">CREATE</span> <span class="k">VIEW</span> <span class="n">tv</span> <span class="k">AS</span>
</span><span class="line">  <span class="k">SELECT</span> <span class="n">rra</span><span class="p">.</span><span class="n">id</span> <span class="k">as</span> <span class="n">rra_id</span><span class="p">,</span>
</span><span class="line">     <span class="n">rra_bundle</span><span class="p">.</span><span class="n">latest</span> <span class="o">-</span> <span class="nb">INTERVAL</span> <span class="s1">&#39;1 MILLISECOND&#39;</span> <span class="o">*</span> <span class="n">rra_bundle</span><span class="p">.</span><span class="n">step_ms</span> <span class="o">*</span> <span class="n">rra_bundle</span><span class="p">.</span><span class="n">steps_per_row</span> <span class="o">*</span>
</span><span class="line">       <span class="k">MOD</span><span class="p">(</span><span class="n">rra_bundle</span><span class="p">.</span><span class="k">size</span> <span class="o">+</span> <span class="k">MOD</span><span class="p">(</span><span class="k">EXTRACT</span><span class="p">(</span><span class="n">EPOCH</span> <span class="k">FROM</span> <span class="n">rra_bundle</span><span class="p">.</span><span class="n">latest</span><span class="p">)::</span><span class="nb">BIGINT</span><span class="o">*</span><span class="mi">1000</span><span class="o">/</span><span class="p">(</span><span class="n">rra_bundle</span><span class="p">.</span><span class="n">step_ms</span> <span class="o">*</span> <span class="n">rra_bundle</span><span class="p">.</span><span class="n">steps_per_row</span><span class="p">),</span>
</span><span class="line">       <span class="n">rra_bundle</span><span class="p">.</span><span class="k">size</span><span class="p">)</span> <span class="o">-</span> <span class="n">i</span><span class="p">,</span> <span class="n">rra_bundle</span><span class="p">.</span><span class="k">size</span><span class="p">)</span> <span class="k">AS</span> <span class="n">t</span><span class="p">,</span>
</span><span class="line">     <span class="n">dp</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="k">AS</span> <span class="n">r</span>
</span><span class="line">  <span class="k">FROM</span> <span class="n">rra</span> <span class="k">AS</span> <span class="n">rra</span>
</span><span class="line">  <span class="k">JOIN</span> <span class="n">rra_bundle</span> <span class="k">AS</span> <span class="n">rra_bundle</span> <span class="k">ON</span> <span class="n">rra_bundle</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">rra</span><span class="p">.</span><span class="n">rra_bundle_id</span>
</span><span class="line">  <span class="k">JOIN</span> <span class="n">ts</span> <span class="k">AS</span> <span class="n">ts</span> <span class="k">ON</span> <span class="n">ts</span><span class="p">.</span><span class="n">rra_bundle_id</span> <span class="o">=</span> <span class="n">rra_bundle</span><span class="p">.</span><span class="n">id</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And now let’s verify that it works:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="o">=&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tv</span> <span class="k">where</span> <span class="n">rra_id</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">order</span> <span class="k">by</span> <span class="n">t</span><span class="p">;</span>
</span><span class="line"> <span class="n">rra_id</span> <span class="o">|</span>           <span class="n">t</span>            <span class="o">|</span> <span class="n">r</span>
</span><span class="line"> <span class="c1">--------+------------------------+----</span>
</span><span class="line">       <span class="mi">1</span> <span class="o">|</span> <span class="mi">2008</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">06</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">-</span><span class="mi">00</span> <span class="o">|</span> <span class="mi">64</span>
</span><span class="line">       <span class="mi">1</span> <span class="o">|</span> <span class="mi">2008</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">07</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">-</span><span class="mi">00</span> <span class="o">|</span> <span class="mi">67</span>
</span><span class="line">       <span class="mi">1</span> <span class="o">|</span> <span class="mi">2008</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">08</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">-</span><span class="mi">00</span> <span class="o">|</span> <span class="mi">70</span>
</span><span class="line"> <span class="p">...</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This approach makes writes blazingly fast though it does have its
drawbacks. For example there is no way to read a single series - even
though the view selects a single array element, under the hood
Postgres reads the whole row. Given that time series is more write
intensive and rarely read, this may not be a bad compromise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Tgres Part II - A High Rate Counter]]></title>
    <link href="http://grisha.org/blog/2016/12/28/simple-tgres-part-ii-a-high-rate-counter/"/>
    <updated>2016-12-28T17:06:00-05:00</updated>
    <id>http://grisha.org/blog/2016/12/28/simple-tgres-part-ii-a-high-rate-counter</id>
    <content type="html"><![CDATA[<p>Continuing on the <a href="http://grisha.org/blog/2016/12/21/simple-time-series-app-with-tgres/">the previous</a>
post on simple use of <a href="https://github.com/tgres/tgres">Tgres</a> components, let’s
try to count something that goes by really fast.</p>

<p>This time let’s start out with creating a memory-based SerDe. This
means that all our data is in memory and there is no database backing
our series.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">    <span class="s">&quot;fmt&quot;</span>
</span><span class="line">    <span class="s">&quot;net/http&quot;</span>
</span><span class="line">    <span class="s">&quot;time&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="s">&quot;github.com/tgres/tgres/dsl&quot;</span>
</span><span class="line">    <span class="nx">h</span> <span class="s">&quot;github.com/tgres/tgres/http&quot;</span>
</span><span class="line">    <span class="s">&quot;github.com/tgres/tgres/receiver&quot;</span>
</span><span class="line">    <span class="s">&quot;github.com/tgres/tgres/rrd&quot;</span>
</span><span class="line">    <span class="s">&quot;github.com/tgres/tgres/serde&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="nx">step</span> <span class="o">:=</span> <span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="c1">// 1 second resolution</span>
</span><span class="line">    <span class="nx">span</span> <span class="o">:=</span> <span class="mi">600</span> <span class="o">*</span> <span class="nx">step</span>      <span class="c1">// spanning 10 minutes</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// In-memory SerDe</span>
</span><span class="line">    <span class="nx">ms</span> <span class="o">:=</span> <span class="nx">serde</span><span class="p">.</span><span class="nx">NewMemSerDe</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Create a receiver of our data points backed by the above</span>
</span><span class="line">    <span class="c1">// memory SerDe</span>
</span><span class="line">    <span class="nx">rcvr</span> <span class="o">:=</span> <span class="nx">receiver</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">ms</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">receiver</span><span class="p">.</span><span class="nx">SimpleDSFinder</span><span class="p">{</span><span class="o">&amp;</span><span class="nx">rrd</span><span class="p">.</span><span class="nx">DSSpec</span><span class="p">{</span>
</span><span class="line">        <span class="nx">Step</span><span class="p">:</span> <span class="nx">step</span><span class="p">,</span>
</span><span class="line">        <span class="nx">RRAs</span><span class="p">:</span> <span class="p">[]</span><span class="nx">rrd</span><span class="p">.</span><span class="nx">RRASpec</span><span class="p">{</span>
</span><span class="line">            <span class="nx">rrd</span><span class="p">.</span><span class="nx">RRASpec</span><span class="p">{</span><span class="nx">Function</span><span class="p">:</span> <span class="nx">rrd</span><span class="p">.</span><span class="nx">WMEAN</span><span class="p">,</span>
</span><span class="line">                <span class="nx">Step</span><span class="p">:</span> <span class="nx">step</span><span class="p">,</span>
</span><span class="line">                <span class="nx">Span</span><span class="p">:</span> <span class="nx">span</span><span class="p">,</span>
</span><span class="line">            <span class="p">},</span>
</span><span class="line">        <span class="p">}}})</span>
</span><span class="line">    <span class="nx">rcvr</span><span class="p">.</span><span class="nx">Start</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now let’s create a goroutine which creates data points as fast as it
can, the difference from the previous blog post is that we are using
QueueGauge(), which is a <em>paced metric</em>, meaning that it flushes to the
time series only periodically (once per second by default) so as to
not overwhelm the I/O and or network (even though in this case it doesn’t
really matter since we’re using a memory-based SerDe anyway).</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="go"><span class="line">    <span class="nx">start</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class="line">    <span class="nx">end</span> <span class="o">:=</span> <span class="nx">start</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="nx">span</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">n</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class="line">        <span class="k">for</span> <span class="nx">t</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">();</span> <span class="nx">t</span><span class="p">.</span><span class="nx">Before</span><span class="p">(</span><span class="nx">end</span><span class="p">);</span> <span class="nx">t</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">rcvr</span><span class="p">.</span><span class="nx">QueueGauge</span><span class="p">(</span><span class="nx">serde</span><span class="p">.</span><span class="nx">Ident</span><span class="p">{</span><span class="s">&quot;name&quot;</span><span class="p">:</span><span class="s">&quot;foo.bar&quot;</span><span class="p">},</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">Sub</span><span class="p">(</span><span class="nx">start</span><span class="p">)).</span><span class="nx">Seconds</span><span class="p">())</span>
</span><span class="line">            <span class="nx">n</span><span class="o">++</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And finally, as before, we need to hook up a couple of http handlers:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="go"><span class="line">    <span class="nx">db</span> <span class="o">:=</span> <span class="nx">dsl</span><span class="p">.</span><span class="nx">NewNamedDSFetcher</span><span class="p">(</span><span class="nx">ms</span><span class="p">.</span><span class="nx">Fetcher</span><span class="p">())</span>
</span><span class="line">
</span><span class="line">    <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/metrics/find&quot;</span><span class="p">,</span> <span class="nx">h</span><span class="p">.</span><span class="nx">GraphiteMetricsFindHandler</span><span class="p">(</span><span class="nx">db</span><span class="p">))</span>
</span><span class="line">    <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/render&quot;</span><span class="p">,</span> <span class="nx">h</span><span class="p">.</span><span class="nx">GraphiteRenderHandler</span><span class="p">(</span><span class="nx">db</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">    <span class="nx">listenSpec</span> <span class="o">:=</span> <span class="s">&quot;:8088&quot;</span>
</span><span class="line">    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Waiting for requests on %s\n&quot;</span><span class="p">,</span> <span class="nx">listenSpec</span><span class="p">)</span>
</span><span class="line">    <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="nx">listenSpec</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span> <span class="c1">// end of main()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now if we run the above code with something like
<code>go run simpletgres.go</code>, we’ll notice that unlike with the previous
example, the web server starts right away, and the data points are
being written while the server is running. If we aim Grafana at it,
we should be able to see the chart update in real time.</p>

<p>After a couple of minutes, mine looks like this:</p>

<p><img src="http://grisha.org/images/simple-tgres01.png" /></p>

<p>So my macbook can crank these out at about 2.5 million per second.</p>

<p>In my experience instrumenting my apps with simple counters like this
and having them available directly from the app without having to send
them to a separate statsd server somewhere has been extremely useful in
helping understand performance and other issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why is there no Formal Definition of Time Series?]]></title>
    <link href="http://grisha.org/blog/2016/12/23/time-series-what-is-it/"/>
    <updated>2016-12-23T09:13:00-05:00</updated>
    <id>http://grisha.org/blog/2016/12/23/time-series-what-is-it</id>
    <content type="html"><![CDATA[<p>If you’re reading this, chances are you may have searched for
definition of “Time Series”. And, like me, you were probably
disappointed by what you’ve found.</p>

<p>The most popular “definition” I come across amongst our fellow
programmer folk is that it’s “data points with timestamps”. Or something
like that. And you can make charts from it. And that’s about it, alas.</p>

<p>The word <em>time</em> suggests that is has something to do with time. At
first it seems reasonable, I bite. The word <em>series</em> is a little more
peculiar. A mathematician would argue that a series is a <a href="https://en.wikipedia.org/wiki/Series_(mathematics)"><em>sum</em> of a sequence</a>.
Most people though think “series” and “sequence” are the
same thing, and that’s fine. But it’s a clue that <em>time series</em> is
not a scientific term, because it would have been called
<em>time sequence</em> most likely.</p>

<p>Lets get back to the time aspect of it. Why do data points need
timestamps? Or do they? Isn’t it the time <em>interval</em> between points
that is most essential, rather than the absolute time? And if the data
points are spaced equally (which conforms to the most common definiton
of time series), then what purpose would <em>any</em> time-related
information attached to a data point serve?</p>

<p>To understand this better, picture a time chart. Of anything -
temperature, price of bitcoin over a week, whatever. Now think - does
the absolute time of every point provide any useful information to
you? Does the essential meaning of the chart change depending on
whether it shows the price of bitcoin in the year 2016 or 2098 or
10923?</p>

<p>Doesn’t it seem like “time” in “time series” is a bit of a red
herring?</p>

<p>Here is another example. Let’s say I decide to travel from
San-Francisco to New York taking measurements of elevation above the
sea level at every mile. I then plot that sequence on a chart where
x-axis is distance traveled and y-axis is elevation. You would agree
that this chart is not a “time series” by any stretch, right? But then
if I renamed x-axis to “time traveled” (let’s assume I moved at
constant speed), the chart wouldn’t change at all, but now it’s okay
to call it “time series”?</p>

<p>So it’s no surprise that there is no formal definition of “time
series”.  In the end a “time series” is just a <em>sequence</em>. There are
no timestamps required and there is nothing at all special regarding a
dimension being time as opposed to any other unit, which is why there
is no mathematical definition of “time series”. Time series is a
colloquial term etymological origins of which are not known to me, but
it’s not a thing from a scientific perspective, I’m afraid.</p>

<p>Next time you hear “time series” just substitute it with “sequence” and
see how much sense that makes. For example a “time series database” is
a “sequence database”, i.e. database optimized for sequences. Aren’t
all relational databases optimized for sequences?</p>

<p>Something to think about over the holidays…</p>

<p>Edit: Someone brought up the subject of <a href="https://en.wikipedia.org/wiki/Unevenly_spaced_time_series"><em>unevenly-spaced time series</em></a>.
All series are evenly spaced given proper resolution. An
unevenly-spaced time series with timestamps accurate to 1 millisecond
is a sparse evenly-spaced series with a 1 millisecond resolution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Time Series App with Tgres]]></title>
    <link href="http://grisha.org/blog/2016/12/21/simple-time-series-app-with-tgres/"/>
    <updated>2016-12-21T19:55:00-05:00</updated>
    <id>http://grisha.org/blog/2016/12/21/simple-time-series-app-with-tgres</id>
    <content type="html"><![CDATA[<p>Did you know you can use <a href="https://github.com/tgres/tgres">Tgres</a> components
in your code without PostgreSQL, and in
just a dozen lines of code instrument your program with a time
series. This example shows a complete server emulating Graphite API
which you can use with <a href="http://grafana.org/">Grafana</a> (or any other tool).</p>

<p>In this example we will be using three Tgres packages like so (in addition to
a few standard ones, I’m skipping them here for brevity - complete source code <a href="https://gist.github.com/grisha/9561e7837cff1340b218054f36430187">gist</a>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">    <span class="s">&quot;github.com/tgres/tgres/dsl&quot;</span>
</span><span class="line">    <span class="nx">h</span> <span class="s">&quot;github.com/tgres/tgres/http&quot;</span>
</span><span class="line">    <span class="s">&quot;github.com/tgres/tgres/rrd&quot;</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>First we need a <a href="https://godoc.org/github.com/tgres/tgres/rrd#DataSource">Data Source</a>.
This will create a Data Source containing one Round Robin Archive with a 10 second resolution
spanning 1000 seconds.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">step</span> <span class="o">:=</span> <span class="mi">10</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span>
</span><span class="line"><span class="nx">span</span> <span class="o">:=</span> <span class="mi">100</span> <span class="o">*</span> <span class="nx">step</span>
</span><span class="line">
</span><span class="line"><span class="nx">ds</span> <span class="o">:=</span> <span class="nx">rrd</span><span class="p">.</span><span class="nx">NewDataSource</span><span class="p">(</span><span class="nx">rrd</span><span class="p">.</span><span class="nx">DSSpec</span><span class="p">{</span>
</span><span class="line">    <span class="nx">Step</span><span class="p">:</span> <span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span><span class="line">    <span class="nx">RRAs</span><span class="p">:</span> <span class="p">[]</span><span class="nx">rrd</span><span class="p">.</span><span class="nx">RRASpec</span><span class="p">{</span>
</span><span class="line">        <span class="nx">rrd</span><span class="p">.</span><span class="nx">RRASpec</span><span class="p">{</span><span class="nx">Step</span><span class="p">:</span> <span class="nx">step</span><span class="p">,</span> <span class="nx">Span</span><span class="p">:</span> <span class="nx">span</span><span class="p">},</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line"><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let’s shove a bunch of data points into it. To make it look extra
nice, we can make these points look like a sinusoid with this little
function:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kd">func</span> <span class="nx">sinTime</span><span class="p">(</span><span class="nx">t</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="nx">span</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">x</span> <span class="o">:=</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Pi</span> <span class="o">/</span> <span class="nx">span</span><span class="p">.</span><span class="nx">Seconds</span><span class="p">()</span> <span class="o">*</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">Unix</span><span class="p">()</span><span class="o">%</span><span class="p">(</span><span class="nx">span</span><span class="p">.</span><span class="nx">Nanoseconds</span><span class="p">()</span><span class="o">/</span><span class="mf">1e9</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Sin</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And now for the actual population of the series:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">start</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">Add</span><span class="p">(</span><span class="o">-</span><span class="nx">span</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">int</span><span class="p">(</span><span class="nx">span</span><span class="o">/</span><span class="nx">step</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">t</span> <span class="o">:=</span> <span class="nx">start</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">*</span> <span class="nx">step</span><span class="p">)</span>
</span><span class="line">    <span class="nx">ds</span><span class="p">.</span><span class="nx">ProcessDataPoint</span><span class="p">(</span><span class="nx">sinTime</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">span</span><span class="p">),</span> <span class="nx">t</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We will also need to create a <a href="https://godoc.org/github.com/tgres/tgres/dsl#NamedDSFetcher">NamedDSFetcher</a>,
the structure which knows how to search dot-separated series names a la Graphite.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">db</span> <span class="o">:=</span> <span class="nx">dsl</span><span class="p">.</span><span class="nx">NewNamedDSFetcherMap</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">rrd</span><span class="p">.</span><span class="nx">DataSourcer</span><span class="p">{</span><span class="s">&quot;foo.bar&quot;</span><span class="p">:</span> <span class="nx">ds</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, we need to create two http handlers which will mimic a
Graphite server and start listening for requests:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/metrics/find&quot;</span><span class="p">,</span> <span class="nx">h</span><span class="p">.</span><span class="nx">GraphiteMetricsFindHandler</span><span class="p">(</span><span class="nx">db</span><span class="p">))</span>
</span><span class="line"><span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/render&quot;</span><span class="p">,</span> <span class="nx">h</span><span class="p">.</span><span class="nx">GraphiteRenderHandler</span><span class="p">(</span><span class="nx">db</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="nx">listenSpec</span> <span class="o">:=</span> <span class="s">&quot;:8088&quot;</span>
</span><span class="line"><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Waiting for requests on %s\n&quot;</span><span class="p">,</span> <span class="nx">listenSpec</span><span class="p">)</span>
</span><span class="line"><span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="nx">listenSpec</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now if you point Grafana at it, it will happily think it’s Graphite
and should show you a chart like this:</p>

<p><img src="http://grisha.org/images/simple-tgres00.png" /></p>

<p>Note that you can use all kinds of Graphite functions at this point -
it all “just works”.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Storing Time Series in PostgreSQL (Continued)]]></title>
    <link href="http://grisha.org/blog/2016/12/16/storing-time-series-in-postgresql-part-ii/"/>
    <updated>2016-12-16T19:35:00-05:00</updated>
    <id>http://grisha.org/blog/2016/12/16/storing-time-series-in-postgresql-part-ii</id>
    <content type="html"><![CDATA[<p>Edit: there is now a <a href="http://grisha.org/blog/2017/01/21/storing-time-seris-in-postgresql-optimize-for-write">part iii</a> in this series of articles.</p>

<p>I have <a href="http://grisha.org/blog/2015/09/23/storing-time-series-in-postgresql-efficiently/">previously written</a> how
time series can be stored in PostgreSQL efficiently using <a href="https://www.postgresql.org/docs/current/static/arrays.html">arrays</a>.</p>

<p>As a continuation of that article, I shall attempt to describe in detail the inner workings of an
<a href="https://en.wikipedia.org/wiki/View_(SQL)">SQL view</a> that <a href="https://github.com/tgres/tgres">Tgres</a> uses to
make an array of numbers appear as a regular table
(<a href="https://github.com/tgres/tgres/blob/bc718e3999650b7aab934517179ea47632530d28/serde/postgres.go#L235-L242">link to code</a>).</p>

<p>In short, I will explain how incomprehensible data like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="o">=&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">ts</span><span class="p">;</span>
</span><span class="line"> <span class="n">rra_id</span> <span class="o">|</span> <span class="n">n</span> <span class="o">|</span>           <span class="n">dp</span>
</span><span class="line"><span class="c1">--------+---+------------------------</span>
</span><span class="line">      <span class="mi">1</span> <span class="o">|</span> <span class="mi">0</span> <span class="o">|</span> <span class="err">{</span><span class="mi">64</span><span class="p">,</span><span class="mi">67</span><span class="p">,</span><span class="mi">70</span><span class="p">,</span><span class="mi">71</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">69</span><span class="p">,</span><span class="mi">67</span><span class="err">}</span>
</span><span class="line">      <span class="mi">1</span> <span class="o">|</span> <span class="mi">1</span> <span class="o">|</span> <span class="err">{</span><span class="mi">65</span><span class="p">,</span><span class="mi">60</span><span class="p">,</span><span class="mi">58</span><span class="p">,</span><span class="mi">59</span><span class="p">,</span><span class="mi">62</span><span class="p">,</span><span class="mi">68</span><span class="p">,</span><span class="mi">70</span><span class="err">}</span>
</span><span class="line">      <span class="mi">1</span> <span class="o">|</span> <span class="mi">2</span> <span class="o">|</span> <span class="err">{</span><span class="mi">71</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">77</span><span class="p">,</span><span class="mi">70</span><span class="p">,</span><span class="mi">71</span><span class="p">,</span><span class="mi">73</span><span class="p">,</span><span class="mi">75</span><span class="err">}</span>
</span><span class="line">      <span class="mi">1</span> <span class="o">|</span> <span class="mi">3</span> <span class="o">|</span> <span class="err">{</span><span class="mi">79</span><span class="p">,</span><span class="mi">82</span><span class="p">,</span><span class="mi">90</span><span class="p">,</span><span class="mi">69</span><span class="p">,</span><span class="mi">75</span><span class="p">,</span><span class="mi">80</span><span class="p">,</span><span class="mi">81</span><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>… can be transformed in an SQL view to appear as so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="o">=&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">tv</span> <span class="k">order</span> <span class="k">by</span> <span class="n">t</span><span class="p">;</span>
</span><span class="line"> <span class="n">rra_id</span> <span class="o">|</span>           <span class="n">t</span>            <span class="o">|</span> <span class="n">r</span>
</span><span class="line"><span class="c1">--------+------------------------+----</span>
</span><span class="line">      <span class="mi">1</span> <span class="o">|</span> <span class="mi">2008</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">06</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">+</span><span class="mi">00</span> <span class="o">|</span> <span class="mi">64</span>
</span><span class="line">      <span class="mi">1</span> <span class="o">|</span> <span class="mi">2008</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">07</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">+</span><span class="mi">00</span> <span class="o">|</span> <span class="mi">67</span>
</span><span class="line">      <span class="mi">1</span> <span class="o">|</span> <span class="mi">2008</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">08</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">+</span><span class="mi">00</span> <span class="o">|</span> <span class="mi">70</span>
</span><span class="line">      <span class="mi">1</span> <span class="o">|</span> <span class="mi">2008</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">09</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">+</span><span class="mi">00</span> <span class="o">|</span> <span class="mi">71</span>
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This write up will make a lot more sense if you read the
<a href="http://grisha.org/blog/2015/09/23/storing-time-series-in-postgresql-efficiently/">previous post</a> first.
To recap, Tgres stores series in an array broken up over multiple
table rows each containing an array representing a segment of the
series. The series array is a round-robin structure, which means
that it occupies a fixed amount of space and we do not need to worry
about expiring data points: the round-robin nature of the array
takes care of it by overwriting old data with new on assignment.</p>

<p>An additional benefit of such a fixed interval round-robin structure
is that we do not need to store timestamps for every data point. If we
know the timestamp of the latest entry along with the series step and size,
we can extrapolate the timestamp of any point in the series.</p>

<p>Tgres creates an SQL view which takes care of this extrapolation and
makes this data easy to query. Tgres actually uses this view as its
only source of time series information when reading from the database
thus delegating all the processing to the database server, where it is
close to the data and most efficient.</p>

<p>If you would like to follow along on the Postgres command line, feel
free to create and populate the tables with the following SQL, which
is nearly identical to the schema used by Tgres:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">rra</span> <span class="p">(</span>
</span><span class="line">  <span class="n">id</span> <span class="nb">SERIAL</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
</span><span class="line">  <span class="n">step_s</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class="line">  <span class="n">steps_per_row</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class="line">  <span class="k">size</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class="line">  <span class="n">width</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class="line">  <span class="n">latest</span> <span class="n">TIMESTAMPTZ</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">ts</span> <span class="p">(</span>
</span><span class="line">  <span class="n">rra_id</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class="line">  <span class="n">n</span> <span class="nb">INT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class="line">  <span class="n">dp</span> <span class="n">DOUBLE</span> <span class="k">PRECISION</span><span class="p">[]</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">DEFAULT</span> <span class="s1">&#39;{}&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">rra</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">1440</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="s1">&#39;2008-04-02 00:00:00-00&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;{64,67,70,71,72,69,67}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;{65,60,58,59,62,68,70}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;{71,72,77,70,71,73,75}&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">ts</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;{79,82,90,69,75,80,81}&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And finally create the view:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">CREATE</span> <span class="k">VIEW</span> <span class="n">tv</span> <span class="k">AS</span>
</span><span class="line">  <span class="k">SELECT</span> <span class="n">rra</span><span class="p">.</span><span class="n">id</span> <span class="n">rra_id</span><span class="p">,</span>
</span><span class="line">         <span class="n">latest</span> <span class="o">-</span> <span class="nb">INTERVAL</span> <span class="s1">&#39;1 SECOND&#39;</span> <span class="o">*</span> <span class="n">rra</span><span class="p">.</span><span class="n">step_s</span> <span class="o">*</span> <span class="n">rra</span><span class="p">.</span><span class="n">steps_per_row</span> <span class="o">*</span>
</span><span class="line">           <span class="k">MOD</span><span class="p">(</span><span class="n">rra</span><span class="p">.</span><span class="k">size</span> <span class="o">+</span> <span class="k">MOD</span><span class="p">(</span><span class="k">EXTRACT</span><span class="p">(</span><span class="n">EPOCH</span> <span class="k">FROM</span> <span class="n">rra</span><span class="p">.</span><span class="n">latest</span><span class="p">)::</span><span class="nb">BIGINT</span><span class="o">/</span><span class="p">(</span><span class="n">rra</span><span class="p">.</span><span class="n">step_s</span> <span class="o">*</span> <span class="n">rra</span><span class="p">.</span><span class="n">steps_per_row</span><span class="p">),</span> <span class="k">size</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">           <span class="o">-</span> <span class="p">(</span><span class="n">generate_subscripts</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">n</span> <span class="o">*</span> <span class="n">width</span><span class="p">),</span> <span class="n">rra</span><span class="p">.</span><span class="k">size</span><span class="p">)</span> <span class="k">AS</span> <span class="n">t</span><span class="p">,</span>
</span><span class="line">         <span class="k">UNNEST</span><span class="p">(</span><span class="n">dp</span><span class="p">)</span> <span class="k">AS</span> <span class="n">r</span>
</span><span class="line">    <span class="k">FROM</span> <span class="n">rra</span>
</span><span class="line">   <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">ts</span> <span class="n">ts</span> <span class="k">ON</span> <span class="n">ts</span><span class="p">.</span><span class="n">rra_id</span> <span class="o">=</span> <span class="n">rra</span><span class="p">.</span><span class="n">id</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now give it a whirl with a <code>SELECT * FROM tv ORDER BY t</code>. Impressive? So how does it work?</p>

<p>First let’s go over the columns of the rra table.</p>

<ul>
  <li><code>step_s</code>: the minimal unit of time expressed in seconds (60 or 1 minute in the above data).</li>
  <li><code>steps_per_row</code>: the number of the <code>step_s</code> intervals in one slot of our time series.
 In our example it is 1440, which is the number of minutes in a day, thus making our time series
 resolution <em>one day</em>.</li>
  <li><code>size</code>: number of slots in the series. Ours is 28, i.e. four weeks.</li>
  <li><code>width</code>: size of a segment which will be stored in a single row, which in our case
 is 7 (one week).</li>
  <li><code>latest</code>: the timestamp of the last data point in the series.</li>
</ul>

<p>Next, let’s look at the <code>UNNEST</code> keyword in the SQL of the view. <code>UNNEST</code> takes an array and turns it into row, e.g.:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="o">=&gt;</span> <span class="k">SELECT</span> <span class="k">UNNEST</span><span class="p">(</span><span class="n">dp</span><span class="p">)</span> <span class="k">AS</span> <span class="n">r</span> <span class="k">FROM</span> <span class="n">ts</span><span class="p">;</span>
</span><span class="line"> <span class="n">r</span>
</span><span class="line"><span class="c1">----</span>
</span><span class="line"> <span class="mi">64</span>
</span><span class="line"> <span class="mi">67</span>
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>UNNEST</code> works in conjunction with the <code>generate_subscripts</code>
PostgreSQL function which generates index values:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="o">=&gt;</span> <span class="k">SELECT</span> <span class="n">generate_subscripts</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="n">i</span><span class="p">,</span> <span class="k">UNNEST</span><span class="p">(</span><span class="n">dp</span><span class="p">)</span> <span class="k">AS</span> <span class="n">r</span> <span class="k">FROM</span> <span class="n">ts</span><span class="p">;</span>
</span><span class="line"> <span class="n">i</span> <span class="o">|</span> <span class="n">r</span>
</span><span class="line"><span class="c1">---+----</span>
</span><span class="line"> <span class="mi">1</span> <span class="o">|</span> <span class="mi">64</span>
</span><span class="line"> <span class="mi">2</span> <span class="o">|</span> <span class="mi">67</span>
</span><span class="line"><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let us now zoom in on the very long expression in the view, here it is again:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="n">latest</span> <span class="o">-</span> <span class="nb">INTERVAL</span> <span class="s1">&#39;1 SECOND&#39;</span> <span class="o">*</span> <span class="n">rra</span><span class="p">.</span><span class="n">step_s</span> <span class="o">*</span> <span class="n">rra</span><span class="p">.</span><span class="n">steps_per_row</span> <span class="o">*</span>
</span><span class="line">  <span class="k">MOD</span><span class="p">(</span><span class="n">rra</span><span class="p">.</span><span class="k">size</span> <span class="o">+</span> <span class="k">MOD</span><span class="p">(</span><span class="k">EXTRACT</span><span class="p">(</span><span class="n">EPOCH</span> <span class="k">FROM</span> <span class="n">rra</span><span class="p">.</span><span class="n">latest</span><span class="p">)::</span><span class="nb">BIGINT</span><span class="o">/</span><span class="p">(</span><span class="n">rra</span><span class="p">.</span><span class="n">step_s</span> <span class="o">*</span> <span class="n">rra</span><span class="p">.</span><span class="n">steps_per_row</span><span class="p">),</span> <span class="k">size</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">  <span class="o">-</span> <span class="p">(</span><span class="n">generate_subscripts</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">n</span> <span class="o">*</span> <span class="n">width</span><span class="p">),</span> <span class="n">rra</span><span class="p">.</span><span class="k">size</span><span class="p">)</span> <span class="k">AS</span> <span class="n">t</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A perhaps not immediately apparent trick to how all this works is that all
our series are aligned
on the <a href="https://en.wikipedia.org/wiki/Unix_time">beginning of the epoch</a>.
This means that at UNIX time 0, any series’ slot index is 0. From then on it
increments sequentially until the series size is reached, at which point
it wraps-around to 0 (thus “round-robin”). Armed with this information we
can calculate the index for any point in time.</p>

<p>The formula for calculating the index <code>i</code> for a given time <code>t</code> is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">i</span> <span class="o">=</span> <span class="n">t</span><span class="o">/</span><span class="n">step</span> <span class="o">%</span> <span class="n">size</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We need time to be expressed as a UNIX time which is done
with <code>EXTRACT(EPOCH FROM rra.latest)::BIGINT</code>. Now you should recognize
the above formula in the more verbose expression</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">MOD</span><span class="p">(</span><span class="k">EXTRACT</span><span class="p">(</span><span class="n">EPOCH</span> <span class="k">FROM</span> <span class="n">rra</span><span class="p">.</span><span class="n">latest</span><span class="p">)::</span><span class="nb">BIGINT</span><span class="o">/</span><span class="p">(</span><span class="n">rra</span><span class="p">.</span><span class="n">step_s</span> <span class="o">*</span> <span class="n">rra</span><span class="p">.</span><span class="n">steps_per_row</span><span class="p">),</span> <span class="k">size</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>where <code>rra.step_s * rra.steps_per_row</code> is the size of our series in seconds.</p>

<p>Next, we need to compute the <em>distance</em> between the current slot and the
last slot (for which we know the timestamp). I.e. if the last slot is <code>i</code> and the slot we need the
timestamp for is <code>j</code>, the distance between them is <code>i-j</code>, but with a
caveat: it is possible for <code>j</code> to be greater than <code>i</code> if the series
wraps around, in which case the distance is the sum of the distance from
<code>j</code> to the end of the series and the distance from the beginning to
<code>i</code>. If you ponder over it with a pencil and paper long enough, you
will arrive at the following formula for distance between two slots
<code>i</code> and <code>j</code> in a wrap-around array:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">distance</span> <span class="o">=</span> <span class="p">(</span><span class="n">size</span> <span class="o">+</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Another thing to consider is that we’re splitting our series across
multiple rows, thus the actual index of any point is the subscript
into the current segment plus the index of the segment itself (the <code>n</code>
column) multiplied by the <code>wdith</code> of the segment: <code>generate_subscripts(dp,1) + n * width</code>.</p>

<p>Which pieced together in SQL now looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">MOD</span><span class="p">(</span><span class="n">rra</span><span class="p">.</span><span class="k">size</span> <span class="o">+</span> <span class="k">MOD</span><span class="p">(</span><span class="k">EXTRACT</span><span class="p">(</span><span class="n">EPOCH</span> <span class="k">FROM</span> <span class="n">rra</span><span class="p">.</span><span class="n">latest</span><span class="p">)::</span><span class="nb">BIGINT</span><span class="o">/</span><span class="p">(</span><span class="n">rra</span><span class="p">.</span><span class="n">step_s</span> <span class="o">*</span> <span class="n">rra</span><span class="p">.</span><span class="n">steps_per_row</span><span class="p">),</span> <span class="k">size</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">  <span class="o">-</span> <span class="p">(</span><span class="n">generate_subscripts</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">n</span> <span class="o">*</span> <span class="n">width</span><span class="p">),</span> <span class="n">rra</span><span class="p">.</span><span class="k">size</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Astute readers should notice an unexplained <code>+ 1</code>. This is because
PostgreSQL arrays are 1-based.</p>

<p>Now we need to convert the distance expressed in array slots into
a time interval, which we do by multiplying it by
<code>INTERVAL '1 SECOND' * rra.step_s * rra.steps_per_row</code>.</p>

<p>And finally, we need to subtract the above time interval from the
latest stamp which yields (ta-da!) the timestamp of the current slot:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="n">latest</span> <span class="o">-</span> <span class="nb">INTERVAL</span> <span class="s1">&#39;1 SECOND&#39;</span> <span class="o">*</span> <span class="n">rra</span><span class="p">.</span><span class="n">step_s</span> <span class="o">*</span> <span class="n">rra</span><span class="p">.</span><span class="n">steps_per_row</span> <span class="o">*</span>
</span><span class="line">  <span class="k">MOD</span><span class="p">(</span><span class="n">rra</span><span class="p">.</span><span class="k">size</span> <span class="o">+</span> <span class="k">MOD</span><span class="p">(</span><span class="k">EXTRACT</span><span class="p">(</span><span class="n">EPOCH</span> <span class="k">FROM</span> <span class="n">rra</span><span class="p">.</span><span class="n">latest</span><span class="p">)::</span><span class="nb">BIGINT</span><span class="o">/</span><span class="p">(</span><span class="n">rra</span><span class="p">.</span><span class="n">step_s</span> <span class="o">*</span> <span class="n">rra</span><span class="p">.</span><span class="n">steps_per_row</span><span class="p">),</span> <span class="k">size</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">  <span class="o">-</span> <span class="p">(</span><span class="n">generate_subscripts</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">n</span> <span class="o">*</span> <span class="n">width</span><span class="p">),</span> <span class="n">rra</span><span class="p">.</span><span class="k">size</span><span class="p">)</span> <span class="k">AS</span> <span class="n">t</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s it! And even though this may look complicated, from the
computational view point it is very efficient, and PostgreSQL can
handle it easily.</p>

<p>As an exercise, try setting <code>latest</code> to various timestamps and observe
how it affects the output of the view and see if you can explain how
and why it happens.</p>
]]></content>
  </entry>
  
</feed>
